{"ast":null,"code":"import _defineProperty from \"/Users/caio/Projects/Samples/front-vawlog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _inherits from \"/Users/caio/Projects/Samples/front-vawlog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/caio/Projects/Samples/front-vawlog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"/Users/caio/Projects/Samples/front-vawlog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/caio/Projects/Samples/front-vawlog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/caio/Projects/Samples/front-vawlog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/caio/Projects/Samples/front-vawlog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n/**\n * Fuse.js v6.4.6 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2021 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray ? getTag(value) === '[object Array]' : Array.isArray(value);\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\nvar INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  var result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n}\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\nfunction isString(value) {\n  return typeof value === 'string';\n}\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\nfunction isBoolean(value) {\n  return value === true || value === false || isObjectLike(value) && getTag(value) == '[object Boolean]';\n}\nfunction isObject(value) {\n  return typeof value === 'object';\n}\n\n// Checks if `value` is object-like.\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null;\n}\nfunction isDefined(value) {\n  return value !== undefined && value !== null;\n}\nfunction isBlank(value) {\n  return !value.trim().length;\n}\n\n// Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\nfunction getTag(value) {\n  return value == null ? value === undefined ? '[object Undefined]' : '[object Null]' : Object.prototype.toString.call(value);\n}\nvar EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\nvar INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\nvar LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = function LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key) {\n  return \"Invalid value for key \".concat(key);\n};\nvar PATTERN_LENGTH_TOO_LARGE = function PATTERN_LENGTH_TOO_LARGE(max) {\n  return \"Pattern length exceeds max of \".concat(max, \".\");\n};\nvar MISSING_KEY_PROPERTY = function MISSING_KEY_PROPERTY(name) {\n  return \"Missing \".concat(name, \" property in key\");\n};\nvar INVALID_KEY_WEIGHT_VALUE = function INVALID_KEY_WEIGHT_VALUE(key) {\n  return \"Property 'weight' in key '\".concat(key, \"' must be a positive integer\");\n};\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar KeyStore = /*#__PURE__*/function () {\n  function KeyStore(keys) {\n    var _this = this;\n    _classCallCheck(this, KeyStore);\n    this._keys = [];\n    this._keyMap = {};\n    var totalWeight = 0;\n    keys.forEach(function (key) {\n      var obj = createKey(key);\n      totalWeight += obj.weight;\n      _this._keys.push(obj);\n      _this._keyMap[obj.id] = obj;\n      totalWeight += obj.weight;\n    });\n\n    // Normalize weights so that their sum is equal to 1\n    this._keys.forEach(function (key) {\n      key.weight /= totalWeight;\n    });\n  }\n  _createClass(KeyStore, [{\n    key: \"get\",\n    value: function get(keyId) {\n      return this._keyMap[keyId];\n    }\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return this._keys;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return JSON.stringify(this._keys);\n    }\n  }]);\n  return KeyStore;\n}();\nfunction createKey(key) {\n  var path = null;\n  var id = null;\n  var src = null;\n  var weight = 1;\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'));\n    }\n    var name = key.name;\n    src = name;\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name));\n      }\n    }\n    path = createKeyPath(name);\n    id = createKeyId(name);\n  }\n  return {\n    path: path,\n    id: id,\n    weight: weight,\n    src: src\n  };\n}\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.');\n}\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key;\n}\nfunction get(obj, path) {\n  var list = [];\n  var arr = false;\n  var deepGet = function deepGet(obj, path, index) {\n    if (!isDefined(obj)) {\n      return;\n    }\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      var key = path[index];\n      var value = obj[key];\n      if (!isDefined(value)) {\n        return;\n      }\n\n      // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n      if (index === path.length - 1 && (isString(value) || isNumber(value) || isBoolean(value))) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true;\n        // Search each item in the array.\n        for (var i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  };\n\n  // Backwards compatibility (since path used to be a string)\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n  return arr ? list : list[0];\n}\nvar MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\nvar BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: function sortFn(a, b) {\n    return a.score === b.score ? a.idx < b.idx ? -1 : 1 : a.score < b.score ? -1 : 1;\n  }\n};\nvar FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\nvar AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false\n};\nvar Config = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, BasicOptions), MatchOptions), FuzzyOptions), AdvancedOptions);\nvar SPACE = /[^ ]+/g;\n\n// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm() {\n  var mantissa = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n  var cache = new Map();\n  var m = Math.pow(10, mantissa);\n  return {\n    get: function get(value) {\n      var numTokens = value.match(SPACE).length;\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens);\n      }\n      var norm = 1 / Math.sqrt(numTokens);\n\n      // In place of `toFixed(mantissa)`, for faster computation\n      var n = parseFloat(Math.round(norm * m) / m);\n      cache.set(numTokens, n);\n      return n;\n    },\n    clear: function clear() {\n      cache.clear();\n    }\n  };\n}\nvar FuseIndex = /*#__PURE__*/function () {\n  function FuseIndex() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$getFn = _ref.getFn,\n      getFn = _ref$getFn === void 0 ? Config.getFn : _ref$getFn;\n    _classCallCheck(this, FuseIndex);\n    this.norm = norm(3);\n    this.getFn = getFn;\n    this.isCreated = false;\n    this.setIndexRecords();\n  }\n  _createClass(FuseIndex, [{\n    key: \"setSources\",\n    value: function setSources() {\n      var docs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      this.docs = docs;\n    }\n  }, {\n    key: \"setIndexRecords\",\n    value: function setIndexRecords() {\n      var records = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      this.records = records;\n    }\n  }, {\n    key: \"setKeys\",\n    value: function setKeys() {\n      var _this2 = this;\n      var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      this.keys = keys;\n      this._keysMap = {};\n      keys.forEach(function (key, idx) {\n        _this2._keysMap[key.id] = idx;\n      });\n    }\n  }, {\n    key: \"create\",\n    value: function create() {\n      var _this3 = this;\n      if (this.isCreated || !this.docs.length) {\n        return;\n      }\n      this.isCreated = true;\n\n      // List is Array<String>\n      if (isString(this.docs[0])) {\n        this.docs.forEach(function (doc, docIndex) {\n          _this3._addString(doc, docIndex);\n        });\n      } else {\n        // List is Array<Object>\n        this.docs.forEach(function (doc, docIndex) {\n          _this3._addObject(doc, docIndex);\n        });\n      }\n      this.norm.clear();\n    }\n    // Adds a doc to the end of the index\n  }, {\n    key: \"add\",\n    value: function add(doc) {\n      var idx = this.size();\n      if (isString(doc)) {\n        this._addString(doc, idx);\n      } else {\n        this._addObject(doc, idx);\n      }\n    }\n    // Removes the doc at the specified index of the index\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(idx) {\n      this.records.splice(idx, 1);\n\n      // Change ref index of every subsquent doc\n      for (var i = idx, len = this.size(); i < len; i += 1) {\n        this.records[i].i -= 1;\n      }\n    }\n  }, {\n    key: \"getValueForItemAtKeyId\",\n    value: function getValueForItemAtKeyId(item, keyId) {\n      return item[this._keysMap[keyId]];\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.records.length;\n    }\n  }, {\n    key: \"_addString\",\n    value: function _addString(doc, docIndex) {\n      if (!isDefined(doc) || isBlank(doc)) {\n        return;\n      }\n      var record = {\n        v: doc,\n        i: docIndex,\n        n: this.norm.get(doc)\n      };\n      this.records.push(record);\n    }\n  }, {\n    key: \"_addObject\",\n    value: function _addObject(doc, docIndex) {\n      var _this4 = this;\n      var record = {\n        i: docIndex,\n        $: {}\n      };\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      this.keys.forEach(function (key, keyIndex) {\n        // console.log(key)\n        var value = _this4.getFn(doc, key.path);\n        if (!isDefined(value)) {\n          return;\n        }\n        if (isArray(value)) {\n          (function () {\n            var subRecords = [];\n            var stack = [{\n              nestedArrIndex: -1,\n              value: value\n            }];\n            while (stack.length) {\n              var _stack$pop = stack.pop(),\n                nestedArrIndex = _stack$pop.nestedArrIndex,\n                _value = _stack$pop.value;\n              if (!isDefined(_value)) {\n                continue;\n              }\n              if (isString(_value) && !isBlank(_value)) {\n                var subRecord = {\n                  v: _value,\n                  i: nestedArrIndex,\n                  n: _this4.norm.get(_value)\n                };\n                subRecords.push(subRecord);\n              } else if (isArray(_value)) {\n                _value.forEach(function (item, k) {\n                  stack.push({\n                    nestedArrIndex: k,\n                    value: item\n                  });\n                });\n              }\n            }\n            record.$[keyIndex] = subRecords;\n          })();\n        } else if (!isBlank(value)) {\n          var subRecord = {\n            v: value,\n            n: _this4.norm.get(value)\n          };\n          record.$[keyIndex] = subRecord;\n        }\n      });\n      this.records.push(record);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        keys: this.keys,\n        records: this.records\n      };\n    }\n  }]);\n  return FuseIndex;\n}();\nfunction createIndex(keys, docs) {\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref2$getFn = _ref2.getFn,\n    getFn = _ref2$getFn === void 0 ? Config.getFn : _ref2$getFn;\n  var myIndex = new FuseIndex({\n    getFn: getFn\n  });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex;\n}\nfunction parseIndex(data) {\n  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref3$getFn = _ref3.getFn,\n    getFn = _ref3$getFn === void 0 ? Config.getFn : _ref3$getFn;\n  var keys = data.keys,\n    records = data.records;\n  var myIndex = new FuseIndex({\n    getFn: getFn\n  });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex;\n}\nfunction computeScore(pattern) {\n  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref4$errors = _ref4.errors,\n    errors = _ref4$errors === void 0 ? 0 : _ref4$errors,\n    _ref4$currentLocation = _ref4.currentLocation,\n    currentLocation = _ref4$currentLocation === void 0 ? 0 : _ref4$currentLocation,\n    _ref4$expectedLocatio = _ref4.expectedLocation,\n    expectedLocation = _ref4$expectedLocatio === void 0 ? 0 : _ref4$expectedLocatio,\n    _ref4$distance = _ref4.distance,\n    distance = _ref4$distance === void 0 ? Config.distance : _ref4$distance,\n    _ref4$ignoreLocation = _ref4.ignoreLocation,\n    ignoreLocation = _ref4$ignoreLocation === void 0 ? Config.ignoreLocation : _ref4$ignoreLocation;\n  var accuracy = errors / pattern.length;\n  if (ignoreLocation) {\n    return accuracy;\n  }\n  var proximity = Math.abs(expectedLocation - currentLocation);\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy;\n  }\n  return accuracy + proximity / distance;\n}\nfunction convertMaskToIndices() {\n  var matchmask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var minMatchCharLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Config.minMatchCharLength;\n  var indices = [];\n  var start = -1;\n  var end = -1;\n  var i = 0;\n  for (var len = matchmask.length; i < len; i += 1) {\n    var match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n  return indices;\n}\n\n// Machine word size\nvar MAX_BITS = 32;\nfunction search(text, pattern, patternAlphabet) {\n  var _ref5 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n    _ref5$location = _ref5.location,\n    location = _ref5$location === void 0 ? Config.location : _ref5$location,\n    _ref5$distance = _ref5.distance,\n    distance = _ref5$distance === void 0 ? Config.distance : _ref5$distance,\n    _ref5$threshold = _ref5.threshold,\n    threshold = _ref5$threshold === void 0 ? Config.threshold : _ref5$threshold,\n    _ref5$findAllMatches = _ref5.findAllMatches,\n    findAllMatches = _ref5$findAllMatches === void 0 ? Config.findAllMatches : _ref5$findAllMatches,\n    _ref5$minMatchCharLen = _ref5.minMatchCharLength,\n    minMatchCharLength = _ref5$minMatchCharLen === void 0 ? Config.minMatchCharLength : _ref5$minMatchCharLen,\n    _ref5$includeMatches = _ref5.includeMatches,\n    includeMatches = _ref5$includeMatches === void 0 ? Config.includeMatches : _ref5$includeMatches,\n    _ref5$ignoreLocation = _ref5.ignoreLocation,\n    ignoreLocation = _ref5$ignoreLocation === void 0 ? Config.ignoreLocation : _ref5$ignoreLocation;\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS));\n  }\n  var patternLen = pattern.length;\n  // Set starting location at beginning text and initialize the alphabet.\n  var textLen = text.length;\n  // Handle the case when location > text.length\n  var expectedLocation = Math.max(0, Math.min(location, textLen));\n  // Highest score beyond which we give up.\n  var currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  var bestLocation = expectedLocation;\n\n  // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n  var computeMatches = minMatchCharLength > 1 || includeMatches;\n  // A mask of the matches, used for building the indices\n  var matchMask = computeMatches ? Array(textLen) : [];\n  var index;\n\n  // Get all exact matches, here for speed up\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    var score = computeScore(pattern, {\n      currentLocation: index,\n      expectedLocation: expectedLocation,\n      distance: distance,\n      ignoreLocation: ignoreLocation\n    });\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n    if (computeMatches) {\n      var i = 0;\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n  var lastBitArr = [];\n  var finalScore = 1;\n  var binMax = patternLen + textLen;\n  var mask = 1 << patternLen - 1;\n  for (var _i = 0; _i < patternLen; _i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    var binMin = 0;\n    var binMid = binMax;\n    while (binMin < binMid) {\n      var _score2 = computeScore(pattern, {\n        errors: _i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation: expectedLocation,\n        distance: distance,\n        ignoreLocation: ignoreLocation\n      });\n      if (_score2 <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n    var start = Math.max(1, expectedLocation - binMid + 1);\n    var finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    var bitArr = Array(finish + 2);\n    bitArr[finish + 1] = (1 << _i) - 1;\n    for (var j = finish; j >= start; j -= 1) {\n      var currentLocation = j - 1;\n      var charMatch = patternAlphabet[text.charAt(currentLocation)];\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      }\n\n      // First pass: exact match\n      bitArr[j] = (bitArr[j + 1] << 1 | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (_i) {\n        bitArr[j] |= (lastBitArr[j + 1] | lastBitArr[j]) << 1 | 1 | lastBitArr[j + 1];\n      }\n      if (bitArr[j] & mask) {\n        finalScore = computeScore(pattern, {\n          errors: _i,\n          currentLocation: currentLocation,\n          expectedLocation: expectedLocation,\n          distance: distance,\n          ignoreLocation: ignoreLocation\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break;\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    var _score = computeScore(pattern, {\n      errors: _i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation: expectedLocation,\n      distance: distance,\n      ignoreLocation: ignoreLocation\n    });\n    if (_score > currentThreshold) {\n      break;\n    }\n    lastBitArr = bitArr;\n  }\n  var result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n  if (computeMatches) {\n    var indices = convertMaskToIndices(matchMask, minMatchCharLength);\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n  return result;\n}\nfunction createPatternAlphabet(pattern) {\n  var mask = {};\n  for (var i = 0, len = pattern.length; i < len; i += 1) {\n    var char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | 1 << len - i - 1;\n  }\n  return mask;\n}\nvar BitapSearch = /*#__PURE__*/function () {\n  function BitapSearch(pattern) {\n    var _this5 = this;\n    var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref6$location = _ref6.location,\n      location = _ref6$location === void 0 ? Config.location : _ref6$location,\n      _ref6$threshold = _ref6.threshold,\n      threshold = _ref6$threshold === void 0 ? Config.threshold : _ref6$threshold,\n      _ref6$distance = _ref6.distance,\n      distance = _ref6$distance === void 0 ? Config.distance : _ref6$distance,\n      _ref6$includeMatches = _ref6.includeMatches,\n      includeMatches = _ref6$includeMatches === void 0 ? Config.includeMatches : _ref6$includeMatches,\n      _ref6$findAllMatches = _ref6.findAllMatches,\n      findAllMatches = _ref6$findAllMatches === void 0 ? Config.findAllMatches : _ref6$findAllMatches,\n      _ref6$minMatchCharLen = _ref6.minMatchCharLength,\n      minMatchCharLength = _ref6$minMatchCharLen === void 0 ? Config.minMatchCharLength : _ref6$minMatchCharLen,\n      _ref6$isCaseSensitive = _ref6.isCaseSensitive,\n      isCaseSensitive = _ref6$isCaseSensitive === void 0 ? Config.isCaseSensitive : _ref6$isCaseSensitive,\n      _ref6$ignoreLocation = _ref6.ignoreLocation,\n      ignoreLocation = _ref6$ignoreLocation === void 0 ? Config.ignoreLocation : _ref6$ignoreLocation;\n    _classCallCheck(this, BitapSearch);\n    this.options = {\n      location: location,\n      threshold: threshold,\n      distance: distance,\n      includeMatches: includeMatches,\n      findAllMatches: findAllMatches,\n      minMatchCharLength: minMatchCharLength,\n      isCaseSensitive: isCaseSensitive,\n      ignoreLocation: ignoreLocation\n    };\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.chunks = [];\n    if (!this.pattern.length) {\n      return;\n    }\n    var addChunk = function addChunk(pattern, startIndex) {\n      _this5.chunks.push({\n        pattern: pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex: startIndex\n      });\n    };\n    var len = this.pattern.length;\n    if (len > MAX_BITS) {\n      var i = 0;\n      var remainder = len % MAX_BITS;\n      var end = len - remainder;\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n      if (remainder) {\n        var startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n  _createClass(BitapSearch, [{\n    key: \"searchIn\",\n    value: function searchIn(text) {\n      var _this$options = this.options,\n        isCaseSensitive = _this$options.isCaseSensitive,\n        includeMatches = _this$options.includeMatches;\n      if (!isCaseSensitive) {\n        text = text.toLowerCase();\n      }\n\n      // Exact match\n      if (this.pattern === text) {\n        var _result = {\n          isMatch: true,\n          score: 0\n        };\n        if (includeMatches) {\n          _result.indices = [[0, text.length - 1]];\n        }\n        return _result;\n      }\n\n      // Otherwise, use Bitap algorithm\n      var _this$options2 = this.options,\n        location = _this$options2.location,\n        distance = _this$options2.distance,\n        threshold = _this$options2.threshold,\n        findAllMatches = _this$options2.findAllMatches,\n        minMatchCharLength = _this$options2.minMatchCharLength,\n        ignoreLocation = _this$options2.ignoreLocation;\n      var allIndices = [];\n      var totalScore = 0;\n      var hasMatches = false;\n      this.chunks.forEach(function (_ref7) {\n        var pattern = _ref7.pattern,\n          alphabet = _ref7.alphabet,\n          startIndex = _ref7.startIndex;\n        var _search = search(text, pattern, alphabet, {\n            location: location + startIndex,\n            distance: distance,\n            threshold: threshold,\n            findAllMatches: findAllMatches,\n            minMatchCharLength: minMatchCharLength,\n            includeMatches: includeMatches,\n            ignoreLocation: ignoreLocation\n          }),\n          isMatch = _search.isMatch,\n          score = _search.score,\n          indices = _search.indices;\n        if (isMatch) {\n          hasMatches = true;\n        }\n        totalScore += score;\n        if (isMatch && indices) {\n          allIndices = [].concat(_toConsumableArray(allIndices), _toConsumableArray(indices));\n        }\n      });\n      var result = {\n        isMatch: hasMatches,\n        score: hasMatches ? totalScore / this.chunks.length : 1\n      };\n      if (hasMatches && includeMatches) {\n        result.indices = allIndices;\n      }\n      return result;\n    }\n  }]);\n  return BitapSearch;\n}();\nvar BaseMatch = /*#__PURE__*/function () {\n  function BaseMatch(pattern) {\n    _classCallCheck(this, BaseMatch);\n    this.pattern = pattern;\n  }\n  _createClass(BaseMatch, [{\n    key: \"search\",\n    value: function search( /*text*/) {}\n  }], [{\n    key: \"isMultiMatch\",\n    value: function isMultiMatch(pattern) {\n      return getMatch(pattern, this.multiRegex);\n    }\n  }, {\n    key: \"isSingleMatch\",\n    value: function isSingleMatch(pattern) {\n      return getMatch(pattern, this.singleRegex);\n    }\n  }]);\n  return BaseMatch;\n}();\nfunction getMatch(pattern, exp) {\n  var matches = pattern.match(exp);\n  return matches ? matches[1] : null;\n}\n\n// Token: 'file\nvar ExactMatch = /*#__PURE__*/function (_BaseMatch) {\n  _inherits(ExactMatch, _BaseMatch);\n  var _super = _createSuper(ExactMatch);\n  function ExactMatch(pattern) {\n    _classCallCheck(this, ExactMatch);\n    return _super.call(this, pattern);\n  }\n  _createClass(ExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var isMatch = text === this.pattern;\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [0, this.pattern.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^=\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^=(.*)$/;\n    }\n  }]);\n  return ExactMatch;\n}(BaseMatch); // Token: !fire\nvar InverseExactMatch = /*#__PURE__*/function (_BaseMatch2) {\n  _inherits(InverseExactMatch, _BaseMatch2);\n  var _super2 = _createSuper(InverseExactMatch);\n  function InverseExactMatch(pattern) {\n    _classCallCheck(this, InverseExactMatch);\n    return _super2.call(this, pattern);\n  }\n  _createClass(InverseExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var index = text.indexOf(this.pattern);\n      var isMatch = index === -1;\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [0, text.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'inverse-exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^!\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^!(.*)$/;\n    }\n  }]);\n  return InverseExactMatch;\n}(BaseMatch); // Token: ^file\nvar PrefixExactMatch = /*#__PURE__*/function (_BaseMatch3) {\n  _inherits(PrefixExactMatch, _BaseMatch3);\n  var _super3 = _createSuper(PrefixExactMatch);\n  function PrefixExactMatch(pattern) {\n    _classCallCheck(this, PrefixExactMatch);\n    return _super3.call(this, pattern);\n  }\n  _createClass(PrefixExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var isMatch = text.startsWith(this.pattern);\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [0, this.pattern.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'prefix-exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^\\^\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^\\^(.*)$/;\n    }\n  }]);\n  return PrefixExactMatch;\n}(BaseMatch); // Token: !^fire\nvar InversePrefixExactMatch = /*#__PURE__*/function (_BaseMatch4) {\n  _inherits(InversePrefixExactMatch, _BaseMatch4);\n  var _super4 = _createSuper(InversePrefixExactMatch);\n  function InversePrefixExactMatch(pattern) {\n    _classCallCheck(this, InversePrefixExactMatch);\n    return _super4.call(this, pattern);\n  }\n  _createClass(InversePrefixExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var isMatch = !text.startsWith(this.pattern);\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [0, text.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'inverse-prefix-exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^!\\^\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^!\\^(.*)$/;\n    }\n  }]);\n  return InversePrefixExactMatch;\n}(BaseMatch); // Token: .file$\nvar SuffixExactMatch = /*#__PURE__*/function (_BaseMatch5) {\n  _inherits(SuffixExactMatch, _BaseMatch5);\n  var _super5 = _createSuper(SuffixExactMatch);\n  function SuffixExactMatch(pattern) {\n    _classCallCheck(this, SuffixExactMatch);\n    return _super5.call(this, pattern);\n  }\n  _createClass(SuffixExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var isMatch = text.endsWith(this.pattern);\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [text.length - this.pattern.length, text.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'suffix-exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^\"(.*)\"\\$$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^(.*)\\$$/;\n    }\n  }]);\n  return SuffixExactMatch;\n}(BaseMatch); // Token: !.file$\nvar InverseSuffixExactMatch = /*#__PURE__*/function (_BaseMatch6) {\n  _inherits(InverseSuffixExactMatch, _BaseMatch6);\n  var _super6 = _createSuper(InverseSuffixExactMatch);\n  function InverseSuffixExactMatch(pattern) {\n    _classCallCheck(this, InverseSuffixExactMatch);\n    return _super6.call(this, pattern);\n  }\n  _createClass(InverseSuffixExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var isMatch = !text.endsWith(this.pattern);\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [0, text.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'inverse-suffix-exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^!\"(.*)\"\\$$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^!(.*)\\$$/;\n    }\n  }]);\n  return InverseSuffixExactMatch;\n}(BaseMatch);\nvar FuzzyMatch = /*#__PURE__*/function (_BaseMatch7) {\n  _inherits(FuzzyMatch, _BaseMatch7);\n  var _super7 = _createSuper(FuzzyMatch);\n  function FuzzyMatch(pattern) {\n    var _this6;\n    var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref8$location = _ref8.location,\n      location = _ref8$location === void 0 ? Config.location : _ref8$location,\n      _ref8$threshold = _ref8.threshold,\n      threshold = _ref8$threshold === void 0 ? Config.threshold : _ref8$threshold,\n      _ref8$distance = _ref8.distance,\n      distance = _ref8$distance === void 0 ? Config.distance : _ref8$distance,\n      _ref8$includeMatches = _ref8.includeMatches,\n      includeMatches = _ref8$includeMatches === void 0 ? Config.includeMatches : _ref8$includeMatches,\n      _ref8$findAllMatches = _ref8.findAllMatches,\n      findAllMatches = _ref8$findAllMatches === void 0 ? Config.findAllMatches : _ref8$findAllMatches,\n      _ref8$minMatchCharLen = _ref8.minMatchCharLength,\n      minMatchCharLength = _ref8$minMatchCharLen === void 0 ? Config.minMatchCharLength : _ref8$minMatchCharLen,\n      _ref8$isCaseSensitive = _ref8.isCaseSensitive,\n      isCaseSensitive = _ref8$isCaseSensitive === void 0 ? Config.isCaseSensitive : _ref8$isCaseSensitive,\n      _ref8$ignoreLocation = _ref8.ignoreLocation,\n      ignoreLocation = _ref8$ignoreLocation === void 0 ? Config.ignoreLocation : _ref8$ignoreLocation;\n    _classCallCheck(this, FuzzyMatch);\n    _this6 = _super7.call(this, pattern);\n    _this6._bitapSearch = new BitapSearch(pattern, {\n      location: location,\n      threshold: threshold,\n      distance: distance,\n      includeMatches: includeMatches,\n      findAllMatches: findAllMatches,\n      minMatchCharLength: minMatchCharLength,\n      isCaseSensitive: isCaseSensitive,\n      ignoreLocation: ignoreLocation\n    });\n    return _this6;\n  }\n  _createClass(FuzzyMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      return this._bitapSearch.searchIn(text);\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'fuzzy';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^(.*)$/;\n    }\n  }]);\n  return FuzzyMatch;\n}(BaseMatch); // Token: 'file\nvar IncludeMatch = /*#__PURE__*/function (_BaseMatch8) {\n  _inherits(IncludeMatch, _BaseMatch8);\n  var _super8 = _createSuper(IncludeMatch);\n  function IncludeMatch(pattern) {\n    _classCallCheck(this, IncludeMatch);\n    return _super8.call(this, pattern);\n  }\n  _createClass(IncludeMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var location = 0;\n      var index;\n      var indices = [];\n      var patternLen = this.pattern.length;\n\n      // Get all exact matches\n      while ((index = text.indexOf(this.pattern, location)) > -1) {\n        location = index + patternLen;\n        indices.push([index, location - 1]);\n      }\n      var isMatch = !!indices.length;\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: indices\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'include';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^'\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^'(.*)$/;\n    }\n  }]);\n  return IncludeMatch;\n}(BaseMatch); // ❗Order is important. DO NOT CHANGE.\nvar searchers = [ExactMatch, IncludeMatch, PrefixExactMatch, InversePrefixExactMatch, InverseSuffixExactMatch, SuffixExactMatch, InverseExactMatch, FuzzyMatch];\nvar searchersLen = searchers.length;\n\n// Regex to split by spaces, but keep anything in quotes together\nvar SPACE_RE = / +(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nvar OR_TOKEN = '|';\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nfunction parseQuery(pattern) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return pattern.split(OR_TOKEN).map(function (item) {\n    var query = item.trim().split(SPACE_RE).filter(function (item) {\n      return item && !!item.trim();\n    });\n    var results = [];\n    for (var i = 0, len = query.length; i < len; i += 1) {\n      var queryItem = query[i];\n\n      // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n      var found = false;\n      var idx = -1;\n      while (!found && ++idx < searchersLen) {\n        var searcher = searchers[idx];\n        var token = searcher.isMultiMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n      if (found) {\n        continue;\n      }\n\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\n      idx = -1;\n      while (++idx < searchersLen) {\n        var _searcher = searchers[idx];\n        var _token = _searcher.isSingleMatch(queryItem);\n        if (_token) {\n          results.push(new _searcher(_token, options));\n          break;\n        }\n      }\n    }\n    return results;\n  });\n}\n\n// These extended matchers can return an array of matches, as opposed\n// to a singl match\nvar MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nvar ExtendedSearch = /*#__PURE__*/function () {\n  function ExtendedSearch(pattern) {\n    var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref9$isCaseSensitive = _ref9.isCaseSensitive,\n      isCaseSensitive = _ref9$isCaseSensitive === void 0 ? Config.isCaseSensitive : _ref9$isCaseSensitive,\n      _ref9$includeMatches = _ref9.includeMatches,\n      includeMatches = _ref9$includeMatches === void 0 ? Config.includeMatches : _ref9$includeMatches,\n      _ref9$minMatchCharLen = _ref9.minMatchCharLength,\n      minMatchCharLength = _ref9$minMatchCharLen === void 0 ? Config.minMatchCharLength : _ref9$minMatchCharLen,\n      _ref9$ignoreLocation = _ref9.ignoreLocation,\n      ignoreLocation = _ref9$ignoreLocation === void 0 ? Config.ignoreLocation : _ref9$ignoreLocation,\n      _ref9$findAllMatches = _ref9.findAllMatches,\n      findAllMatches = _ref9$findAllMatches === void 0 ? Config.findAllMatches : _ref9$findAllMatches,\n      _ref9$location = _ref9.location,\n      location = _ref9$location === void 0 ? Config.location : _ref9$location,\n      _ref9$threshold = _ref9.threshold,\n      threshold = _ref9$threshold === void 0 ? Config.threshold : _ref9$threshold,\n      _ref9$distance = _ref9.distance,\n      distance = _ref9$distance === void 0 ? Config.distance : _ref9$distance;\n    _classCallCheck(this, ExtendedSearch);\n    this.query = null;\n    this.options = {\n      isCaseSensitive: isCaseSensitive,\n      includeMatches: includeMatches,\n      minMatchCharLength: minMatchCharLength,\n      findAllMatches: findAllMatches,\n      ignoreLocation: ignoreLocation,\n      location: location,\n      threshold: threshold,\n      distance: distance\n    };\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n  _createClass(ExtendedSearch, [{\n    key: \"searchIn\",\n    value: function searchIn(text) {\n      var query = this.query;\n      if (!query) {\n        return {\n          isMatch: false,\n          score: 1\n        };\n      }\n      var _this$options3 = this.options,\n        includeMatches = _this$options3.includeMatches,\n        isCaseSensitive = _this$options3.isCaseSensitive;\n      text = isCaseSensitive ? text : text.toLowerCase();\n      var numMatches = 0;\n      var allIndices = [];\n      var totalScore = 0;\n\n      // ORs\n      for (var i = 0, qLen = query.length; i < qLen; i += 1) {\n        var _searchers = query[i];\n\n        // Reset indices\n        allIndices.length = 0;\n        numMatches = 0;\n\n        // ANDs\n        for (var j = 0, pLen = _searchers.length; j < pLen; j += 1) {\n          var searcher = _searchers[j];\n          var _searcher$search = searcher.search(text),\n            isMatch = _searcher$search.isMatch,\n            indices = _searcher$search.indices,\n            score = _searcher$search.score;\n          if (isMatch) {\n            numMatches += 1;\n            totalScore += score;\n            if (includeMatches) {\n              var type = searcher.constructor.type;\n              if (MultiMatchSet.has(type)) {\n                allIndices = [].concat(_toConsumableArray(allIndices), _toConsumableArray(indices));\n              } else {\n                allIndices.push(indices);\n              }\n            }\n          } else {\n            totalScore = 0;\n            numMatches = 0;\n            allIndices.length = 0;\n            break;\n          }\n        }\n\n        // OR condition, so if TRUE, return\n        if (numMatches) {\n          var result = {\n            isMatch: true,\n            score: totalScore / numMatches\n          };\n          if (includeMatches) {\n            result.indices = allIndices;\n          }\n          return result;\n        }\n      }\n\n      // Nothing was matched\n      return {\n        isMatch: false,\n        score: 1\n      };\n    }\n  }], [{\n    key: \"condition\",\n    value: function condition(_, options) {\n      return options.useExtendedSearch;\n    }\n  }]);\n  return ExtendedSearch;\n}();\nvar registeredSearchers = [];\nfunction register() {\n  registeredSearchers.push.apply(registeredSearchers, arguments);\n}\nfunction createSearcher(pattern, options) {\n  for (var i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    var searcherClass = registeredSearchers[i];\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options);\n    }\n  }\n  return new BitapSearch(pattern, options);\n}\nvar LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\nvar KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\nvar isExpression = function isExpression(query) {\n  return !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n};\nvar isPath = function isPath(query) {\n  return !!query[KeyType.PATH];\n};\nvar isLeaf = function isLeaf(query) {\n  return !isArray(query) && isObject(query) && !isExpression(query);\n};\nvar convertToExplicit = function convertToExplicit(query) {\n  return _defineProperty({}, LogicalOperator.AND, Object.keys(query).map(function (key) {\n    return _defineProperty({}, key, query[key]);\n  }));\n};\n\n// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query, options) {\n  var _ref12 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref12$auto = _ref12.auto,\n    auto = _ref12$auto === void 0 ? true : _ref12$auto;\n  var next = function next(query) {\n    var keys = Object.keys(query);\n    var isQueryPath = isPath(query);\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query));\n    }\n    if (isLeaf(query)) {\n      var key = isQueryPath ? query[KeyType.PATH] : keys[0];\n      var pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key));\n      }\n      var obj = {\n        keyId: createKeyId(key),\n        pattern: pattern\n      };\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n      return obj;\n    }\n    var node = {\n      children: [],\n      operator: keys[0]\n    };\n    keys.forEach(function (key) {\n      var value = query[key];\n      if (isArray(value)) {\n        value.forEach(function (item) {\n          node.children.push(next(item));\n        });\n      }\n    });\n    return node;\n  };\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n  return next(query);\n}\n\n// Practical scoring function\nfunction computeScore$1(results, _ref13) {\n  var _ref13$ignoreFieldNor = _ref13.ignoreFieldNorm,\n    ignoreFieldNorm = _ref13$ignoreFieldNor === void 0 ? Config.ignoreFieldNorm : _ref13$ignoreFieldNor;\n  results.forEach(function (result) {\n    var totalScore = 1;\n    result.matches.forEach(function (_ref14) {\n      var key = _ref14.key,\n        norm = _ref14.norm,\n        score = _ref14.score;\n      var weight = key ? key.weight : null;\n      totalScore *= Math.pow(score === 0 && weight ? Number.EPSILON : score, (weight || 1) * (ignoreFieldNorm ? 1 : norm));\n    });\n    result.score = totalScore;\n  });\n}\nfunction transformMatches(result, data) {\n  var matches = result.matches;\n  data.matches = [];\n  if (!isDefined(matches)) {\n    return;\n  }\n  matches.forEach(function (match) {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return;\n    }\n    var indices = match.indices,\n      value = match.value;\n    var obj = {\n      indices: indices,\n      value: value\n    };\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n    data.matches.push(obj);\n  });\n}\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\nfunction format(results, docs) {\n  var _ref15 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref15$includeMatches = _ref15.includeMatches,\n    includeMatches = _ref15$includeMatches === void 0 ? Config.includeMatches : _ref15$includeMatches,\n    _ref15$includeScore = _ref15.includeScore,\n    includeScore = _ref15$includeScore === void 0 ? Config.includeScore : _ref15$includeScore;\n  var transformers = [];\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n  return results.map(function (result) {\n    var idx = result.idx;\n    var data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n    if (transformers.length) {\n      transformers.forEach(function (transformer) {\n        transformer(result, data);\n      });\n    }\n    return data;\n  });\n}\nvar Fuse = /*#__PURE__*/function () {\n  function Fuse(docs) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var index = arguments.length > 2 ? arguments[2] : undefined;\n    _classCallCheck(this, Fuse);\n    this.options = _objectSpread(_objectSpread({}, Config), options);\n    if (this.options.useExtendedSearch && !true) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE);\n    }\n    this._keyStore = new KeyStore(this.options.keys);\n    this.setCollection(docs, index);\n  }\n  _createClass(Fuse, [{\n    key: \"setCollection\",\n    value: function setCollection(docs, index) {\n      this._docs = docs;\n      if (index && !(index instanceof FuseIndex)) {\n        throw new Error(INCORRECT_INDEX_TYPE);\n      }\n      this._myIndex = index || createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn\n      });\n    }\n  }, {\n    key: \"add\",\n    value: function add(doc) {\n      if (!isDefined(doc)) {\n        return;\n      }\n      this._docs.push(doc);\n      this._myIndex.add(doc);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var predicate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function /* doc, idx */ () {\n        return false;\n      };\n      var results = [];\n      for (var i = 0, len = this._docs.length; i < len; i += 1) {\n        var doc = this._docs[i];\n        if (predicate(doc, i)) {\n          this.removeAt(i);\n          i -= 1;\n          len -= 1;\n          results.push(doc);\n        }\n      }\n      return results;\n    }\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(idx) {\n      this._docs.splice(idx, 1);\n      this._myIndex.removeAt(idx);\n    }\n  }, {\n    key: \"getIndex\",\n    value: function getIndex() {\n      return this._myIndex;\n    }\n  }, {\n    key: \"search\",\n    value: function search(query) {\n      var _ref16 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref16$limit = _ref16.limit,\n        limit = _ref16$limit === void 0 ? -1 : _ref16$limit;\n      var _this$options4 = this.options,\n        includeMatches = _this$options4.includeMatches,\n        includeScore = _this$options4.includeScore,\n        shouldSort = _this$options4.shouldSort,\n        sortFn = _this$options4.sortFn,\n        ignoreFieldNorm = _this$options4.ignoreFieldNorm;\n      var results = isString(query) ? isString(this._docs[0]) ? this._searchStringList(query) : this._searchObjectList(query) : this._searchLogical(query);\n      computeScore$1(results, {\n        ignoreFieldNorm: ignoreFieldNorm\n      });\n      if (shouldSort) {\n        results.sort(sortFn);\n      }\n      if (isNumber(limit) && limit > -1) {\n        results = results.slice(0, limit);\n      }\n      return format(results, this._docs, {\n        includeMatches: includeMatches,\n        includeScore: includeScore\n      });\n    }\n  }, {\n    key: \"_searchStringList\",\n    value: function _searchStringList(query) {\n      var searcher = createSearcher(query, this.options);\n      var records = this._myIndex.records;\n      var results = [];\n\n      // Iterate over every string in the index\n      records.forEach(function (_ref17) {\n        var text = _ref17.v,\n          idx = _ref17.i,\n          norm = _ref17.n;\n        if (!isDefined(text)) {\n          return;\n        }\n        var _searcher$searchIn = searcher.searchIn(text),\n          isMatch = _searcher$searchIn.isMatch,\n          score = _searcher$searchIn.score,\n          indices = _searcher$searchIn.indices;\n        if (isMatch) {\n          results.push({\n            item: text,\n            idx: idx,\n            matches: [{\n              score: score,\n              value: text,\n              norm: norm,\n              indices: indices\n            }]\n          });\n        }\n      });\n      return results;\n    }\n  }, {\n    key: \"_searchLogical\",\n    value: function _searchLogical(query) {\n      var _this7 = this;\n      var expression = parse(query, this.options);\n      var evaluate = function evaluate(node, item, idx) {\n        if (!node.children) {\n          var keyId = node.keyId,\n            searcher = node.searcher;\n          var matches = _this7._findMatches({\n            key: _this7._keyStore.get(keyId),\n            value: _this7._myIndex.getValueForItemAtKeyId(item, keyId),\n            searcher: searcher\n          });\n          if (matches && matches.length) {\n            return [{\n              idx: idx,\n              item: item,\n              matches: matches\n            }];\n          }\n          return [];\n        }\n\n        /*eslint indent: [2, 2, {\"SwitchCase\": 1}]*/\n        switch (node.operator) {\n          case LogicalOperator.AND:\n            {\n              var res = [];\n              for (var i = 0, len = node.children.length; i < len; i += 1) {\n                var child = node.children[i];\n                var result = evaluate(child, item, idx);\n                if (result.length) {\n                  res.push.apply(res, _toConsumableArray(result));\n                } else {\n                  return [];\n                }\n              }\n              return res;\n            }\n          case LogicalOperator.OR:\n            {\n              var _res = [];\n              for (var _i2 = 0, _len = node.children.length; _i2 < _len; _i2 += 1) {\n                var _child = node.children[_i2];\n                var _result2 = evaluate(_child, item, idx);\n                if (_result2.length) {\n                  _res.push.apply(_res, _toConsumableArray(_result2));\n                  break;\n                }\n              }\n              return _res;\n            }\n        }\n      };\n      var records = this._myIndex.records;\n      var resultMap = {};\n      var results = [];\n      records.forEach(function (_ref18) {\n        var item = _ref18.$,\n          idx = _ref18.i;\n        if (isDefined(item)) {\n          var expResults = evaluate(expression, item, idx);\n          if (expResults.length) {\n            // Dedupe when adding\n            if (!resultMap[idx]) {\n              resultMap[idx] = {\n                idx: idx,\n                item: item,\n                matches: []\n              };\n              results.push(resultMap[idx]);\n            }\n            expResults.forEach(function (_ref19) {\n              var _resultMap$idx$matche;\n              var matches = _ref19.matches;\n              (_resultMap$idx$matche = resultMap[idx].matches).push.apply(_resultMap$idx$matche, _toConsumableArray(matches));\n            });\n          }\n        }\n      });\n      return results;\n    }\n  }, {\n    key: \"_searchObjectList\",\n    value: function _searchObjectList(query) {\n      var _this8 = this;\n      var searcher = createSearcher(query, this.options);\n      var _this$_myIndex = this._myIndex,\n        keys = _this$_myIndex.keys,\n        records = _this$_myIndex.records;\n      var results = [];\n\n      // List is Array<Object>\n      records.forEach(function (_ref20) {\n        var item = _ref20.$,\n          idx = _ref20.i;\n        if (!isDefined(item)) {\n          return;\n        }\n        var matches = [];\n\n        // Iterate over every key (i.e, path), and fetch the value at that key\n        keys.forEach(function (key, keyIndex) {\n          matches.push.apply(matches, _toConsumableArray(_this8._findMatches({\n            key: key,\n            value: item[keyIndex],\n            searcher: searcher\n          })));\n        });\n        if (matches.length) {\n          results.push({\n            idx: idx,\n            item: item,\n            matches: matches\n          });\n        }\n      });\n      return results;\n    }\n  }, {\n    key: \"_findMatches\",\n    value: function _findMatches(_ref21) {\n      var key = _ref21.key,\n        value = _ref21.value,\n        searcher = _ref21.searcher;\n      if (!isDefined(value)) {\n        return [];\n      }\n      var matches = [];\n      if (isArray(value)) {\n        value.forEach(function (_ref22) {\n          var text = _ref22.v,\n            idx = _ref22.i,\n            norm = _ref22.n;\n          if (!isDefined(text)) {\n            return;\n          }\n          var _searcher$searchIn2 = searcher.searchIn(text),\n            isMatch = _searcher$searchIn2.isMatch,\n            score = _searcher$searchIn2.score,\n            indices = _searcher$searchIn2.indices;\n          if (isMatch) {\n            matches.push({\n              score: score,\n              key: key,\n              value: text,\n              idx: idx,\n              norm: norm,\n              indices: indices\n            });\n          }\n        });\n      } else {\n        var text = value.v,\n          _norm = value.n;\n        var _searcher$searchIn3 = searcher.searchIn(text),\n          isMatch = _searcher$searchIn3.isMatch,\n          score = _searcher$searchIn3.score,\n          indices = _searcher$searchIn3.indices;\n        if (isMatch) {\n          matches.push({\n            score: score,\n            key: key,\n            value: text,\n            norm: _norm,\n            indices: indices\n          });\n        }\n      }\n      return matches;\n    }\n  }]);\n  return Fuse;\n}();\nFuse.version = '6.4.6';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n{\n  Fuse.parseQuery = parse;\n}\n{\n  register(ExtendedSearch);\n}\nexport default Fuse;","map":{"version":3,"names":["isArray","value","Array","getTag","INFINITY","baseToString","result","toString","isString","isNumber","isBoolean","isObjectLike","isObject","isDefined","undefined","isBlank","trim","length","Object","prototype","call","EXTENDED_SEARCH_UNAVAILABLE","INCORRECT_INDEX_TYPE","LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY","key","PATTERN_LENGTH_TOO_LARGE","max","MISSING_KEY_PROPERTY","name","INVALID_KEY_WEIGHT_VALUE","hasOwn","hasOwnProperty","KeyStore","keys","_keys","_keyMap","totalWeight","forEach","obj","createKey","weight","push","id","keyId","JSON","stringify","path","src","createKeyPath","createKeyId","Error","split","join","get","list","arr","deepGet","index","i","len","MatchOptions","includeMatches","findAllMatches","minMatchCharLength","BasicOptions","isCaseSensitive","includeScore","shouldSort","sortFn","a","b","score","idx","FuzzyOptions","location","threshold","distance","AdvancedOptions","useExtendedSearch","getFn","ignoreLocation","ignoreFieldNorm","Config","SPACE","norm","mantissa","cache","Map","m","Math","pow","numTokens","match","has","sqrt","n","parseFloat","round","set","clear","FuseIndex","isCreated","setIndexRecords","docs","records","_keysMap","doc","docIndex","_addString","_addObject","size","splice","item","record","v","$","keyIndex","subRecords","stack","nestedArrIndex","pop","subRecord","k","createIndex","myIndex","setKeys","map","setSources","create","parseIndex","data","computeScore","pattern","errors","currentLocation","expectedLocation","accuracy","proximity","abs","convertMaskToIndices","matchmask","indices","start","end","MAX_BITS","search","text","patternAlphabet","patternLen","textLen","min","currentThreshold","bestLocation","computeMatches","matchMask","indexOf","lastBitArr","finalScore","binMax","mask","binMin","binMid","floor","finish","bitArr","j","charMatch","charAt","isMatch","createPatternAlphabet","char","BitapSearch","options","toLowerCase","chunks","addChunk","startIndex","alphabet","remainder","substr","allIndices","totalScore","hasMatches","BaseMatch","getMatch","multiRegex","singleRegex","exp","matches","ExactMatch","InverseExactMatch","PrefixExactMatch","startsWith","InversePrefixExactMatch","SuffixExactMatch","endsWith","InverseSuffixExactMatch","FuzzyMatch","_bitapSearch","searchIn","IncludeMatch","searchers","searchersLen","SPACE_RE","OR_TOKEN","parseQuery","query","filter","results","queryItem","found","searcher","token","isMultiMatch","isSingleMatch","MultiMatchSet","Set","type","ExtendedSearch","numMatches","qLen","pLen","constructor","_","registeredSearchers","register","createSearcher","searcherClass","condition","LogicalOperator","AND","OR","KeyType","PATH","PATTERN","isExpression","isPath","isLeaf","convertToExplicit","parse","auto","next","isQueryPath","node","children","operator","computeScore$1","Number","EPSILON","transformMatches","refIndex","transformScore","format","transformers","transformer","Fuse","_keyStore","setCollection","_docs","_myIndex","add","predicate","removeAt","limit","_searchStringList","_searchObjectList","_searchLogical","sort","slice","expression","evaluate","_findMatches","getValueForItemAtKeyId","res","child","resultMap","expResults","version","config"],"sources":["/Users/caio/Projects/Samples/front-vawlog/node_modules/fuse.js/dist/fuse.esm.js"],"sourcesContent":["/**\n * Fuse.js v6.4.6 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2021 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray\n    ? getTag(value) === '[object Array]'\n    : Array.isArray(value)\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\nconst INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value\n  }\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value)\n}\n\nfunction isString(value) {\n  return typeof value === 'string'\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number'\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\nfunction isBoolean(value) {\n  return (\n    value === true ||\n    value === false ||\n    (isObjectLike(value) && getTag(value) == '[object Boolean]')\n  )\n}\n\nfunction isObject(value) {\n  return typeof value === 'object'\n}\n\n// Checks if `value` is object-like.\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null\n}\n\nfunction isBlank(value) {\n  return !value.trim().length\n}\n\n// Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\nfunction getTag(value) {\n  return value == null\n    ? value === undefined\n      ? '[object Undefined]'\n      : '[object Null]'\n    : Object.prototype.toString.call(value)\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\n\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>\n  `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = (max) =>\n  `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = (key) =>\n  `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n\n    let totalWeight = 0;\n\n    keys.forEach((key) => {\n      let obj = createKey(key);\n\n      totalWeight += obj.weight;\n\n      this._keys.push(obj);\n      this._keyMap[obj.id] = obj;\n\n      totalWeight += obj.weight;\n    });\n\n    // Normalize weights so that their sum is equal to 1\n    this._keys.forEach((key) => {\n      key.weight /= totalWeight;\n    });\n  }\n  get(keyId) {\n    return this._keyMap[keyId]\n  }\n  keys() {\n    return this._keys\n  }\n  toJSON() {\n    return JSON.stringify(this._keys)\n  }\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'))\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name))\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n  }\n\n  return { path, id, weight, src }\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.')\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!isDefined(obj)) {\n      return\n    }\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n      if (\n        index === path.length - 1 &&\n        (isString(value) || isNumber(value) || isBoolean(value))\n      ) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true;\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  };\n\n  // Backwards compatibility (since path used to be a string)\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n\n  return arr ? list : list[0]\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\n\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) =>\n    a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1\n};\n\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\n\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false\n};\n\nvar Config = {\n  ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\n\nconst SPACE = /[^ ]+/g;\n\n// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm(mantissa = 3) {\n  const cache = new Map();\n  const m = Math.pow(10, mantissa);\n\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens)\n      }\n\n      const norm = 1 / Math.sqrt(numTokens);\n\n      // In place of `toFixed(mantissa)`, for faster computation\n      const n = parseFloat(Math.round(norm * m) / m);\n\n      cache.set(numTokens, n);\n\n      return n\n    },\n    clear() {\n      cache.clear();\n    }\n  }\n}\n\nclass FuseIndex {\n  constructor({ getFn = Config.getFn } = {}) {\n    this.norm = norm(3);\n    this.getFn = getFn;\n    this.isCreated = false;\n\n    this.setIndexRecords();\n  }\n  setSources(docs = []) {\n    this.docs = docs;\n  }\n  setIndexRecords(records = []) {\n    this.records = records;\n  }\n  setKeys(keys = []) {\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return\n    }\n\n    this.isCreated = true;\n\n    // List is Array<String>\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  }\n  // Adds a doc to the end of the index\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  }\n  // Removes the doc at the specified index of the index\n  removeAt(idx) {\n    this.records.splice(idx, 1);\n\n    // Change ref index of every subsquent doc\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]]\n  }\n  size() {\n    return this.records.length\n  }\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n\n    this.records.push(record);\n  }\n  _addObject(doc, docIndex) {\n    let record = { i: docIndex, $: {} };\n\n    // Iterate over every key (i.e, path), and fetch the value at that key\n    this.keys.forEach((key, keyIndex) => {\n      // console.log(key)\n      let value = this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{ nestedArrIndex: -1, value }];\n\n        while (stack.length) {\n          const { nestedArrIndex, value } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          }\n        }\n        record.$[keyIndex] = subRecords;\n      } else if (!isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n\n        record.$[keyIndex] = subRecord;\n      }\n    });\n\n    this.records.push(record);\n  }\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    }\n  }\n}\n\nfunction createIndex(keys, docs, { getFn = Config.getFn } = {}) {\n  const myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex\n}\n\nfunction parseIndex(data, { getFn = Config.getFn } = {}) {\n  const { keys, records } = data;\n  const myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex\n}\n\nfunction computeScore(\n  pattern,\n  {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = Config.distance,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + proximity / distance\n}\n\nfunction convertMaskToIndices(\n  matchmask = [],\n  minMatchCharLength = Config.minMatchCharLength\n) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices\n}\n\n// Machine word size\nconst MAX_BITS = 32;\n\nfunction search(\n  text,\n  pattern,\n  patternAlphabet,\n  {\n    location = Config.location,\n    distance = Config.distance,\n    threshold = Config.threshold,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    includeMatches = Config.includeMatches,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))\n  }\n\n  const patternLen = pattern.length;\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length;\n  // Handle the case when location > text.length\n  const expectedLocation = Math.max(0, Math.min(location, textLen));\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = expectedLocation;\n\n  // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n  const computeMatches = minMatchCharLength > 1 || includeMatches;\n  // A mask of the matches, used for building the indices\n  const matchMask = computeMatches ? Array(textLen) : [];\n\n  let index;\n\n  // Get all exact matches, here for speed up\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n\n  const mask = 1 << (patternLen - 1);\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches\n      ? textLen\n      : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (i) {\n        bitArr[j] |=\n          ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = computeScore(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | (1 << (len - i - 1));\n  }\n\n  return mask\n}\n\nclass BitapSearch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const { isCaseSensitive, includeMatches } = this.options;\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase();\n    }\n\n    // Exact match\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result\n    }\n\n    // Otherwise, use Bitap algorithm\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n\n    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {\n      const { isMatch, score, indices } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result\n  }\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex)\n  }\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex)\n  }\n  search(/*text*/) {}\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null\n}\n\n// Token: 'file\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'exact'\n  }\n  static get multiRegex() {\n    return /^=\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^=(.*)$/\n  }\n  search(text) {\n    const isMatch = text === this.pattern;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !fire\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!(.*)$/\n  }\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: ^file\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'prefix-exact'\n  }\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !^fire\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-prefix-exact'\n  }\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: .file$\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'suffix-exact'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    }\n  }\n}\n\n// Token: !.file$\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-suffix-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^!(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    });\n  }\n  static get type() {\n    return 'fuzzy'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^(.*)$/\n  }\n  search(text) {\n    return this._bitapSearch.searchIn(text)\n  }\n}\n\n// Token: 'file\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'include'\n  }\n  static get multiRegex() {\n    return /^'\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^'(.*)$/\n  }\n  search(text) {\n    let location = 0;\n    let index;\n\n    const indices = [];\n    const patternLen = this.pattern.length;\n\n    // Get all exact matches\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices\n    }\n  }\n}\n\n// ❗Order is important. DO NOT CHANGE.\nconst searchers = [\n  ExactMatch,\n  IncludeMatch,\n  PrefixExactMatch,\n  InversePrefixExactMatch,\n  InverseSuffixExactMatch,\n  SuffixExactMatch,\n  InverseExactMatch,\n  FuzzyMatch\n];\n\nconst searchersLen = searchers.length;\n\n// Regex to split by spaces, but keep anything in quotes together\nconst SPACE_RE = / +(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|';\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map((item) => {\n    let query = item\n      .trim()\n      .split(SPACE_RE)\n      .filter((item) => item && !!item.trim());\n\n    let results = [];\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i];\n\n      // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n      let found = false;\n      let idx = -1;\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue\n      }\n\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\n      idx = -1;\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          break\n        }\n      }\n    }\n\n    return results\n  })\n}\n\n// These extended matchers can return an array of matches, as opposed\n// to a singl match\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nclass ExtendedSearch {\n  constructor(\n    pattern,\n    {\n      isCaseSensitive = Config.isCaseSensitive,\n      includeMatches = Config.includeMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      ignoreLocation = Config.ignoreLocation,\n      findAllMatches = Config.findAllMatches,\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance\n    } = {}\n  ) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      ignoreLocation,\n      location,\n      threshold,\n      distance\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      }\n    }\n\n    const { includeMatches, isCaseSensitive } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0;\n\n    // ORs\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i];\n\n      // Reset indices\n      allIndices.length = 0;\n      numMatches = 0;\n\n      // ANDs\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const { isMatch, indices, score } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break\n        }\n      }\n\n      // OR condition, so if TRUE, return\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result\n      }\n    }\n\n    // Nothing was matched\n    return {\n      isMatch: false,\n      score: 1\n    }\n  }\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options)\n    }\n  }\n\n  return new BitapSearch(pattern, options)\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\n\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = (query) =>\n  !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = (query) => !!query[KeyType.PATH];\n\nconst isLeaf = (query) =>\n  !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = (query) => ({\n  [LogicalOperator.AND]: Object.keys(query).map((key) => ({\n    [key]: query[key]\n  }))\n});\n\n// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query, options, { auto = true } = {}) {\n  const next = (query) => {\n    let keys = Object.keys(query);\n\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query))\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n\n    keys.forEach((key) => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach((item) => {\n          node.children.push(next(item));\n        });\n      }\n    });\n\n    return node\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query)\n}\n\n// Practical scoring function\nfunction computeScore$1(\n  results,\n  { ignoreFieldNorm = Config.ignoreFieldNorm }\n) {\n  results.forEach((result) => {\n    let totalScore = 1;\n\n    result.matches.forEach(({ key, norm, score }) => {\n      const weight = key ? key.weight : null;\n\n      totalScore *= Math.pow(\n        score === 0 && weight ? Number.EPSILON : score,\n        (weight || 1) * (ignoreFieldNorm ? 1 : norm)\n      );\n    });\n\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return\n  }\n\n  matches.forEach((match) => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return\n    }\n\n    const { indices, value } = match;\n\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(\n  results,\n  docs,\n  {\n    includeMatches = Config.includeMatches,\n    includeScore = Config.includeScore\n  } = {}\n) {\n  const transformers = [];\n\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n\n  return results.map((result) => {\n    const { idx } = result;\n\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach((transformer) => {\n        transformer(result, data);\n      });\n    }\n\n    return data\n  })\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config, ...options };\n\n    if (\n      this.options.useExtendedSearch &&\n      !true\n    ) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE)\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE)\n    }\n\n    this._myIndex =\n      index ||\n      createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn\n      });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return\n    }\n\n    this._docs.push(doc);\n    this._myIndex.add(doc);\n  }\n\n  remove(predicate = (/* doc, idx */) => false) {\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n        len -= 1;\n\n        results.push(doc);\n      }\n    }\n\n    return results\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex\n  }\n\n  search(query, { limit = -1 } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n\n    let results = isString(query)\n      ? isString(this._docs[0])\n        ? this._searchStringList(query)\n        : this._searchObjectList(query)\n      : this._searchLogical(query);\n\n    computeScore$1(results, { ignoreFieldNorm });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    })\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { records } = this._myIndex;\n    const results = [];\n\n    // Iterate over every string in the index\n    records.forEach(({ v: text, i: idx, n: norm }) => {\n      if (!isDefined(text)) {\n        return\n      }\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{ score, value: text, norm, indices }]\n        });\n      }\n    });\n\n    return results\n  }\n\n  _searchLogical(query) {\n\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const { keyId, searcher } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [\n            {\n              idx,\n              item,\n              matches\n            }\n          ]\n        }\n\n        return []\n      }\n\n      /*eslint indent: [2, 2, {\"SwitchCase\": 1}]*/\n      switch (node.operator) {\n        case LogicalOperator.AND: {\n          const res = [];\n          for (let i = 0, len = node.children.length; i < len; i += 1) {\n            const child = node.children[i];\n            const result = evaluate(child, item, idx);\n            if (result.length) {\n              res.push(...result);\n            } else {\n              return []\n            }\n          }\n          return res\n        }\n        case LogicalOperator.OR: {\n          const res = [];\n          for (let i = 0, len = node.children.length; i < len; i += 1) {\n            const child = node.children[i];\n            const result = evaluate(child, item, idx);\n            if (result.length) {\n              res.push(...result);\n              break\n            }\n          }\n          return res\n        }\n      }\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n\n    records.forEach(({ $: item, i: idx }) => {\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = { idx, item, matches: [] };\n            results.push(resultMap[idx]);\n          }\n          expResults.forEach(({ matches }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n\n    return results\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { keys, records } = this._myIndex;\n    const results = [];\n\n    // List is Array<Object>\n    records.forEach(({ $: item, i: idx }) => {\n      if (!isDefined(item)) {\n        return\n      }\n\n      let matches = [];\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      keys.forEach((key, keyIndex) => {\n        matches.push(\n          ...this._findMatches({\n            key,\n            value: item[keyIndex],\n            searcher\n          })\n        );\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n\n    return results\n  }\n  _findMatches({ key, value, searcher }) {\n    if (!isDefined(value)) {\n      return []\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({ v: text, i: idx, n: norm }) => {\n        if (!isDefined(text)) {\n          return\n        }\n\n        const { isMatch, score, indices } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const { v: text, n: norm } = value;\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({ score, key, value: text, norm, indices });\n      }\n    }\n\n    return matches\n  }\n}\n\nFuse.version = '6.4.6';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n\n{\n  Fuse.parseQuery = parse;\n}\n\n{\n  register(ExtendedSearch);\n}\n\nexport default Fuse;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}