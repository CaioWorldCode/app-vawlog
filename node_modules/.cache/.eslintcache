[{"/Users/caio/Projects/Samples/front-vawlog/src/index.js":"1","/Users/caio/Projects/Samples/front-vawlog/src/store.js":"2","/Users/caio/Projects/Samples/front-vawlog/src/routes.js":"3","/Users/caio/Projects/Samples/front-vawlog/src/config.js":"4","/Users/caio/Projects/Samples/front-vawlog/src/routing/helper.js":"5","/Users/caio/Projects/Samples/front-vawlog/src/routing/default-routes.js":"6","/Users/caio/Projects/Samples/front-vawlog/src/routing/components/RouteIdentifier.js":"7","/Users/caio/Projects/Samples/front-vawlog/src/lang/LangProvider.js":"8","/Users/caio/Projects/Samples/front-vawlog/src/components/loading/Loading.js":"9","/Users/caio/Projects/Samples/front-vawlog/src/@mock-api/index.js":"10","/Users/caio/Projects/Samples/front-vawlog/src/constants.js":"11","/Users/caio/Projects/Samples/front-vawlog/src/routing/components/RouteItem.js":"12","/Users/caio/Projects/Samples/front-vawlog/src/lang/messages/messages.js":"13","/Users/caio/Projects/Samples/front-vawlog/src/lang/langSlice.js":"14","/Users/caio/Projects/Samples/front-vawlog/src/settings/settingsSlice.js":"15","/Users/caio/Projects/Samples/front-vawlog/src/components/scrollspy/scrollspySlice.js":"16","/Users/caio/Projects/Samples/front-vawlog/src/auth/authSlice.js":"17","/Users/caio/Projects/Samples/front-vawlog/src/layout/layoutSlice.js":"18","/Users/caio/Projects/Samples/front-vawlog/src/App.js":"19","/Users/caio/Projects/Samples/front-vawlog/src/views/config/address_type.js":"20","/Users/caio/Projects/Samples/front-vawlog/src/views/config/contact_type.js":"21","/Users/caio/Projects/Samples/front-vawlog/src/views/config/email_type.js":"22","/Users/caio/Projects/Samples/front-vawlog/src/views/config/phone_type.js":"23","/Users/caio/Projects/Samples/front-vawlog/src/views/config/user_type.js":"24","/Users/caio/Projects/Samples/front-vawlog/src/views/config/file_type.js":"25","/Users/caio/Projects/Samples/front-vawlog/src/views/vehicles/type.js":"26","/Users/caio/Projects/Samples/front-vawlog/src/views/vehicles/status.js":"27","/Users/caio/Projects/Samples/front-vawlog/src/views/config/document_type.js":"28","/Users/caio/Projects/Samples/front-vawlog/src/views/vehicles/list.js":"29","/Users/caio/Projects/Samples/front-vawlog/src/views/drivers/list.js":"30","/Users/caio/Projects/Samples/front-vawlog/src/views/organizations/denied.js":"31","/Users/caio/Projects/Samples/front-vawlog/src/views/orders/status.js":"32","/Users/caio/Projects/Samples/front-vawlog/src/views/orders/list.js":"33","/Users/caio/Projects/Samples/front-vawlog/src/views/orders/type.js":"34","/Users/caio/Projects/Samples/front-vawlog/src/views/organizations/list.js":"35","/Users/caio/Projects/Samples/front-vawlog/src/views/users/list.js":"36","/Users/caio/Projects/Samples/front-vawlog/src/views/drivers/status.js":"37","/Users/caio/Projects/Samples/front-vawlog/src/views/config/organization_status.js":"38","/Users/caio/Projects/Samples/front-vawlog/src/views/drivers/type.js":"39","/Users/caio/Projects/Samples/front-vawlog/src/views/config/organization_type.js":"40","/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/notifications/notificationSlice.js":"41","/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/main-menu/menuSlice.js":"42","/Users/caio/Projects/Samples/front-vawlog/src/@mock-api/api.js":"43","/Users/caio/Projects/Samples/front-vawlog/src/@mock-api/data/apps.events.js":"44","/Users/caio/Projects/Samples/front-vawlog/src/@mock-api/data/apps.contacts.js":"45","/Users/caio/Projects/Samples/front-vawlog/src/@mock-api/data/apps.tasks.js":"46","/Users/caio/Projects/Samples/front-vawlog/src/@mock-api/data/apps.chat.js":"47","/Users/caio/Projects/Samples/front-vawlog/src/@mock-api/data/notifications.js":"48","/Users/caio/Projects/Samples/front-vawlog/src/@mock-api/data/apps.mailbox.js":"49","/Users/caio/Projects/Samples/front-vawlog/src/@mock-api/data/users.js":"50","/Users/caio/Projects/Samples/front-vawlog/src/@mock-api/data/products.js":"51","/Users/caio/Projects/Samples/front-vawlog/src/@mock-api/data/datatable.js":"52","/Users/caio/Projects/Samples/front-vawlog/src/views/default/NotFound.js":"53","/Users/caio/Projects/Samples/front-vawlog/src/views/default/ForgotPassword.js":"54","/Users/caio/Projects/Samples/front-vawlog/src/views/default/Register.js":"55","/Users/caio/Projects/Samples/front-vawlog/src/views/default/Unauthorized.js":"56","/Users/caio/Projects/Samples/front-vawlog/src/views/default/Home.js":"57","/Users/caio/Projects/Samples/front-vawlog/src/views/default/Login.js":"58","/Users/caio/Projects/Samples/front-vawlog/src/views/default/InvalidAccess.js":"59","/Users/caio/Projects/Samples/front-vawlog/src/views/default/ResetPassword.js":"60","/Users/caio/Projects/Samples/front-vawlog/src/lang/messages/en.js":"61","/Users/caio/Projects/Samples/front-vawlog/src/lang/messages/de.js":"62","/Users/caio/Projects/Samples/front-vawlog/src/lang/messages/es.js":"63","/Users/caio/Projects/Samples/front-vawlog/src/views/home/index.js":"64","/Users/caio/Projects/Samples/front-vawlog/src/layout/Layout.js":"65","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartSmallDoughnutChart6.js":"66","/Users/caio/Projects/Samples/front-vawlog/src/components/html-head/HtmlHead.js":"67","/Users/caio/Projects/Samples/front-vawlog/src/components/breadcrumb-list/BreadcrumbList.js":"68","/Users/caio/Projects/Samples/front-vawlog/src/services/api.js":"69","/Users/caio/Projects/Samples/front-vawlog/src/cs-line-icons/CsLineIcons.js":"70","/Users/caio/Projects/Samples/front-vawlog/src/helpers/pagination.js":"71","/Users/caio/Projects/Samples/front-vawlog/src/helpers/formatField.js":"72","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartSmallDoughnutChart5.js":"73","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartSmallDoughnutChart4.js":"74","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartSmallDoughnutChart3.js":"75","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartSmallDoughnutChart2.js":"76","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartSmallDoughnutChart1.js":"77","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartBubble.js":"78","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartSmallLine4.js":"79","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartSmallLine3.js":"80","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartSmallLine2.js":"81","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartSmallLine1.js":"82","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartCustomHorizontalTooltip.js":"83","/Users/caio/Projects/Samples/front-vawlog/src/layout/LayoutFullpage.js":"84","/Users/caio/Projects/Samples/front-vawlog/src/helpers/checkStatusLabel.js":"85","/Users/caio/Projects/Samples/front-vawlog/src/helpers/checkStatusColor.js":"86","/Users/caio/Projects/Samples/front-vawlog/src/cs-line-icons/svgs.js":"87","/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/Nav.js":"88","/Users/caio/Projects/Samples/front-vawlog/src/hooks/useLayout.js":"89","/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/sidebar-menu/SidebarMenu.js":"90","/Users/caio/Projects/Samples/front-vawlog/src/layout/right-buttons/RightButtons.js":"91","/Users/caio/Projects/Samples/front-vawlog/src/layout/footer/Footer.js":"92","/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/NavLanguageSwitcher.js":"93","/Users/caio/Projects/Samples/front-vawlog/src/hooks/useModalPaddingFix.js":"94","/Users/caio/Projects/Samples/front-vawlog/src/layout/right-buttons/NichesModal.js":"95","/Users/caio/Projects/Samples/front-vawlog/src/layout/right-buttons/SettingsModal.js":"96","/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/sidebar-menu/SidebarMenuItems.js":"97","/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/main-menu/MainMenu.js":"98","/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/NavMobileButtons.js":"99","/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/NavLogo.js":"100","/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/NavIconMenu.js":"101","/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/NavUserMenu.js":"102","/Users/caio/Projects/Samples/front-vawlog/src/hooks/useMutationObservable.js":"103","/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/main-menu/MainMenuItems.js":"104","/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/main-menu/helper.js":"105","/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/notifications/Notifications.js":"106","/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/search/SearchModal.js":"107","/Users/caio/Projects/Samples/front-vawlog/src/components/scrollspy/ScrollspyMobile.js":"108","/Users/caio/Projects/Samples/front-vawlog/src/hooks/useWindowSize.js":"109","/Users/caio/Projects/Samples/front-vawlog/src/hooks/useWindowScroll.js":"110","/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/search/SearchInput.js":"111","/Users/caio/Projects/Samples/front-vawlog/src/components/scrollspy/ScrollspyContent.js":"112","/Users/caio/Projects/Samples/front-vawlog/src/views/config/logs.js":"113","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chartLogsMonth.js":"114","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chartLogsDays.js":"115","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chartOrdersMonth.js":"116","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chartOrdersDays.js":"117","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chartNewOrganizationsMonth.js":"118","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chartNewOrganizationsDays.js":"119","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chartOrdersByStatusMonth.js":"120","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chartOrdersByStatusDays.js":"121","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chartOrdersByTypeMonth.js":"122","/Users/caio/Projects/Samples/front-vawlog/src/views/organizations/users.js":"123","/Users/caio/Projects/Samples/front-vawlog/src/views/organizations/user_list.js":"124","/Users/caio/Projects/Samples/app-vawlog/src/index.js":"125","/Users/caio/Projects/Samples/app-vawlog/src/store.js":"126","/Users/caio/Projects/Samples/app-vawlog/src/config.js":"127","/Users/caio/Projects/Samples/app-vawlog/src/routes.js":"128","/Users/caio/Projects/Samples/app-vawlog/src/lang/LangProvider.js":"129","/Users/caio/Projects/Samples/app-vawlog/src/routing/helper.js":"130","/Users/caio/Projects/Samples/app-vawlog/src/routing/default-routes.js":"131","/Users/caio/Projects/Samples/app-vawlog/src/routing/components/RouteIdentifier.js":"132","/Users/caio/Projects/Samples/app-vawlog/src/components/loading/Loading.js":"133","/Users/caio/Projects/Samples/app-vawlog/src/@mock-api/index.js":"134","/Users/caio/Projects/Samples/app-vawlog/src/constants.js":"135","/Users/caio/Projects/Samples/app-vawlog/src/routing/components/RouteItem.js":"136","/Users/caio/Projects/Samples/app-vawlog/src/lang/messages/messages.js":"137","/Users/caio/Projects/Samples/app-vawlog/src/lang/langSlice.js":"138","/Users/caio/Projects/Samples/app-vawlog/src/settings/settingsSlice.js":"139","/Users/caio/Projects/Samples/app-vawlog/src/auth/authSlice.js":"140","/Users/caio/Projects/Samples/app-vawlog/src/components/scrollspy/scrollspySlice.js":"141","/Users/caio/Projects/Samples/app-vawlog/src/layout/layoutSlice.js":"142","/Users/caio/Projects/Samples/app-vawlog/src/App.js":"143","/Users/caio/Projects/Samples/app-vawlog/src/views/config/email_type.js":"144","/Users/caio/Projects/Samples/app-vawlog/src/views/config/address_type.js":"145","/Users/caio/Projects/Samples/app-vawlog/src/views/config/logs.js":"146","/Users/caio/Projects/Samples/app-vawlog/src/views/config/phone_type.js":"147","/Users/caio/Projects/Samples/app-vawlog/src/views/config/contact_type.js":"148","/Users/caio/Projects/Samples/app-vawlog/src/views/config/document_type.js":"149","/Users/caio/Projects/Samples/app-vawlog/src/views/config/user_type.js":"150","/Users/caio/Projects/Samples/app-vawlog/src/views/vehicles/status.js":"151","/Users/caio/Projects/Samples/app-vawlog/src/views/vehicles/type.js":"152","/Users/caio/Projects/Samples/app-vawlog/src/views/drivers/list.js":"153","/Users/caio/Projects/Samples/app-vawlog/src/views/drivers/type.js":"154","/Users/caio/Projects/Samples/app-vawlog/src/views/organizations/list.js":"155","/Users/caio/Projects/Samples/app-vawlog/src/views/drivers/status.js":"156","/Users/caio/Projects/Samples/app-vawlog/src/views/organizations/denied.js":"157","/Users/caio/Projects/Samples/app-vawlog/src/views/organizations/user_list.js":"158","/Users/caio/Projects/Samples/app-vawlog/src/views/organizations/users.js":"159","/Users/caio/Projects/Samples/app-vawlog/src/views/vehicles/list.js":"160","/Users/caio/Projects/Samples/app-vawlog/src/views/orders/list.js":"161","/Users/caio/Projects/Samples/app-vawlog/src/views/users/list.js":"162","/Users/caio/Projects/Samples/app-vawlog/src/views/orders/status.js":"163","/Users/caio/Projects/Samples/app-vawlog/src/views/config/organization_status.js":"164","/Users/caio/Projects/Samples/app-vawlog/src/views/config/file_type.js":"165","/Users/caio/Projects/Samples/app-vawlog/src/views/config/organization_type.js":"166","/Users/caio/Projects/Samples/app-vawlog/src/views/orders/type.js":"167","/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/main-menu/menuSlice.js":"168","/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/notifications/notificationSlice.js":"169","/Users/caio/Projects/Samples/app-vawlog/src/@mock-api/api.js":"170","/Users/caio/Projects/Samples/app-vawlog/src/@mock-api/data/apps.chat.js":"171","/Users/caio/Projects/Samples/app-vawlog/src/@mock-api/data/notifications.js":"172","/Users/caio/Projects/Samples/app-vawlog/src/@mock-api/data/products.js":"173","/Users/caio/Projects/Samples/app-vawlog/src/@mock-api/data/apps.events.js":"174","/Users/caio/Projects/Samples/app-vawlog/src/@mock-api/data/apps.tasks.js":"175","/Users/caio/Projects/Samples/app-vawlog/src/@mock-api/data/users.js":"176","/Users/caio/Projects/Samples/app-vawlog/src/@mock-api/data/datatable.js":"177","/Users/caio/Projects/Samples/app-vawlog/src/@mock-api/data/apps.mailbox.js":"178","/Users/caio/Projects/Samples/app-vawlog/src/@mock-api/data/apps.contacts.js":"179","/Users/caio/Projects/Samples/app-vawlog/src/views/default/NotFound.js":"180","/Users/caio/Projects/Samples/app-vawlog/src/views/default/Unauthorized.js":"181","/Users/caio/Projects/Samples/app-vawlog/src/views/default/ForgotPassword.js":"182","/Users/caio/Projects/Samples/app-vawlog/src/views/default/ResetPassword.js":"183","/Users/caio/Projects/Samples/app-vawlog/src/views/default/Register.js":"184","/Users/caio/Projects/Samples/app-vawlog/src/views/default/InvalidAccess.js":"185","/Users/caio/Projects/Samples/app-vawlog/src/views/default/Home.js":"186","/Users/caio/Projects/Samples/app-vawlog/src/views/default/Login.js":"187","/Users/caio/Projects/Samples/app-vawlog/src/lang/messages/es.js":"188","/Users/caio/Projects/Samples/app-vawlog/src/lang/messages/en.js":"189","/Users/caio/Projects/Samples/app-vawlog/src/lang/messages/de.js":"190","/Users/caio/Projects/Samples/app-vawlog/src/views/home/index.js":"191","/Users/caio/Projects/Samples/app-vawlog/src/layout/Layout.js":"192","/Users/caio/Projects/Samples/app-vawlog/src/views/home/chartOrdersByTypeMonth.js":"193","/Users/caio/Projects/Samples/app-vawlog/src/components/html-head/HtmlHead.js":"194","/Users/caio/Projects/Samples/app-vawlog/src/components/breadcrumb-list/BreadcrumbList.js":"195","/Users/caio/Projects/Samples/app-vawlog/src/services/api.js":"196","/Users/caio/Projects/Samples/app-vawlog/src/cs-line-icons/CsLineIcons.js":"197","/Users/caio/Projects/Samples/app-vawlog/src/helpers/pagination.js":"198","/Users/caio/Projects/Samples/app-vawlog/src/helpers/formatField.js":"199","/Users/caio/Projects/Samples/app-vawlog/src/views/home/chartOrdersByStatusDays.js":"200","/Users/caio/Projects/Samples/app-vawlog/src/views/home/chartOrdersByStatusMonth.js":"201","/Users/caio/Projects/Samples/app-vawlog/src/views/home/chartNewOrganizationsDays.js":"202","/Users/caio/Projects/Samples/app-vawlog/src/views/home/chartNewOrganizationsMonth.js":"203","/Users/caio/Projects/Samples/app-vawlog/src/views/home/chartOrdersDays.js":"204","/Users/caio/Projects/Samples/app-vawlog/src/views/home/chartOrdersMonth.js":"205","/Users/caio/Projects/Samples/app-vawlog/src/views/home/chartLogsDays.js":"206","/Users/caio/Projects/Samples/app-vawlog/src/views/home/chartLogsMonth.js":"207","/Users/caio/Projects/Samples/app-vawlog/src/layout/LayoutFullpage.js":"208","/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartSmallDoughnutChart6.js":"209","/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartBubble.js":"210","/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartSmallDoughnutChart1.js":"211","/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartSmallDoughnutChart2.js":"212","/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartSmallLine3.js":"213","/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartSmallLine4.js":"214","/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartSmallLine2.js":"215","/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartSmallDoughnutChart4.js":"216","/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartSmallDoughnutChart5.js":"217","/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartSmallDoughnutChart3.js":"218","/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartSmallLine1.js":"219","/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartCustomHorizontalTooltip.js":"220","/Users/caio/Projects/Samples/app-vawlog/src/helpers/checkStatusLabel.js":"221","/Users/caio/Projects/Samples/app-vawlog/src/helpers/checkStatusColor.js":"222","/Users/caio/Projects/Samples/app-vawlog/src/cs-line-icons/svgs.js":"223","/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/Nav.js":"224","/Users/caio/Projects/Samples/app-vawlog/src/hooks/useLayout.js":"225","/Users/caio/Projects/Samples/app-vawlog/src/layout/footer/Footer.js":"226","/Users/caio/Projects/Samples/app-vawlog/src/layout/right-buttons/RightButtons.js":"227","/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/sidebar-menu/SidebarMenu.js":"228","/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/NavLanguageSwitcher.js":"229","/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/NavMobileButtons.js":"230","/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/NavLogo.js":"231","/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/NavIconMenu.js":"232","/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/main-menu/MainMenu.js":"233","/Users/caio/Projects/Samples/app-vawlog/src/hooks/useModalPaddingFix.js":"234","/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/NavUserMenu.js":"235","/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/sidebar-menu/SidebarMenuItems.js":"236","/Users/caio/Projects/Samples/app-vawlog/src/layout/right-buttons/NichesModal.js":"237","/Users/caio/Projects/Samples/app-vawlog/src/layout/right-buttons/SettingsModal.js":"238","/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/main-menu/helper.js":"239","/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/main-menu/MainMenuItems.js":"240","/Users/caio/Projects/Samples/app-vawlog/src/hooks/useMutationObservable.js":"241","/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/search/SearchModal.js":"242","/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/notifications/Notifications.js":"243","/Users/caio/Projects/Samples/app-vawlog/src/components/scrollspy/ScrollspyMobile.js":"244","/Users/caio/Projects/Samples/app-vawlog/src/hooks/useWindowScroll.js":"245","/Users/caio/Projects/Samples/app-vawlog/src/hooks/useWindowSize.js":"246","/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/search/SearchInput.js":"247","/Users/caio/Projects/Samples/app-vawlog/src/components/scrollspy/ScrollspyContent.js":"248","/Users/caio/Projects/Samples/app-vawlog/src/views/policies/cookies.js":"249","/Users/caio/Projects/Samples/app-vawlog/src/views/policies/privacy.js":"250","/Users/caio/Projects/Samples/app-vawlog/src/views/policies/data.js":"251","/Users/caio/Projects/Samples/app-vawlog/src/views/policies/regulation.js":"252","/Users/caio/Projects/Samples/app-vawlog/src/views/contact/index.js":"253","/Users/caio/Projects/Samples/app-vawlog/src/views/faq/index.js":"254","/Users/caio/Projects/Samples/app-vawlog/src/views/users/index.js":"255","/Users/caio/Projects/Samples/app-vawlog/src/views/users/components/ControlsEdit.js":"256","/Users/caio/Projects/Samples/app-vawlog/src/views/users/components/ControlsAdd.js":"257","/Users/caio/Projects/Samples/app-vawlog/src/views/users/components/ControlsDelete.js":"258","/Users/caio/Projects/Samples/app-vawlog/src/views/users/components/ControlsPageSize.js":"259","/Users/caio/Projects/Samples/app-vawlog/src/views/users/components/TablePagination.js":"260","/Users/caio/Projects/Samples/app-vawlog/src/views/users/components/ControlsSearch.js":"261","/Users/caio/Projects/Samples/app-vawlog/src/views/users/components/Table.js":"262"},{"size":1613,"mtime":1680696434176,"results":"263","hashOfConfig":"264"},{"size":1572,"mtime":1680696434182,"results":"265","hashOfConfig":"264"},{"size":5433,"mtime":1681932700255,"results":"266","hashOfConfig":"264"},{"size":1382,"mtime":1681930143028,"results":"267","hashOfConfig":"264"},{"size":8896,"mtime":1680696434178,"results":"268","hashOfConfig":"264"},{"size":1505,"mtime":1680696434178,"results":"269","hashOfConfig":"264"},{"size":557,"mtime":1680696434178,"results":"270","hashOfConfig":"264"},{"size":437,"mtime":1680696434176,"results":"271","hashOfConfig":"264"},{"size":695,"mtime":1680696434174,"results":"272","hashOfConfig":"264"},{"size":305,"mtime":1680696434172,"results":"273","hashOfConfig":"264"},{"size":3392,"mtime":1680696434175,"results":"274","hashOfConfig":"264"},{"size":594,"mtime":1680696434178,"results":"275","hashOfConfig":"264"},{"size":185,"mtime":1680696434176,"results":"276","hashOfConfig":"264"},{"size":864,"mtime":1680696434176,"results":"277","hashOfConfig":"264"},{"size":3841,"mtime":1680696434182,"results":"278","hashOfConfig":"264"},{"size":412,"mtime":1680696434174,"results":"279","hashOfConfig":"264"},{"size":757,"mtime":1680696434173,"results":"280","hashOfConfig":"264"},{"size":406,"mtime":1680696434177,"results":"281","hashOfConfig":"264"},{"size":851,"mtime":1680696434172,"results":"282","hashOfConfig":"264"},{"size":31819,"mtime":1680696434182,"results":"283","hashOfConfig":"264"},{"size":31813,"mtime":1680696434182,"results":"284","hashOfConfig":"264"},{"size":31795,"mtime":1680696434182,"results":"285","hashOfConfig":"264"},{"size":31804,"mtime":1680696434183,"results":"286","hashOfConfig":"264"},{"size":31798,"mtime":1680696434183,"results":"287","hashOfConfig":"264"},{"size":31795,"mtime":1680696434182,"results":"288","hashOfConfig":"264"},{"size":31809,"mtime":1680696434188,"results":"289","hashOfConfig":"264"},{"size":31826,"mtime":1680696434188,"results":"290","hashOfConfig":"264"},{"size":31825,"mtime":1680696434182,"results":"291","hashOfConfig":"264"},{"size":57893,"mtime":1681743637337,"results":"292","hashOfConfig":"264"},{"size":42100,"mtime":1681743637345,"results":"293","hashOfConfig":"264"},{"size":2327,"mtime":1680696434186,"results":"294","hashOfConfig":"264"},{"size":31850,"mtime":1680696434186,"results":"295","hashOfConfig":"264"},{"size":76578,"mtime":1681931703644,"results":"296","hashOfConfig":"264"},{"size":31833,"mtime":1680696434186,"results":"297","hashOfConfig":"264"},{"size":57440,"mtime":1681743637344,"results":"298","hashOfConfig":"264"},{"size":37368,"mtime":1680696434187,"results":"299","hashOfConfig":"264"},{"size":31831,"mtime":1680696434184,"results":"300","hashOfConfig":"264"},{"size":31867,"mtime":1680696434183,"results":"301","hashOfConfig":"264"},{"size":31879,"mtime":1680696434184,"results":"302","hashOfConfig":"264"},{"size":31843,"mtime":1680696434183,"results":"303","hashOfConfig":"264"},{"size":863,"mtime":1680696434177,"results":"304","hashOfConfig":"264"},{"size":2780,"mtime":1680696434177,"results":"305","hashOfConfig":"264"},{"size":259,"mtime":1680696434172,"results":"306","hashOfConfig":"264"},{"size":3523,"mtime":1680696434172,"results":"307","hashOfConfig":"264"},{"size":7390,"mtime":1680696434172,"results":"308","hashOfConfig":"264"},{"size":6140,"mtime":1680696434172,"results":"309","hashOfConfig":"264"},{"size":10970,"mtime":1680696434172,"results":"310","hashOfConfig":"264"},{"size":788,"mtime":1680696434172,"results":"311","hashOfConfig":"264"},{"size":34818,"mtime":1680696434172,"results":"312","hashOfConfig":"264"},{"size":3422,"mtime":1680696434172,"results":"313","hashOfConfig":"264"},{"size":15375,"mtime":1680696434172,"results":"314","hashOfConfig":"264"},{"size":9667,"mtime":1680696434172,"results":"315","hashOfConfig":"264"},{"size":1551,"mtime":1680696434183,"results":"316","hashOfConfig":"264"},{"size":3253,"mtime":1680696434183,"results":"317","hashOfConfig":"264"},{"size":4826,"mtime":1680696434183,"results":"318","hashOfConfig":"264"},{"size":1556,"mtime":1680696434183,"results":"319","hashOfConfig":"264"},{"size":93,"mtime":1680696434183,"results":"320","hashOfConfig":"264"},{"size":4732,"mtime":1680696434183,"results":"321","hashOfConfig":"264"},{"size":1564,"mtime":1680696434183,"results":"322","hashOfConfig":"264"},{"size":3829,"mtime":1680696434183,"results":"323","hashOfConfig":"264"},{"size":5475,"mtime":1680696434176,"results":"324","hashOfConfig":"264"},{"size":5991,"mtime":1680696434176,"results":"325","hashOfConfig":"264"},{"size":5991,"mtime":1680696434176,"results":"326","hashOfConfig":"264"},{"size":10901,"mtime":1681935394953,"results":"327","hashOfConfig":"264"},{"size":887,"mtime":1680696434176,"results":"328","hashOfConfig":"264"},{"size":4222,"mtime":1680696434185,"results":"329","hashOfConfig":"264"},{"size":354,"mtime":1680696434174,"results":"330","hashOfConfig":"264"},{"size":638,"mtime":1680696434173,"results":"331","hashOfConfig":"264"},{"size":688,"mtime":1680696434182,"results":"332","hashOfConfig":"264"},{"size":996,"mtime":1680696434175,"results":"333","hashOfConfig":"264"},{"size":2074,"mtime":1680696434176,"results":"334","hashOfConfig":"264"},{"size":4126,"mtime":1681754389286,"results":"335","hashOfConfig":"264"},{"size":4679,"mtime":1680696434185,"results":"336","hashOfConfig":"264"},{"size":4199,"mtime":1680696434185,"results":"337","hashOfConfig":"264"},{"size":4225,"mtime":1680696434185,"results":"338","hashOfConfig":"264"},{"size":4673,"mtime":1680696434185,"results":"339","hashOfConfig":"264"},{"size":4216,"mtime":1680696434185,"results":"340","hashOfConfig":"264"},{"size":3615,"mtime":1680696434184,"results":"341","hashOfConfig":"264"},{"size":5165,"mtime":1680696434186,"results":"342","hashOfConfig":"264"},{"size":5161,"mtime":1680696434186,"results":"343","hashOfConfig":"264"},{"size":5171,"mtime":1680696434185,"results":"344","hashOfConfig":"264"},{"size":5179,"mtime":1680696434185,"results":"345","hashOfConfig":"264"},{"size":4995,"mtime":1680696434184,"results":"346","hashOfConfig":"264"},{"size":1004,"mtime":1680696434177,"results":"347","hashOfConfig":"264"},{"size":311,"mtime":1680696434175,"results":"348","hashOfConfig":"264"},{"size":314,"mtime":1680696434175,"results":"349","hashOfConfig":"264"},{"size":200096,"mtime":1680696434175,"results":"350","hashOfConfig":"264"},{"size":2742,"mtime":1680696434177,"results":"351","hashOfConfig":"264"},{"size":2550,"mtime":1680696434176,"results":"352","hashOfConfig":"264"},{"size":928,"mtime":1680696434178,"results":"353","hashOfConfig":"264"},{"size":2369,"mtime":1680696434178,"results":"354","hashOfConfig":"264"},{"size":1217,"mtime":1680696434177,"results":"355","hashOfConfig":"264"},{"size":2456,"mtime":1680696434177,"results":"356","hashOfConfig":"264"},{"size":979,"mtime":1680696434176,"results":"357","hashOfConfig":"264"},{"size":2903,"mtime":1680696434178,"results":"358","hashOfConfig":"264"},{"size":13306,"mtime":1680696434178,"results":"359","hashOfConfig":"264"},{"size":1749,"mtime":1680696434178,"results":"360","hashOfConfig":"264"},{"size":5816,"mtime":1680696434177,"results":"361","hashOfConfig":"264"},{"size":2673,"mtime":1680696434177,"results":"362","hashOfConfig":"264"},{"size":531,"mtime":1680696434177,"results":"363","hashOfConfig":"264"},{"size":2608,"mtime":1680696434177,"results":"364","hashOfConfig":"264"},{"size":4541,"mtime":1680696434177,"results":"365","hashOfConfig":"264"},{"size":691,"mtime":1680696434176,"results":"366","hashOfConfig":"264"},{"size":6946,"mtime":1680696434177,"results":"367","hashOfConfig":"264"},{"size":5315,"mtime":1680696434177,"results":"368","hashOfConfig":"264"},{"size":4441,"mtime":1680696434177,"results":"369","hashOfConfig":"264"},{"size":1216,"mtime":1680696434177,"results":"370","hashOfConfig":"264"},{"size":1209,"mtime":1680696434174,"results":"371","hashOfConfig":"264"},{"size":658,"mtime":1680696434176,"results":"372","hashOfConfig":"264"},{"size":1460,"mtime":1680696434176,"results":"373","hashOfConfig":"264"},{"size":5773,"mtime":1680696434177,"results":"374","hashOfConfig":"264"},{"size":840,"mtime":1680696434174,"results":"375","hashOfConfig":"264"},{"size":16588,"mtime":1681754391305,"results":"376","hashOfConfig":"264"},{"size":1338,"mtime":1681822113358,"results":"377","hashOfConfig":"264"},{"size":1039,"mtime":1681822330762,"results":"378","hashOfConfig":"264"},{"size":1344,"mtime":1681822211148,"results":"379","hashOfConfig":"264"},{"size":1358,"mtime":1681822318172,"results":"380","hashOfConfig":"264"},{"size":1348,"mtime":1681822428809,"results":"381","hashOfConfig":"264"},{"size":1354,"mtime":1681822504391,"results":"382","hashOfConfig":"264"},{"size":3870,"mtime":1681825437025,"results":"383","hashOfConfig":"264"},{"size":3881,"mtime":1681825450317,"results":"384","hashOfConfig":"264"},{"size":4220,"mtime":1681825417489,"results":"385","hashOfConfig":"264"},{"size":57248,"mtime":1681932801788,"results":"386","hashOfConfig":"264"},{"size":38104,"mtime":1681934876631,"results":"387","hashOfConfig":"264"},{"size":1613,"mtime":1680696434176,"results":"388","hashOfConfig":"389"},{"size":1572,"mtime":1680696434182,"results":"390","hashOfConfig":"389"},{"size":1392,"mtime":1682516216091,"results":"391","hashOfConfig":"389"},{"size":2519,"mtime":1682516175115,"results":"392","hashOfConfig":"389"},{"size":437,"mtime":1680696434176,"results":"393","hashOfConfig":"389"},{"size":8896,"mtime":1680696434178,"results":"394","hashOfConfig":"389"},{"size":1505,"mtime":1680696434178,"results":"395","hashOfConfig":"389"},{"size":557,"mtime":1680696434178,"results":"396","hashOfConfig":"389"},{"size":695,"mtime":1680696434174,"results":"397","hashOfConfig":"389"},{"size":305,"mtime":1680696434172,"results":"398","hashOfConfig":"389"},{"size":3392,"mtime":1680696434175,"results":"399","hashOfConfig":"389"},{"size":594,"mtime":1680696434178,"results":"400","hashOfConfig":"389"},{"size":185,"mtime":1680696434176,"results":"401","hashOfConfig":"389"},{"size":864,"mtime":1680696434176,"results":"402","hashOfConfig":"389"},{"size":3841,"mtime":1680696434182,"results":"403","hashOfConfig":"389"},{"size":757,"mtime":1680696434173,"results":"404","hashOfConfig":"389"},{"size":412,"mtime":1680696434174,"results":"405","hashOfConfig":"389"},{"size":406,"mtime":1680696434177,"results":"406","hashOfConfig":"389"},{"size":851,"mtime":1680696434172,"results":"407","hashOfConfig":"389"},{"size":31795,"mtime":1680696434182,"results":"408","hashOfConfig":"409"},{"size":31819,"mtime":1680696434182,"results":"410","hashOfConfig":"409"},{"size":16588,"mtime":1681754391305,"results":"411","hashOfConfig":"409"},{"size":31804,"mtime":1680696434183,"results":"412","hashOfConfig":"409"},{"size":31813,"mtime":1680696434182,"results":"413","hashOfConfig":"409"},{"size":31825,"mtime":1680696434182,"results":"414","hashOfConfig":"409"},{"size":31798,"mtime":1680696434183,"results":"415","hashOfConfig":"409"},{"size":31826,"mtime":1680696434188,"results":"416","hashOfConfig":"409"},{"size":31809,"mtime":1680696434188,"results":"417","hashOfConfig":"409"},{"size":42100,"mtime":1681743637345,"results":"418","hashOfConfig":"409"},{"size":31879,"mtime":1680696434184,"results":"419","hashOfConfig":"409"},{"size":57440,"mtime":1681743637344,"results":"420","hashOfConfig":"409"},{"size":31831,"mtime":1680696434184,"results":"421","hashOfConfig":"409"},{"size":2327,"mtime":1680696434186,"results":"422","hashOfConfig":"409"},{"size":38104,"mtime":1681934876631,"results":"423","hashOfConfig":"409"},{"size":57248,"mtime":1681932801788,"results":"424","hashOfConfig":"409"},{"size":57893,"mtime":1681743637337,"results":"425","hashOfConfig":"409"},{"size":76578,"mtime":1681931703644,"results":"426","hashOfConfig":"389"},{"size":41639,"mtime":1682516127868,"results":"427","hashOfConfig":"389"},{"size":31850,"mtime":1680696434186,"results":"428","hashOfConfig":"409"},{"size":31867,"mtime":1680696434183,"results":"429","hashOfConfig":"409"},{"size":31795,"mtime":1680696434182,"results":"430","hashOfConfig":"409"},{"size":31843,"mtime":1680696434183,"results":"431","hashOfConfig":"409"},{"size":31833,"mtime":1680696434186,"results":"432","hashOfConfig":"409"},{"size":2780,"mtime":1680696434177,"results":"433","hashOfConfig":"389"},{"size":863,"mtime":1680696434177,"results":"434","hashOfConfig":"389"},{"size":259,"mtime":1680696434172,"results":"435","hashOfConfig":"389"},{"size":10970,"mtime":1680696434172,"results":"436","hashOfConfig":"389"},{"size":788,"mtime":1680696434172,"results":"437","hashOfConfig":"389"},{"size":15375,"mtime":1680696434172,"results":"438","hashOfConfig":"389"},{"size":3523,"mtime":1680696434172,"results":"439","hashOfConfig":"389"},{"size":6140,"mtime":1680696434172,"results":"440","hashOfConfig":"389"},{"size":3422,"mtime":1680696434172,"results":"441","hashOfConfig":"389"},{"size":9667,"mtime":1680696434172,"results":"442","hashOfConfig":"389"},{"size":34818,"mtime":1680696434172,"results":"443","hashOfConfig":"389"},{"size":7390,"mtime":1680696434172,"results":"444","hashOfConfig":"389"},{"size":1551,"mtime":1680696434183,"results":"445","hashOfConfig":"389"},{"size":1556,"mtime":1680696434183,"results":"446","hashOfConfig":"389"},{"size":3253,"mtime":1680696434183,"results":"447","hashOfConfig":"389"},{"size":3829,"mtime":1680696434183,"results":"448","hashOfConfig":"389"},{"size":4826,"mtime":1680696434183,"results":"449","hashOfConfig":"389"},{"size":1564,"mtime":1680696434183,"results":"450","hashOfConfig":"389"},{"size":93,"mtime":1680696434183,"results":"451","hashOfConfig":"389"},{"size":4732,"mtime":1681936326521,"results":"452","hashOfConfig":"389"},{"size":5991,"mtime":1680696434176,"results":"453","hashOfConfig":"389"},{"size":5475,"mtime":1680696434176,"results":"454","hashOfConfig":"389"},{"size":5991,"mtime":1680696434176,"results":"455","hashOfConfig":"389"},{"size":14268,"mtime":1682514521182,"results":"456","hashOfConfig":"389"},{"size":887,"mtime":1680696434176,"results":"457","hashOfConfig":"389"},{"size":4220,"mtime":1681825417489,"results":"458","hashOfConfig":"389"},{"size":354,"mtime":1680696434174,"results":"459","hashOfConfig":"389"},{"size":638,"mtime":1680696434173,"results":"460","hashOfConfig":"389"},{"size":689,"mtime":1681936892551,"results":"461","hashOfConfig":"389"},{"size":996,"mtime":1680696434175,"results":"462","hashOfConfig":"389"},{"size":2074,"mtime":1680696434176,"results":"463","hashOfConfig":"389"},{"size":4126,"mtime":1681754389286,"results":"464","hashOfConfig":"389"},{"size":3881,"mtime":1681825450317,"results":"465","hashOfConfig":"389"},{"size":3870,"mtime":1681825437025,"results":"466","hashOfConfig":"389"},{"size":1354,"mtime":1681822504391,"results":"467","hashOfConfig":"389"},{"size":1348,"mtime":1681822428809,"results":"468","hashOfConfig":"389"},{"size":1358,"mtime":1681822318172,"results":"469","hashOfConfig":"389"},{"size":1344,"mtime":1681822211148,"results":"470","hashOfConfig":"389"},{"size":1039,"mtime":1681822330762,"results":"471","hashOfConfig":"389"},{"size":1338,"mtime":1681822113358,"results":"472","hashOfConfig":"389"},{"size":1004,"mtime":1680696434177,"results":"473","hashOfConfig":"389"},{"size":4222,"mtime":1680696434185,"results":"474","hashOfConfig":"409"},{"size":3615,"mtime":1680696434184,"results":"475","hashOfConfig":"409"},{"size":4216,"mtime":1680696434185,"results":"476","hashOfConfig":"409"},{"size":4673,"mtime":1680696434185,"results":"477","hashOfConfig":"409"},{"size":5161,"mtime":1680696434186,"results":"478","hashOfConfig":"409"},{"size":5165,"mtime":1680696434186,"results":"479","hashOfConfig":"409"},{"size":5171,"mtime":1680696434185,"results":"480","hashOfConfig":"409"},{"size":4199,"mtime":1680696434185,"results":"481","hashOfConfig":"409"},{"size":4679,"mtime":1680696434185,"results":"482","hashOfConfig":"409"},{"size":4225,"mtime":1680696434185,"results":"483","hashOfConfig":"409"},{"size":5179,"mtime":1680696434185,"results":"484","hashOfConfig":"409"},{"size":4995,"mtime":1680696434184,"results":"485","hashOfConfig":"409"},{"size":311,"mtime":1680696434175,"results":"486","hashOfConfig":"389"},{"size":314,"mtime":1680696434175,"results":"487","hashOfConfig":"389"},{"size":200096,"mtime":1680696434175,"results":"488","hashOfConfig":"389"},{"size":2742,"mtime":1680696434177,"results":"489","hashOfConfig":"389"},{"size":2550,"mtime":1680696434176,"results":"490","hashOfConfig":"389"},{"size":1217,"mtime":1680696434177,"results":"491","hashOfConfig":"389"},{"size":2369,"mtime":1680696434178,"results":"492","hashOfConfig":"389"},{"size":928,"mtime":1680696434178,"results":"493","hashOfConfig":"389"},{"size":2456,"mtime":1680696434177,"results":"494","hashOfConfig":"389"},{"size":2673,"mtime":1680696434177,"results":"495","hashOfConfig":"389"},{"size":531,"mtime":1680696434177,"results":"496","hashOfConfig":"389"},{"size":2608,"mtime":1680696434177,"results":"497","hashOfConfig":"389"},{"size":5816,"mtime":1680696434177,"results":"498","hashOfConfig":"389"},{"size":979,"mtime":1680696434176,"results":"499","hashOfConfig":"389"},{"size":4541,"mtime":1680696434177,"results":"500","hashOfConfig":"389"},{"size":1749,"mtime":1680696434178,"results":"501","hashOfConfig":"389"},{"size":2903,"mtime":1680696434178,"results":"502","hashOfConfig":"389"},{"size":13306,"mtime":1680696434178,"results":"503","hashOfConfig":"389"},{"size":5315,"mtime":1680696434177,"results":"504","hashOfConfig":"389"},{"size":6946,"mtime":1680696434177,"results":"505","hashOfConfig":"389"},{"size":691,"mtime":1680696434176,"results":"506","hashOfConfig":"389"},{"size":1216,"mtime":1680696434177,"results":"507","hashOfConfig":"389"},{"size":4441,"mtime":1680696434177,"results":"508","hashOfConfig":"389"},{"size":1209,"mtime":1680696434174,"results":"509","hashOfConfig":"389"},{"size":1460,"mtime":1680696434176,"results":"510","hashOfConfig":"389"},{"size":658,"mtime":1680696434176,"results":"511","hashOfConfig":"389"},{"size":5773,"mtime":1680696434177,"results":"512","hashOfConfig":"389"},{"size":840,"mtime":1680696434174,"results":"513","hashOfConfig":"389"},{"size":4370,"mtime":1682454617084,"results":"514","hashOfConfig":"389"},{"size":4342,"mtime":1682454464484,"results":"515","hashOfConfig":"389"},{"size":4908,"mtime":1682454448675,"results":"516","hashOfConfig":"389"},{"size":4798,"mtime":1682454823281,"results":"517","hashOfConfig":"389"},{"size":4357,"mtime":1682514355170,"results":"518","hashOfConfig":"389"},{"size":5124,"mtime":1682514709238,"results":"519","hashOfConfig":"389"},{"size":7438,"mtime":1680696434187,"results":"520","hashOfConfig":"389"},{"size":852,"mtime":1680696434187,"results":"521","hashOfConfig":"389"},{"size":720,"mtime":1680696434187,"results":"522","hashOfConfig":"389"},{"size":978,"mtime":1680696434187,"results":"523","hashOfConfig":"389"},{"size":1440,"mtime":1680696434187,"results":"524","hashOfConfig":"389"},{"size":1424,"mtime":1680696434187,"results":"525","hashOfConfig":"389"},{"size":1103,"mtime":1680696434187,"results":"526","hashOfConfig":"389"},{"size":2197,"mtime":1680696434187,"results":"527","hashOfConfig":"389"},{"filePath":"528","messages":"529","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},"nnxr7o",{"filePath":"531","messages":"532","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"533","messages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"535","messages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"537","messages":"538","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"539","messages":"540","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"541","messages":"542","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"543","messages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"545","messages":"546","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"547","messages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"549","messages":"550","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"551","messages":"552","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"553","messages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"557","messages":"558","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"559","messages":"560","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"561","messages":"562","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"563","messages":"564","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"565","messages":"566","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"567","messages":"568","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"569","usedDeprecatedRules":"530"},{"filePath":"570","messages":"571","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"572","usedDeprecatedRules":"530"},{"filePath":"573","messages":"574","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"575","usedDeprecatedRules":"530"},{"filePath":"576","messages":"577","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"578","usedDeprecatedRules":"530"},{"filePath":"579","messages":"580","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"581","usedDeprecatedRules":"530"},{"filePath":"582","messages":"583","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"584","usedDeprecatedRules":"530"},{"filePath":"585","messages":"586","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"587","usedDeprecatedRules":"530"},{"filePath":"588","messages":"589","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"590","usedDeprecatedRules":"530"},{"filePath":"591","messages":"592","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"593","usedDeprecatedRules":"530"},{"filePath":"594","messages":"595","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"596","usedDeprecatedRules":"530"},{"filePath":"597","messages":"598","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"599","usedDeprecatedRules":"530"},{"filePath":"600","messages":"601","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"602","usedDeprecatedRules":"530"},{"filePath":"603","messages":"604","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"605","usedDeprecatedRules":"530"},{"filePath":"606","messages":"607","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"608","usedDeprecatedRules":"530"},{"filePath":"609","messages":"610","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"611","usedDeprecatedRules":"530"},{"filePath":"612","messages":"613","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":1,"source":"614","usedDeprecatedRules":"530"},{"filePath":"615","messages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"617","usedDeprecatedRules":"530"},{"filePath":"618","messages":"619","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"620","usedDeprecatedRules":"530"},{"filePath":"621","messages":"622","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"623","usedDeprecatedRules":"530"},{"filePath":"624","messages":"625","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"626","usedDeprecatedRules":"530"},{"filePath":"627","messages":"628","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"629","usedDeprecatedRules":"530"},{"filePath":"630","messages":"631","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"632","messages":"633","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"634","messages":"635","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"636","messages":"637","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"638","messages":"639","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"640","messages":"641","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"642","messages":"643","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"644","messages":"645","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"646","messages":"647","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"648","messages":"649","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"650","messages":"651","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"652","messages":"653","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"654","messages":"655","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"656","messages":"657","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"658","messages":"659","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"660","messages":"661","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"662","messages":"663","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"664","messages":"665","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"666","messages":"667","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"668","messages":"669","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"670","messages":"671","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"672","messages":"673","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"674","messages":"675","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"676","messages":"677","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"678","messages":"679","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"680","usedDeprecatedRules":"530"},{"filePath":"681","messages":"682","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"683","messages":"684","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"685","messages":"686","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"687","messages":"688","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"689","messages":"690","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"691","messages":"692","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"693","messages":"694","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"695","usedDeprecatedRules":"530"},{"filePath":"696","messages":"697","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"698","messages":"699","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"700","messages":"701","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"702","messages":"703","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"704","messages":"705","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"706","messages":"707","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"708","messages":"709","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"710","messages":"711","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"712","messages":"713","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"714","messages":"715","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"716","messages":"717","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"718","messages":"719","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"720","messages":"721","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"722","messages":"723","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"724","messages":"725","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"726","messages":"727","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"728","usedDeprecatedRules":"530"},{"filePath":"729","messages":"730","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"731","messages":"732","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"733","messages":"734","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"735","messages":"736","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"737","messages":"738","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"739","messages":"740","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"741","messages":"742","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"743","messages":"744","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"745","messages":"746","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"747","messages":"748","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"749","messages":"750","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"751","messages":"752","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"753","messages":"754","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"755","usedDeprecatedRules":"530"},{"filePath":"756","messages":"757","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"758","messages":"759","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"760","messages":"761","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"762","messages":"763","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"764","messages":"765","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"766","messages":"767","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"768","messages":"769","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"770","messages":"771","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"772","messages":"773","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"774","messages":"775","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"776","messages":"777","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"778","messages":"779","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"780","usedDeprecatedRules":"530"},{"filePath":"781","messages":"782","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"783","messages":"784","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"785","messages":"786","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"787","messages":"788","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"789","messages":"790","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"791","messages":"792","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"530"},{"filePath":"793","messages":"794","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"795","usedDeprecatedRules":"530"},{"filePath":"796","messages":"797","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"798","usedDeprecatedRules":"530"},{"filePath":"799","messages":"800","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"801","usedDeprecatedRules":"530"},{"filePath":"802","messages":"803","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":1,"source":"804","usedDeprecatedRules":"530"},{"filePath":"805","messages":"806","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"807","usedDeprecatedRules":"530"},{"filePath":"808","messages":"809","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},"qysij4",{"filePath":"811","messages":"812","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"813","messages":"814","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"815","messages":"816","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"817","messages":"818","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"819","messages":"820","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"821","messages":"822","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"823","messages":"824","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"825","messages":"826","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"827","messages":"828","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"829","messages":"830","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"831","messages":"832","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"833","messages":"834","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"835","messages":"836","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"837","messages":"838","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"839","messages":"840","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"841","messages":"842","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"843","messages":"844","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"845","messages":"846","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"847","messages":"848","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1hwura4",{"filePath":"849","messages":"850","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"851","messages":"852","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"853","messages":"854","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"855","messages":"856","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"857","messages":"858","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"859","messages":"860","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"861","messages":"862","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"863","messages":"864","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"865","messages":"866","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"867","messages":"868","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"869","messages":"870","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"871","messages":"872","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"873","messages":"874","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"875","messages":"876","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"877","messages":"878","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"879","messages":"880","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"881","messages":"882","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"883","messages":"884","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"885","messages":"886","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"887","messages":"888","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"889","messages":"890","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"891","messages":"892","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"893","messages":"894","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"895","messages":"896","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"897","messages":"898","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"899","messages":"900","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"901","messages":"902","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"903","messages":"904","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"905","messages":"906","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"907","messages":"908","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"909","messages":"910","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"911","messages":"912","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"913","messages":"914","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"915","messages":"916","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"917","messages":"918","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"919","messages":"920","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"921","messages":"922","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"923","messages":"924","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"925","messages":"926","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"927","messages":"928","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"929","messages":"930","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"931","messages":"932","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"933","messages":"934","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"935","messages":"936","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"937","messages":"938","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"939","messages":"940","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"941","messages":"942","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"943","messages":"944","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"680","usedDeprecatedRules":"810"},{"filePath":"945","messages":"946","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"801","usedDeprecatedRules":"810"},{"filePath":"947","messages":"948","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"949","messages":"950","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"951","messages":"952","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"953","messages":"954","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"955","messages":"956","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"957","messages":"958","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"959","messages":"960","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"798","usedDeprecatedRules":"810"},{"filePath":"961","messages":"962","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"795","usedDeprecatedRules":"810"},{"filePath":"963","messages":"964","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"965","messages":"966","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"967","messages":"968","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"969","messages":"970","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"971","messages":"972","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"973","messages":"974","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"975","messages":"976","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"977","messages":"978","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"979","messages":"980","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"981","messages":"982","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"983","messages":"984","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"985","messages":"986","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"987","messages":"988","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"989","messages":"990","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"991","messages":"992","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"993","messages":"994","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"995","messages":"996","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"997","messages":"998","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"999","messages":"1000","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1001","messages":"1002","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1003","messages":"1004","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1005","messages":"1006","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1007","messages":"1008","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"728","usedDeprecatedRules":"810"},{"filePath":"1009","messages":"1010","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1011","messages":"1012","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1013","messages":"1014","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1015","messages":"1016","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1017","messages":"1018","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1019","messages":"1020","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1021","messages":"1022","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1023","messages":"1024","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"755","usedDeprecatedRules":"810"},{"filePath":"1025","messages":"1026","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1027","messages":"1028","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1029","messages":"1030","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1031","messages":"1032","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1033","messages":"1034","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1035","messages":"1036","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1037","messages":"1038","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1039","messages":"1040","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1041","messages":"1042","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1043","messages":"1044","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1045","messages":"1046","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1047","messages":"1048","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1049","messages":"1050","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1051","messages":"1052","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1053","messages":"1054","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1055","messages":"1056","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"810"},{"filePath":"1057","messages":"1058","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1059","usedDeprecatedRules":"810"},{"filePath":"1060","messages":"1061","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1062","usedDeprecatedRules":"810"},{"filePath":"1063","messages":"1064","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1065","usedDeprecatedRules":"810"},{"filePath":"1066","messages":"1067","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1068","usedDeprecatedRules":"810"},{"filePath":"1069","messages":"1070","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1071","messages":"1072","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1073","messages":"1074","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1075","messages":"1076","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1077","messages":"1078","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1079","messages":"1080","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1081","messages":"1082","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1083","messages":"1084","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1085","messages":"1086","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1087","messages":"1088","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/caio/Projects/Samples/front-vawlog/src/index.js",[],["1089","1090"],"/Users/caio/Projects/Samples/front-vawlog/src/store.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/routes.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/config.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/routing/helper.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/routing/default-routes.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/routing/components/RouteIdentifier.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/lang/LangProvider.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/components/loading/Loading.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/@mock-api/index.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/constants.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/routing/components/RouteItem.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/lang/messages/messages.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/lang/langSlice.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/settings/settingsSlice.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/components/scrollspy/scrollspySlice.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/auth/authSlice.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/layout/layoutSlice.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/App.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/config/address_type.js",["1091","1092","1093","1094","1095","1096","1097","1098","1099"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport moment from 'moment';\nimport pt from 'date-fns/locale/pt';\nimport DatePicker from 'react-datepicker';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport PaginationTable from 'helpers/pagination';\nimport formatField from 'helpers/formatField';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2'\nimport { SketchPicker } from 'react-color';\nimport ReactSelect from 'react-select';\n\n\nconst Component = () => {\n    const title = 'Tipo de endereço';\n    const description = 'Tipo de endereço';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'config', text: 'Configurações' },\n        { to: 'address_type', text: 'Tipo de endereço' },\n    ]\n\n    const columns = [\n        { name: 'Id', acessor: 'id', column: 'id' },\n        { name: 'Nome', acessor: 'name', column: 'name' },\n        { name: 'Cor', acessor: 'color', column: 'hint_home', format: 'color' },\n        { name: 'Icon', acessor: 'icon', column: 'fixture', format: 'icon' },\n        { name: 'Padrão', acessor: 'default', column: 'points', format: 'boolean' },\n        { name: 'Data', acessor: 'created_at', column: 'created_at' },\n        { name: '', acessor: 'custom', column: 'custom' },\n    ]\n\n\n    const [modalNewRegister, setModalNewRegister] = useState(false)\n    const [limit, setLimit] = useState(10)\n    const [loading, setLoading] = useState(true)\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [order, setOrder] = useState(false)\n    const [orderBy, setOrderBy] = useState('asc')\n    const [data, setData] = useState(false)\n    const [total, setTotal] = useState(false)\n    const [searchField, setSearchField] = useState('')\n    const [paginationConfig, setPaginationConfig] = useState({\n        page: 1\n    })\n\n    const [modalEditRegister, setModalEditRegister] = useState(false)\n    const [idEdit, setIdEdit] = useState(false)\n    const [loadingIdData, setLoadingIdData] = useState(false)\n    const [idData, setIdData] = useState(false)\n\n    const loadData = async (pageLimit, page) => {\n        document.body.classList.add('spinner')\n\n        pageLimit = limit\n\n        try {\n            let url = `/api/v1/private/address_type?order=${orderBy}&limit=${pageLimit}&page=${page}&search=${searchField}`\n\n            if (startDate && endDate) {\n                url += `&start=${moment(startDate).format('YYYY-MM-DD')}&end=${moment(endDate).format('YYYY-MM-DD')}`\n            }\n\n            if (order) {\n                url += `&order=${orderBy}&order_by=${order}`\n            }\n\n            const response = await api.get(url)\n\n            setData(response.data.data)\n            setTotal(response.data.total)\n\n            setPaginationConfig({\n                previousPage: response.data.data.prev_page_url,\n                page: response.data.data.current_page,\n                nextPage: response.data.data.next_page_url,\n                limit: pageLimit,\n                total: response.data.data.last_page,\n                lastPage: response.data.data.last_page\n            })\n\n        } catch (error) {\n            console.log(error)\n        }\n\n        document.body.classList.remove('spinner')\n\n        setLoading(false)\n    }\n\n    const [icons, setIcons] = useState([])\n\n    const getIcons = async () => {\n        try {\n            const response = await api.get(`/api/v1/private/icons`)\n\n            let array_icons = []\n\n            response.data.map((row) => {\n                array_icons.push({\n                    label: row.name,\n                    value: row.name\n                })\n            })\n\n            setIcons(array_icons)\n        } catch (error) {\n\n        }\n    }\n\n    useEffect(() => {\n        if (icons.length === 0) {\n            getIcons()\n        }\n    }, [])\n\n    const orderTable = (param) => {\n        setOrder(param)\n\n        if (orderBy === 'asc') {\n            setOrderBy('desc')\n        } else {\n            setOrderBy('asc')\n        }\n    }\n\n    const changePaginationConfig = async (param, value) => {\n        await setPaginationConfig({\n            ...paginationConfig, [param]: value\n        })\n    }\n\n    useEffect(() => {\n        if (!data) {\n            loadData(paginationConfig.limit, paginationConfig.page)\n        }\n    }, [paginationConfig.page])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [limit])\n\n    useEffect(() => {\n        if (data) {\n            if (startDate && endDate) {\n                loadData(limit, 1)\n            }\n        }\n    }, [endDate, startDate])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [order, orderBy])\n\n    const handleSearch = (e) => {\n        setSearchField(e.target.value)\n    }\n\n    const callLoadEditRegister = async () => {\n        setLoadingIdData(true)\n        try {\n            const response = await api.get(`/api/v1/private/address_type/${idEdit}`)\n\n            setIdData(response.data)\n        } catch (error) {\n\n        }\n        setLoadingIdData(false)\n    }\n\n    useEffect(() => {\n        if (modalEditRegister) {\n            if (idEdit) {\n                callLoadEditRegister()\n            }\n        }\n    }, [modalEditRegister])\n\n    const callEdit = (id) => {\n        setModalEditRegister(true)\n        setIdEdit(id)\n    }\n\n    const callDelete = async (id) => {\n        Swal.fire({\n            title: 'Tem certeza que deseja excluir este cadastro?',\n            showDenyButton: true,\n            showCancelButton: true,\n            showCancelButton: false,\n            confirmButtonText: 'Sim',\n            confirmButtonColor: '#80D946',\n            denyButtonText: `Não`,\n        }).then(async (result) => {\n            if (result.isConfirmed) {\n                try {\n                    const response = await api.delete(`/api/v1/private/address_type/${id}`)\n                    Swal.fire({\n                        title: response.data.title,\n                        text: response.data.message,\n                        icon: 'success',\n                        confirmButtonText: 'Fechar'\n                    }).then((result) => {\n                        loadData()\n                    })\n                } catch (error) {\n                    Swal.fire({\n                        title: error.response.data.title,\n                        text: error.response.data.message,\n                        icon: 'error',\n                        confirmButtonText: 'Fechar'\n                    })\n                }\n            }\n        })\n    }\n\n    const renderTable = () => {\n        return (\n            <>\n                <Row>\n                    <Col xs={12} xxl={12} className=\" d-flex justify-content-end align-items-end\">\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            disabled={loading}\n                            onClick={() => setModalNewRegister(true)}\n                        >\n                            Novo Cadastro <CsLineIcons icon=\"plus\" />\n                        </Button>\n                    </Col>\n                </Row>\n\n                {/* FILTERS */}\n                <Row>\n                    <Col xs={12} xxl={1} className=\"d-flex d-flex justify-content-end align-items-end\">\n                        <Dropdown\n                            align={{ xs: 'end' }}\n                            className=\"d-inline-block ms-1\"\n                            onSelect={(e) =>\n                                setLimit(e)\n                            }\n                        >\n                            <Dropdown.Toggle variant=\"foreground-alternate\" className=\"shadow\">\n                                {limit} Items\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu\n                                className=\"shadow dropdown-menu-end\"\n                            >\n                                <Dropdown.Item eventKey=\"5\">5 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"10\">10 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"20\">20 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"50\">50 Items</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n\n                    <Col xxl={4}>\n                        <Row className=\"g-2 w-100\">\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">De</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                />\n                            </Col>\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">Até</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={endDate}\n                                    onChange={(date) => setEndDate(date)}\n                                    selectsEnd\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                    minDate={startDate}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xxl={4}>\n                        &nbsp;\n                    </Col>\n                    <Col xs={12} xxl={3} className=\" d-flex justify-content-end align-items-end\">\n                        <InputGroup className=\"mt-2\"\n                            onChange={e => handleSearch(e)}\n                            onKeyDown={e => e.key === 'Enter' ? loadData(paginationConfig.limit, 1) : false}\n                        >\n                            <InputGroup.Text >\n                                <CsLineIcons icon=\"search\" />\n                            </InputGroup.Text>\n                            <FormControl placeholder=\"pesquisar...\" aria-label=\"Pesquisar\" aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                {/* FILTERS */}\n\n                {/* DATA */}\n                <Row className='mt-5'>\n                    <Col xs={12} xxl={12}>\n                        {data.length === 0\n                            ? <>\n                                <Row className=\"g-2 mb-5\">\n                                    <Col sm=\"12\" xxl=\"12\">\n                                        <Card className=\"sh-19\">\n                                            <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                                <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                                <p className=\"heading mb-0\">\n                                                    Ops! Nenhum resultado para essa consulta.\n                                                </p>\n\n                                                <p className=\"text-medium mb-0 text-muted\">\n                                                    Altere os filtros da consulta e tente novamente.\n                                                </p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </>\n                            : <>\n\n                                {total\n                                    ? <>\n                                        <Alert variant=\"info\">\n                                            Total de registros localizados: <strong>{total}</strong>\n                                        </Alert>\n                                    </>\n                                    : <></>\n                                }\n\n                                <table className=\"react-table rows\" >\n                                    <thead>\n                                        <tr>\n                                            {columns.map((row, index) => {\n                                                return (\n                                                    <th\n                                                        key={index}\n                                                        className={`text-muted text-small text-uppercase ${row.column ? 'cursor-pointer' : ''}`}\n                                                        onClick={() => row.column ? orderTable(row.column) : false}\n                                                    >\n                                                        <span className={`${order === row.column ? 'text-primary  font-weight-bold' : ''}`}>\n                                                            {row.name} &nbsp;\n\n                                                            {order === row.column\n                                                                ? <CsLineIcons size={10} icon={orderBy === 'asc' ? 'chevron-top' : 'chevron-bottom'} />\n                                                                : <></>\n                                                            }\n                                                        </span>\n                                                    </th>\n                                                )\n                                            })}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data.length > 0 && data.map((row, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    {columns.map((r, i) => {\n                                                        return (\n                                                            <td key={i}>\n\n                                                                {r.format ?\n                                                                    formatField(r.format, row[r.acessor], row)\n                                                                    : <>\n                                                                        {r.acessor === 'custom'\n                                                                            ? <>\n                                                                                <Button onClick={() => callEdit(row.id)} variant=\"outline-info\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"edit\" />\n                                                                                </Button>\n\n                                                                                &nbsp;\n                                                                                <Button onClick={() => callDelete(row.id)} variant=\"outline-danger\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"bin\" />\n                                                                                </Button>\n\n                                                                            </>\n                                                                            : <>\n                                                                                {row[r.acessor]}\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </td>\n                                                        )\n                                                    })}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n\n                                </table>\n\n\n                                <PaginationTable\n                                    config={paginationConfig}\n                                    gotoPage={(page) => [changePaginationConfig('page', page)]}\n                                />\n\n                            </>\n                        }\n                    </Col>\n                </Row>\n                {/* DATA */}\n            </>\n        )\n    }\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required('Este campo é obrigatório'),\n    })\n\n    const formatOptionLabel = ({ value, label, customAbbreviation }) => (\n        <div style={{ display: \"flex\" }}>\n            <div>{label}</div>\n            <div style={{ marginLeft: \"10px\", color: \"#ccc\" }}>\n                <CsLineIcons icon={`${label}`} className=\"text-info\" size={20} />\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            {loading\n                ? <>\n                    <div className=\"align-items-center\">\n                        <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                        <div>Carregando...</div>\n                    </div>\n                </>\n                : <>\n                    {renderTable()}\n                </>\n            }\n\n            {/* MODAL NEW REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalNewRegister}\n                size='md'\n                centered\n                onHide={() => setModalNewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalNewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Novo cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            name: '',\n                            icon: '',\n                            default: false,\n                            color: ''\n                        }}\n                        validationSchema={validationSchema}\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/address_type`, values)\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalNewRegister(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\"tooltip-end-bottom mt-4\">\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Nome </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                    {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                </div>\n\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Icone </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={icons}\n                                        value={\n                                            icons.filter(option =>\n                                                option.label === values.icon)\n                                        }\n                                        onChange={e => setFieldValue('icon', e.label)}\n                                        formatOptionLabel={formatOptionLabel}\n                                    />\n                                    {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                </div>\n\n                                <div className=\"mb-4  form-group tooltip-end-top\">\n                                    <div className='label'> Cor </div>\n                                    <div className='d-flex justify-content-center align-items-center'>\n                                        <SketchPicker\n                                            color={values.color}\n                                            onChange={(e) => setFieldValue('color', e.hex)}\n                                        />\n                                    </div>\n                                </div>\n\n                                <label>\n                                    Este atributo será padrão? &nbsp;\n                                    <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                </label>\n\n                                <Alert variant='info' className='mt-4 mb-4'>\n                                    Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                </Alert>\n\n                                <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                    <Button\n                                        variant=\"success\"\n                                        type=\"submit\"\n                                        disabled={values.loading}\n                                    >\n                                        {values.loading\n                                            ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                            : <>Cadastrar</>\n                                        }\n                                    </Button>\n                                </div>\n                            </Form>\n                        )}\n                    </Formik>\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL NEW REGISTER */}\n\n            {/* MODAL EDIT REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalEditRegister}\n                size='md'\n                centered\n                onHide={() => setModalEditRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalEditRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Editar</h4>\n\n                    {loadingIdData\n                        ? <>\n                            <div className=\"align-items-center\">\n                                <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                                <div>Carregando...</div>\n                            </div>\n                        </>\n                        : <Formik\n                            initialValues={{\n                                name: idData.name,\n                                icon: idData.icon,\n                                default: idData.default ? idData.default : false,\n                                color: idData.color\n                            }}\n\n                            validationSchema={validationSchema}\n\n                            onSubmit={async (values, { resetForm }) => {\n                                try {\n                                    const response = await api.post(`/api/v1/private/address_type/${idEdit}`, values)\n\n                                    resetForm()\n\n                                    Swal.fire({\n                                        title: response.data.title,\n                                        text: response.data.message,\n                                        icon: 'success',\n                                        confirmButtonText: 'Fechar'\n                                    }).then((result) => {\n                                        setModalEditRegister(false)\n                                        loadData()\n                                    })\n                                } catch (error) {\n                                    Swal.fire({\n                                        title: error.response.data.title,\n                                        text: error.response.data.message,\n                                        icon: 'error',\n                                        confirmButtonText: 'Fechar'\n                                    })\n                                }\n                            }}\n                        >\n                            {({ values, errors, touched, setFieldValue }) => (\n                                <Form className=\"tooltip-end-bottom mt-4\">\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Nome </div>\n                                        <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                        {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                    </div>\n\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Icone </div>\n                                        <ReactSelect\n                                            placeholder=\"\"\n                                            classNamePrefix=\"react-select\"\n                                            options={icons}\n                                            value={\n                                                icons.filter(option =>\n                                                    option.label === values.icon)\n                                            }\n                                            onChange={e => setFieldValue('icon', e.label)}\n                                            formatOptionLabel={formatOptionLabel}\n                                        />\n                                        {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                    </div>\n\n                                    <div className=\"mb-4  form-group tooltip-end-top\">\n                                        <div className='label'> Cor </div>\n                                        <div className='d-flex justify-content-center align-items-center'>\n                                            <SketchPicker\n                                                color={values.color ? values.color : false}\n                                                onChange={(e) => setFieldValue('color', e.hex)}\n                                            />\n                                        </div>\n                                    </div>\n\n                                    <label>\n                                        Este atributo será padrão? &nbsp;\n                                        <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                    </label>\n\n                                    <Alert variant='info' className='mt-4 mb-4'>\n                                        Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                    </Alert>\n\n                                    <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                        <Button\n                                            variant=\"success\"\n                                            type=\"submit\"\n                                            disabled={values.loading}\n                                        >\n                                            {values.loading\n                                                ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                : <>Editar</>\n                                            }\n                                        </Button>\n                                    </div>\n                                </Form>\n                            )}\n                        </Formik>\n                    }\n\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL EDIT REGISTER */}\n        </>\n    );\n};\n\nexport default Component;\n","/Users/caio/Projects/Samples/front-vawlog/src/views/config/contact_type.js",["1100","1101","1102","1103","1104","1105","1106","1107","1108"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport moment from 'moment';\nimport pt from 'date-fns/locale/pt';\nimport DatePicker from 'react-datepicker';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport PaginationTable from 'helpers/pagination';\nimport formatField from 'helpers/formatField';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2'\nimport { SketchPicker } from 'react-color';\nimport ReactSelect from 'react-select';\n\n\nconst Component = () => {\n    const title = 'Tipo de contato';\n    const description = 'Tipo de contato';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'config', text: 'Configurações' },\n        { to: 'contact_type', text: 'Tipo de contato' },\n    ]\n\n    const columns = [\n        { name: 'Id', acessor: 'id', column: 'id' },\n        { name: 'Nome', acessor: 'name', column: 'name' },\n        { name: 'Cor', acessor: 'color', column: 'hint_home', format: 'color' },\n        { name: 'Icon', acessor: 'icon', column: 'fixture', format: 'icon' },\n        { name: 'Padrão', acessor: 'default', column: 'points', format: 'boolean' },\n        { name: 'Data', acessor: 'created_at', column: 'created_at' },\n        { name: '', acessor: 'custom', column: 'custom' },\n    ]\n\n\n    const [modalNewRegister, setModalNewRegister] = useState(false)\n    const [limit, setLimit] = useState(10)\n    const [loading, setLoading] = useState(true)\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [order, setOrder] = useState(false)\n    const [orderBy, setOrderBy] = useState('asc')\n    const [data, setData] = useState(false)\n    const [total, setTotal] = useState(false)\n    const [searchField, setSearchField] = useState('')\n    const [paginationConfig, setPaginationConfig] = useState({\n        page: 1\n    })\n\n    const [modalEditRegister, setModalEditRegister] = useState(false)\n    const [idEdit, setIdEdit] = useState(false)\n    const [loadingIdData, setLoadingIdData] = useState(false)\n    const [idData, setIdData] = useState(false)\n\n    const loadData = async (pageLimit, page) => {\n        document.body.classList.add('spinner')\n\n        pageLimit = limit\n\n        try {\n            let url = `/api/v1/private/contact_type?order=${orderBy}&limit=${pageLimit}&page=${page}&search=${searchField}`\n\n            if (startDate && endDate) {\n                url += `&start=${moment(startDate).format('YYYY-MM-DD')}&end=${moment(endDate).format('YYYY-MM-DD')}`\n            }\n\n            if (order) {\n                url += `&order=${orderBy}&order_by=${order}`\n            }\n\n            const response = await api.get(url)\n\n            setData(response.data.data)\n            setTotal(response.data.total)\n\n            setPaginationConfig({\n                previousPage: response.data.data.prev_page_url,\n                page: response.data.data.current_page,\n                nextPage: response.data.data.next_page_url,\n                limit: pageLimit,\n                total: response.data.data.last_page,\n                lastPage: response.data.data.last_page\n            })\n\n        } catch (error) {\n            console.log(error)\n        }\n\n        document.body.classList.remove('spinner')\n\n        setLoading(false)\n    }\n\n    const [icons, setIcons] = useState([])\n\n    const getIcons = async () => {\n        try {\n            const response = await api.get(`/api/v1/private/icons`)\n\n            let array_icons = []\n\n            response.data.map((row) => {\n                array_icons.push({\n                    label: row.name,\n                    value: row.name\n                })\n            })\n\n            setIcons(array_icons)\n        } catch (error) {\n\n        }\n    }\n\n    useEffect(() => {\n        if (icons.length === 0) {\n            getIcons()\n        }\n    }, [])\n\n    const orderTable = (param) => {\n        setOrder(param)\n\n        if (orderBy === 'asc') {\n            setOrderBy('desc')\n        } else {\n            setOrderBy('asc')\n        }\n    }\n\n    const changePaginationConfig = async (param, value) => {\n        await setPaginationConfig({\n            ...paginationConfig, [param]: value\n        })\n    }\n\n    useEffect(() => {\n        if (!data) {\n            loadData(paginationConfig.limit, paginationConfig.page)\n        }\n    }, [paginationConfig.page])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [limit])\n\n    useEffect(() => {\n        if (data) {\n            if (startDate && endDate) {\n                loadData(limit, 1)\n            }\n        }\n    }, [endDate, startDate])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [order, orderBy])\n\n    const handleSearch = (e) => {\n        setSearchField(e.target.value)\n    }\n\n    const callLoadEditRegister = async () => {\n        setLoadingIdData(true)\n        try {\n            const response = await api.get(`/api/v1/private/contact_type/${idEdit}`)\n\n            setIdData(response.data)\n        } catch (error) {\n\n        }\n        setLoadingIdData(false)\n    }\n\n    useEffect(() => {\n        if (modalEditRegister) {\n            if (idEdit) {\n                callLoadEditRegister()\n            }\n        }\n    }, [modalEditRegister])\n\n    const callEdit = (id) => {\n        setModalEditRegister(true)\n        setIdEdit(id)\n    }\n\n    const callDelete = async (id) => {\n        Swal.fire({\n            title: 'Tem certeza que deseja excluir este cadastro?',\n            showDenyButton: true,\n            showCancelButton: true,\n            showCancelButton: false,\n            confirmButtonText: 'Sim',\n            confirmButtonColor: '#80D946',\n            denyButtonText: `Não`,\n        }).then(async (result) => {\n            if (result.isConfirmed) {\n                try {\n                    const response = await api.delete(`/api/v1/private/contact_type/${id}`)\n                    Swal.fire({\n                        title: response.data.title,\n                        text: response.data.message,\n                        icon: 'success',\n                        confirmButtonText: 'Fechar'\n                    }).then((result) => {\n                        loadData()\n                    })\n                } catch (error) {\n                    Swal.fire({\n                        title: error.response.data.title,\n                        text: error.response.data.message,\n                        icon: 'error',\n                        confirmButtonText: 'Fechar'\n                    })\n                }\n            }\n        })\n    }\n\n    const renderTable = () => {\n        return (\n            <>\n                <Row>\n                    <Col xs={12} xxl={12} className=\" d-flex justify-content-end align-items-end\">\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            disabled={loading}\n                            onClick={() => setModalNewRegister(true)}\n                        >\n                            Novo Cadastro <CsLineIcons icon=\"plus\" />\n                        </Button>\n                    </Col>\n                </Row>\n\n                {/* FILTERS */}\n                <Row>\n                    <Col xs={12} xxl={1} className=\"d-flex d-flex justify-content-end align-items-end\">\n                        <Dropdown\n                            align={{ xs: 'end' }}\n                            className=\"d-inline-block ms-1\"\n                            onSelect={(e) =>\n                                setLimit(e)\n                            }\n                        >\n                            <Dropdown.Toggle variant=\"foreground-alternate\" className=\"shadow\">\n                                {limit} Items\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu\n                                className=\"shadow dropdown-menu-end\"\n                            >\n                                <Dropdown.Item eventKey=\"5\">5 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"10\">10 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"20\">20 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"50\">50 Items</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n\n                    <Col xxl={4}>\n                        <Row className=\"g-2 w-100\">\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">De</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                />\n                            </Col>\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">Até</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={endDate}\n                                    onChange={(date) => setEndDate(date)}\n                                    selectsEnd\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                    minDate={startDate}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xxl={4}>\n                        &nbsp;\n                    </Col>\n                    <Col xs={12} xxl={3} className=\" d-flex justify-content-end align-items-end\">\n                        <InputGroup className=\"mt-2\"\n                            onChange={e => handleSearch(e)}\n                            onKeyDown={e => e.key === 'Enter' ? loadData(paginationConfig.limit, 1) : false}\n                        >\n                            <InputGroup.Text >\n                                <CsLineIcons icon=\"search\" />\n                            </InputGroup.Text>\n                            <FormControl placeholder=\"pesquisar...\" aria-label=\"Pesquisar\" aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                {/* FILTERS */}\n\n                {/* DATA */}\n                <Row className='mt-5'>\n                    <Col xs={12} xxl={12}>\n                        {data.length === 0\n                            ? <>\n                                <Row className=\"g-2 mb-5\">\n                                    <Col sm=\"12\" xxl=\"12\">\n                                        <Card className=\"sh-19\">\n                                            <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                                <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                                <p className=\"heading mb-0\">\n                                                    Ops! Nenhum resultado para essa consulta.\n                                                </p>\n\n                                                <p className=\"text-medium mb-0 text-muted\">\n                                                    Altere os filtros da consulta e tente novamente.\n                                                </p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </>\n                            : <>\n\n                                {total\n                                    ? <>\n                                        <Alert variant=\"info\">\n                                            Total de registros localizados: <strong>{total}</strong>\n                                        </Alert>\n                                    </>\n                                    : <></>\n                                }\n\n                                <table className=\"react-table rows\" >\n                                    <thead>\n                                        <tr>\n                                            {columns.map((row, index) => {\n                                                return (\n                                                    <th\n                                                        key={index}\n                                                        className={`text-muted text-small text-uppercase ${row.column ? 'cursor-pointer' : ''}`}\n                                                        onClick={() => row.column ? orderTable(row.column) : false}\n                                                    >\n                                                        <span className={`${order === row.column ? 'text-primary  font-weight-bold' : ''}`}>\n                                                            {row.name} &nbsp;\n\n                                                            {order === row.column\n                                                                ? <CsLineIcons size={10} icon={orderBy === 'asc' ? 'chevron-top' : 'chevron-bottom'} />\n                                                                : <></>\n                                                            }\n                                                        </span>\n                                                    </th>\n                                                )\n                                            })}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data.length > 0 && data.map((row, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    {columns.map((r, i) => {\n                                                        return (\n                                                            <td key={i}>\n\n                                                                {r.format ?\n                                                                    formatField(r.format, row[r.acessor], row)\n                                                                    : <>\n                                                                        {r.acessor === 'custom'\n                                                                            ? <>\n                                                                                <Button onClick={() => callEdit(row.id)} variant=\"outline-info\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"edit\" />\n                                                                                </Button>\n\n                                                                                &nbsp;\n                                                                                <Button onClick={() => callDelete(row.id)} variant=\"outline-danger\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"bin\" />\n                                                                                </Button>\n\n                                                                            </>\n                                                                            : <>\n                                                                                {row[r.acessor]}\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </td>\n                                                        )\n                                                    })}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n\n                                </table>\n\n\n                                <PaginationTable\n                                    config={paginationConfig}\n                                    gotoPage={(page) => [changePaginationConfig('page', page)]}\n                                />\n\n                            </>\n                        }\n                    </Col>\n                </Row>\n                {/* DATA */}\n            </>\n        )\n    }\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required('Este campo é obrigatório'),\n    })\n\n    const formatOptionLabel = ({ value, label, customAbbreviation }) => (\n        <div style={{ display: \"flex\" }}>\n            <div>{label}</div>\n            <div style={{ marginLeft: \"10px\", color: \"#ccc\" }}>\n                <CsLineIcons icon={`${label}`} className=\"text-info\" size={20} />\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            {loading\n                ? <>\n                    <div className=\"align-items-center\">\n                        <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                        <div>Carregando...</div>\n                    </div>\n                </>\n                : <>\n                    {renderTable()}\n                </>\n            }\n\n            {/* MODAL NEW REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalNewRegister}\n                size='md'\n                centered\n                onHide={() => setModalNewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalNewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Novo cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            name: '',\n                            icon: '',\n                            default: false,\n                            color: ''\n                        }}\n                        validationSchema={validationSchema}\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/contact_type`, values)\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalNewRegister(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\"tooltip-end-bottom mt-4\">\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Nome </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                    {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                </div>\n\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Icone </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={icons}\n                                        value={\n                                            icons.filter(option =>\n                                                option.label === values.icon)\n                                        }\n                                        onChange={e => setFieldValue('icon', e.label)}\n                                        formatOptionLabel={formatOptionLabel}\n                                    />\n                                    {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                </div>\n\n                                <div className=\"mb-4  form-group tooltip-end-top\">\n                                    <div className='label'> Cor </div>\n                                    <div className='d-flex justify-content-center align-items-center'>\n                                        <SketchPicker\n                                            color={values.color}\n                                            onChange={(e) => setFieldValue('color', e.hex)}\n                                        />\n                                    </div>\n                                </div>\n\n                                <label>\n                                    Este atributo será padrão? &nbsp;\n                                    <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                </label>\n\n                                <Alert variant='info' className='mt-4 mb-4'>\n                                    Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                </Alert>\n\n                                <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                    <Button\n                                        variant=\"success\"\n                                        type=\"submit\"\n                                        disabled={values.loading}\n                                    >\n                                        {values.loading\n                                            ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                            : <>Cadastrar</>\n                                        }\n                                    </Button>\n                                </div>\n                            </Form>\n                        )}\n                    </Formik>\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL NEW REGISTER */}\n\n            {/* MODAL EDIT REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalEditRegister}\n                size='md'\n                centered\n                onHide={() => setModalEditRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalEditRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Editar</h4>\n\n                    {loadingIdData\n                        ? <>\n                            <div className=\"align-items-center\">\n                                <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                                <div>Carregando...</div>\n                            </div>\n                        </>\n                        : <Formik\n                            initialValues={{\n                                name: idData.name,\n                                icon: idData.icon,\n                                default: idData.default ? idData.default : false,\n                                color: idData.color\n                            }}\n\n                            validationSchema={validationSchema}\n\n                            onSubmit={async (values, { resetForm }) => {\n                                try {\n                                    const response = await api.post(`/api/v1/private/contact_type/${idEdit}`, values)\n\n                                    resetForm()\n\n                                    Swal.fire({\n                                        title: response.data.title,\n                                        text: response.data.message,\n                                        icon: 'success',\n                                        confirmButtonText: 'Fechar'\n                                    }).then((result) => {\n                                        setModalEditRegister(false)\n                                        loadData()\n                                    })\n                                } catch (error) {\n                                    Swal.fire({\n                                        title: error.response.data.title,\n                                        text: error.response.data.message,\n                                        icon: 'error',\n                                        confirmButtonText: 'Fechar'\n                                    })\n                                }\n                            }}\n                        >\n                            {({ values, errors, touched, setFieldValue }) => (\n                                <Form className=\"tooltip-end-bottom mt-4\">\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Nome </div>\n                                        <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                        {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                    </div>\n\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Icone </div>\n                                        <ReactSelect\n                                            placeholder=\"\"\n                                            classNamePrefix=\"react-select\"\n                                            options={icons}\n                                            value={\n                                                icons.filter(option =>\n                                                    option.label === values.icon)\n                                            }\n                                            onChange={e => setFieldValue('icon', e.label)}\n                                            formatOptionLabel={formatOptionLabel}\n                                        />\n                                        {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                    </div>\n\n                                    <div className=\"mb-4  form-group tooltip-end-top\">\n                                        <div className='label'> Cor </div>\n                                        <div className='d-flex justify-content-center align-items-center'>\n                                            <SketchPicker\n                                                color={values.color ? values.color : false}\n                                                onChange={(e) => setFieldValue('color', e.hex)}\n                                            />\n                                        </div>\n                                    </div>\n\n                                    <label>\n                                        Este atributo será padrão? &nbsp;\n                                        <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                    </label>\n\n                                    <Alert variant='info' className='mt-4 mb-4'>\n                                        Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                    </Alert>\n\n                                    <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                        <Button\n                                            variant=\"success\"\n                                            type=\"submit\"\n                                            disabled={values.loading}\n                                        >\n                                            {values.loading\n                                                ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                : <>Editar</>\n                                            }\n                                        </Button>\n                                    </div>\n                                </Form>\n                            )}\n                        </Formik>\n                    }\n\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL EDIT REGISTER */}\n        </>\n    );\n};\n\nexport default Component;\n","/Users/caio/Projects/Samples/front-vawlog/src/views/config/email_type.js",["1109","1110","1111","1112","1113","1114","1115","1116","1117"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport moment from 'moment';\nimport pt from 'date-fns/locale/pt';\nimport DatePicker from 'react-datepicker';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport PaginationTable from 'helpers/pagination';\nimport formatField from 'helpers/formatField';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2'\nimport { SketchPicker } from 'react-color';\nimport ReactSelect from 'react-select';\n\n\nconst Component = () => {\n    const title = 'Tipo de email';\n    const description = 'Tipo de email';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'config', text: 'Configurações' },\n        { to: 'email_type', text: 'Tipo de email' },\n    ]\n\n    const columns = [\n        { name: 'Id', acessor: 'id', column: 'id' },\n        { name: 'Nome', acessor: 'name', column: 'name' },\n        { name: 'Cor', acessor: 'color', column: 'hint_home', format: 'color' },\n        { name: 'Icon', acessor: 'icon', column: 'fixture', format: 'icon' },\n        { name: 'Padrão', acessor: 'default', column: 'points', format: 'boolean' },\n        { name: 'Data', acessor: 'created_at', column: 'created_at' },\n        { name: '', acessor: 'custom', column: 'custom' },\n    ]\n\n\n    const [modalNewRegister, setModalNewRegister] = useState(false)\n    const [limit, setLimit] = useState(10)\n    const [loading, setLoading] = useState(true)\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [order, setOrder] = useState(false)\n    const [orderBy, setOrderBy] = useState('asc')\n    const [data, setData] = useState(false)\n    const [total, setTotal] = useState(false)\n    const [searchField, setSearchField] = useState('')\n    const [paginationConfig, setPaginationConfig] = useState({\n        page: 1\n    })\n\n    const [modalEditRegister, setModalEditRegister] = useState(false)\n    const [idEdit, setIdEdit] = useState(false)\n    const [loadingIdData, setLoadingIdData] = useState(false)\n    const [idData, setIdData] = useState(false)\n\n    const loadData = async (pageLimit, page) => {\n        document.body.classList.add('spinner')\n\n        pageLimit = limit\n\n        try {\n            let url = `/api/v1/private/email_type?order=${orderBy}&limit=${pageLimit}&page=${page}&search=${searchField}`\n\n            if (startDate && endDate) {\n                url += `&start=${moment(startDate).format('YYYY-MM-DD')}&end=${moment(endDate).format('YYYY-MM-DD')}`\n            }\n\n            if (order) {\n                url += `&order=${orderBy}&order_by=${order}`\n            }\n\n            const response = await api.get(url)\n\n            setData(response.data.data)\n            setTotal(response.data.total)\n\n            setPaginationConfig({\n                previousPage: response.data.data.prev_page_url,\n                page: response.data.data.current_page,\n                nextPage: response.data.data.next_page_url,\n                limit: pageLimit,\n                total: response.data.data.last_page,\n                lastPage: response.data.data.last_page\n            })\n\n        } catch (error) {\n            console.log(error)\n        }\n\n        document.body.classList.remove('spinner')\n\n        setLoading(false)\n    }\n\n    const [icons, setIcons] = useState([])\n\n    const getIcons = async () => {\n        try {\n            const response = await api.get(`/api/v1/private/icons`)\n\n            let array_icons = []\n\n            response.data.map((row) => {\n                array_icons.push({\n                    label: row.name,\n                    value: row.name\n                })\n            })\n\n            setIcons(array_icons)\n        } catch (error) {\n\n        }\n    }\n\n    useEffect(() => {\n        if (icons.length === 0) {\n            getIcons()\n        }\n    }, [])\n\n    const orderTable = (param) => {\n        setOrder(param)\n\n        if (orderBy === 'asc') {\n            setOrderBy('desc')\n        } else {\n            setOrderBy('asc')\n        }\n    }\n\n    const changePaginationConfig = async (param, value) => {\n        await setPaginationConfig({\n            ...paginationConfig, [param]: value\n        })\n    }\n\n    useEffect(() => {\n        if (!data) {\n            loadData(paginationConfig.limit, paginationConfig.page)\n        }\n    }, [paginationConfig.page])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [limit])\n\n    useEffect(() => {\n        if (data) {\n            if (startDate && endDate) {\n                loadData(limit, 1)\n            }\n        }\n    }, [endDate, startDate])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [order, orderBy])\n\n    const handleSearch = (e) => {\n        setSearchField(e.target.value)\n    }\n\n    const callLoadEditRegister = async () => {\n        setLoadingIdData(true)\n        try {\n            const response = await api.get(`/api/v1/private/email_type/${idEdit}`)\n\n            setIdData(response.data)\n        } catch (error) {\n\n        }\n        setLoadingIdData(false)\n    }\n\n    useEffect(() => {\n        if (modalEditRegister) {\n            if (idEdit) {\n                callLoadEditRegister()\n            }\n        }\n    }, [modalEditRegister])\n\n    const callEdit = (id) => {\n        setModalEditRegister(true)\n        setIdEdit(id)\n    }\n\n    const callDelete = async (id) => {\n        Swal.fire({\n            title: 'Tem certeza que deseja excluir este cadastro?',\n            showDenyButton: true,\n            showCancelButton: true,\n            showCancelButton: false,\n            confirmButtonText: 'Sim',\n            confirmButtonColor: '#80D946',\n            denyButtonText: `Não`,\n        }).then(async (result) => {\n            if (result.isConfirmed) {\n                try {\n                    const response = await api.delete(`/api/v1/private/email_type/${id}`)\n                    Swal.fire({\n                        title: response.data.title,\n                        text: response.data.message,\n                        icon: 'success',\n                        confirmButtonText: 'Fechar'\n                    }).then((result) => {\n                        loadData()\n                    })\n                } catch (error) {\n                    Swal.fire({\n                        title: error.response.data.title,\n                        text: error.response.data.message,\n                        icon: 'error',\n                        confirmButtonText: 'Fechar'\n                    })\n                }\n            }\n        })\n    }\n\n    const renderTable = () => {\n        return (\n            <>\n                <Row>\n                    <Col xs={12} xxl={12} className=\" d-flex justify-content-end align-items-end\">\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            disabled={loading}\n                            onClick={() => setModalNewRegister(true)}\n                        >\n                            Novo Cadastro <CsLineIcons icon=\"plus\" />\n                        </Button>\n                    </Col>\n                </Row>\n\n                {/* FILTERS */}\n                <Row>\n                    <Col xs={12} xxl={1} className=\"d-flex d-flex justify-content-end align-items-end\">\n                        <Dropdown\n                            align={{ xs: 'end' }}\n                            className=\"d-inline-block ms-1\"\n                            onSelect={(e) =>\n                                setLimit(e)\n                            }\n                        >\n                            <Dropdown.Toggle variant=\"foreground-alternate\" className=\"shadow\">\n                                {limit} Items\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu\n                                className=\"shadow dropdown-menu-end\"\n                            >\n                                <Dropdown.Item eventKey=\"5\">5 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"10\">10 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"20\">20 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"50\">50 Items</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n\n                    <Col xxl={4}>\n                        <Row className=\"g-2 w-100\">\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">De</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                />\n                            </Col>\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">Até</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={endDate}\n                                    onChange={(date) => setEndDate(date)}\n                                    selectsEnd\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                    minDate={startDate}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xxl={4}>\n                        &nbsp;\n                    </Col>\n                    <Col xs={12} xxl={3} className=\" d-flex justify-content-end align-items-end\">\n                        <InputGroup className=\"mt-2\"\n                            onChange={e => handleSearch(e)}\n                            onKeyDown={e => e.key === 'Enter' ? loadData(paginationConfig.limit, 1) : false}\n                        >\n                            <InputGroup.Text >\n                                <CsLineIcons icon=\"search\" />\n                            </InputGroup.Text>\n                            <FormControl placeholder=\"pesquisar...\" aria-label=\"Pesquisar\" aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                {/* FILTERS */}\n\n                {/* DATA */}\n                <Row className='mt-5'>\n                    <Col xs={12} xxl={12}>\n                        {data.length === 0\n                            ? <>\n                                <Row className=\"g-2 mb-5\">\n                                    <Col sm=\"12\" xxl=\"12\">\n                                        <Card className=\"sh-19\">\n                                            <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                                <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                                <p className=\"heading mb-0\">\n                                                    Ops! Nenhum resultado para essa consulta.\n                                                </p>\n\n                                                <p className=\"text-medium mb-0 text-muted\">\n                                                    Altere os filtros da consulta e tente novamente.\n                                                </p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </>\n                            : <>\n\n                                {total\n                                    ? <>\n                                        <Alert variant=\"info\">\n                                            Total de registros localizados: <strong>{total}</strong>\n                                        </Alert>\n                                    </>\n                                    : <></>\n                                }\n\n                                <table className=\"react-table rows\" >\n                                    <thead>\n                                        <tr>\n                                            {columns.map((row, index) => {\n                                                return (\n                                                    <th\n                                                        key={index}\n                                                        className={`text-muted text-small text-uppercase ${row.column ? 'cursor-pointer' : ''}`}\n                                                        onClick={() => row.column ? orderTable(row.column) : false}\n                                                    >\n                                                        <span className={`${order === row.column ? 'text-primary  font-weight-bold' : ''}`}>\n                                                            {row.name} &nbsp;\n\n                                                            {order === row.column\n                                                                ? <CsLineIcons size={10} icon={orderBy === 'asc' ? 'chevron-top' : 'chevron-bottom'} />\n                                                                : <></>\n                                                            }\n                                                        </span>\n                                                    </th>\n                                                )\n                                            })}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data.length > 0 && data.map((row, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    {columns.map((r, i) => {\n                                                        return (\n                                                            <td key={i}>\n\n                                                                {r.format ?\n                                                                    formatField(r.format, row[r.acessor], row)\n                                                                    : <>\n                                                                        {r.acessor === 'custom'\n                                                                            ? <>\n                                                                                <Button onClick={() => callEdit(row.id)} variant=\"outline-info\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"edit\" />\n                                                                                </Button>\n\n                                                                                &nbsp;\n                                                                                <Button onClick={() => callDelete(row.id)} variant=\"outline-danger\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"bin\" />\n                                                                                </Button>\n\n                                                                            </>\n                                                                            : <>\n                                                                                {row[r.acessor]}\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </td>\n                                                        )\n                                                    })}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n\n                                </table>\n\n\n                                <PaginationTable\n                                    config={paginationConfig}\n                                    gotoPage={(page) => [changePaginationConfig('page', page)]}\n                                />\n\n                            </>\n                        }\n                    </Col>\n                </Row>\n                {/* DATA */}\n            </>\n        )\n    }\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required('Este campo é obrigatório'),\n    })\n\n    const formatOptionLabel = ({ value, label, customAbbreviation }) => (\n        <div style={{ display: \"flex\" }}>\n            <div>{label}</div>\n            <div style={{ marginLeft: \"10px\", color: \"#ccc\" }}>\n                <CsLineIcons icon={`${label}`} className=\"text-info\" size={20} />\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            {loading\n                ? <>\n                    <div className=\"align-items-center\">\n                        <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                        <div>Carregando...</div>\n                    </div>\n                </>\n                : <>\n                    {renderTable()}\n                </>\n            }\n\n            {/* MODAL NEW REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalNewRegister}\n                size='md'\n                centered\n                onHide={() => setModalNewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalNewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Novo cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            name: '',\n                            icon: '',\n                            default: false,\n                            color: ''\n                        }}\n                        validationSchema={validationSchema}\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/email_type`, values)\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalNewRegister(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\"tooltip-end-bottom mt-4\">\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Nome </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                    {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                </div>\n\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Icone </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={icons}\n                                        value={\n                                            icons.filter(option =>\n                                                option.label === values.icon)\n                                        }\n                                        onChange={e => setFieldValue('icon', e.label)}\n                                        formatOptionLabel={formatOptionLabel}\n                                    />\n                                    {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                </div>\n\n                                <div className=\"mb-4  form-group tooltip-end-top\">\n                                    <div className='label'> Cor </div>\n                                    <div className='d-flex justify-content-center align-items-center'>\n                                        <SketchPicker\n                                            color={values.color}\n                                            onChange={(e) => setFieldValue('color', e.hex)}\n                                        />\n                                    </div>\n                                </div>\n\n                                <label>\n                                    Este atributo será padrão? &nbsp;\n                                    <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                </label>\n\n                                <Alert variant='info' className='mt-4 mb-4'>\n                                    Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                </Alert>\n\n                                <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                    <Button\n                                        variant=\"success\"\n                                        type=\"submit\"\n                                        disabled={values.loading}\n                                    >\n                                        {values.loading\n                                            ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                            : <>Cadastrar</>\n                                        }\n                                    </Button>\n                                </div>\n                            </Form>\n                        )}\n                    </Formik>\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL NEW REGISTER */}\n\n            {/* MODAL EDIT REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalEditRegister}\n                size='md'\n                centered\n                onHide={() => setModalEditRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalEditRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Editar</h4>\n\n                    {loadingIdData\n                        ? <>\n                            <div className=\"align-items-center\">\n                                <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                                <div>Carregando...</div>\n                            </div>\n                        </>\n                        : <Formik\n                            initialValues={{\n                                name: idData.name,\n                                icon: idData.icon,\n                                default: idData.default ? idData.default : false,\n                                color: idData.color\n                            }}\n\n                            validationSchema={validationSchema}\n\n                            onSubmit={async (values, { resetForm }) => {\n                                try {\n                                    const response = await api.post(`/api/v1/private/email_type/${idEdit}`, values)\n\n                                    resetForm()\n\n                                    Swal.fire({\n                                        title: response.data.title,\n                                        text: response.data.message,\n                                        icon: 'success',\n                                        confirmButtonText: 'Fechar'\n                                    }).then((result) => {\n                                        setModalEditRegister(false)\n                                        loadData()\n                                    })\n                                } catch (error) {\n                                    Swal.fire({\n                                        title: error.response.data.title,\n                                        text: error.response.data.message,\n                                        icon: 'error',\n                                        confirmButtonText: 'Fechar'\n                                    })\n                                }\n                            }}\n                        >\n                            {({ values, errors, touched, setFieldValue }) => (\n                                <Form className=\"tooltip-end-bottom mt-4\">\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Nome </div>\n                                        <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                        {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                    </div>\n\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Icone </div>\n                                        <ReactSelect\n                                            placeholder=\"\"\n                                            classNamePrefix=\"react-select\"\n                                            options={icons}\n                                            value={\n                                                icons.filter(option =>\n                                                    option.label === values.icon)\n                                            }\n                                            onChange={e => setFieldValue('icon', e.label)}\n                                            formatOptionLabel={formatOptionLabel}\n                                        />\n                                        {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                    </div>\n\n                                    <div className=\"mb-4  form-group tooltip-end-top\">\n                                        <div className='label'> Cor </div>\n                                        <div className='d-flex justify-content-center align-items-center'>\n                                            <SketchPicker\n                                                color={values.color ? values.color : false}\n                                                onChange={(e) => setFieldValue('color', e.hex)}\n                                            />\n                                        </div>\n                                    </div>\n\n                                    <label>\n                                        Este atributo será padrão? &nbsp;\n                                        <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                    </label>\n\n                                    <Alert variant='info' className='mt-4 mb-4'>\n                                        Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                    </Alert>\n\n                                    <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                        <Button\n                                            variant=\"success\"\n                                            type=\"submit\"\n                                            disabled={values.loading}\n                                        >\n                                            {values.loading\n                                                ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                : <>Editar</>\n                                            }\n                                        </Button>\n                                    </div>\n                                </Form>\n                            )}\n                        </Formik>\n                    }\n\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL EDIT REGISTER */}\n        </>\n    );\n};\n\nexport default Component;\n","/Users/caio/Projects/Samples/front-vawlog/src/views/config/phone_type.js",["1118","1119","1120","1121","1122","1123","1124","1125","1126"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport moment from 'moment';\nimport pt from 'date-fns/locale/pt';\nimport DatePicker from 'react-datepicker';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport PaginationTable from 'helpers/pagination';\nimport formatField from 'helpers/formatField';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2'\nimport { SketchPicker } from 'react-color';\nimport ReactSelect from 'react-select';\n\n\nconst Component = () => {\n    const title = 'Tipo de telefone';\n    const description = 'Tipo de telefone';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'config', text: 'Configurações' },\n        { to: 'phone_type', text: 'Tipo de telefone' },\n    ]\n\n    const columns = [\n        { name: 'Id', acessor: 'id', column: 'id' },\n        { name: 'Nome', acessor: 'name', column: 'name' },\n        { name: 'Cor', acessor: 'color', column: 'hint_home', format: 'color' },\n        { name: 'Icon', acessor: 'icon', column: 'fixture', format: 'icon' },\n        { name: 'Padrão', acessor: 'default', column: 'points', format: 'boolean' },\n        { name: 'Data', acessor: 'created_at', column: 'created_at' },\n        { name: '', acessor: 'custom', column: 'custom' },\n    ]\n\n\n    const [modalNewRegister, setModalNewRegister] = useState(false)\n    const [limit, setLimit] = useState(10)\n    const [loading, setLoading] = useState(true)\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [order, setOrder] = useState(false)\n    const [orderBy, setOrderBy] = useState('asc')\n    const [data, setData] = useState(false)\n    const [total, setTotal] = useState(false)\n    const [searchField, setSearchField] = useState('')\n    const [paginationConfig, setPaginationConfig] = useState({\n        page: 1\n    })\n\n    const [modalEditRegister, setModalEditRegister] = useState(false)\n    const [idEdit, setIdEdit] = useState(false)\n    const [loadingIdData, setLoadingIdData] = useState(false)\n    const [idData, setIdData] = useState(false)\n\n    const loadData = async (pageLimit, page) => {\n        document.body.classList.add('spinner')\n\n        pageLimit = limit\n\n        try {\n            let url = `/api/v1/private/phone_type?order=${orderBy}&limit=${pageLimit}&page=${page}&search=${searchField}`\n\n            if (startDate && endDate) {\n                url += `&start=${moment(startDate).format('YYYY-MM-DD')}&end=${moment(endDate).format('YYYY-MM-DD')}`\n            }\n\n            if (order) {\n                url += `&order=${orderBy}&order_by=${order}`\n            }\n\n            const response = await api.get(url)\n\n            setData(response.data.data)\n            setTotal(response.data.total)\n\n            setPaginationConfig({\n                previousPage: response.data.data.prev_page_url,\n                page: response.data.data.current_page,\n                nextPage: response.data.data.next_page_url,\n                limit: pageLimit,\n                total: response.data.data.last_page,\n                lastPage: response.data.data.last_page\n            })\n\n        } catch (error) {\n            console.log(error)\n        }\n\n        document.body.classList.remove('spinner')\n\n        setLoading(false)\n    }\n\n    const [icons, setIcons] = useState([])\n\n    const getIcons = async () => {\n        try {\n            const response = await api.get(`/api/v1/private/icons`)\n\n            let array_icons = []\n\n            response.data.map((row) => {\n                array_icons.push({\n                    label: row.name,\n                    value: row.name\n                })\n            })\n\n            setIcons(array_icons)\n        } catch (error) {\n\n        }\n    }\n\n    useEffect(() => {\n        if (icons.length === 0) {\n            getIcons()\n        }\n    }, [])\n\n    const orderTable = (param) => {\n        setOrder(param)\n\n        if (orderBy === 'asc') {\n            setOrderBy('desc')\n        } else {\n            setOrderBy('asc')\n        }\n    }\n\n    const changePaginationConfig = async (param, value) => {\n        await setPaginationConfig({\n            ...paginationConfig, [param]: value\n        })\n    }\n\n    useEffect(() => {\n        if (!data) {\n            loadData(paginationConfig.limit, paginationConfig.page)\n        }\n    }, [paginationConfig.page])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [limit])\n\n    useEffect(() => {\n        if (data) {\n            if (startDate && endDate) {\n                loadData(limit, 1)\n            }\n        }\n    }, [endDate, startDate])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [order, orderBy])\n\n    const handleSearch = (e) => {\n        setSearchField(e.target.value)\n    }\n\n    const callLoadEditRegister = async () => {\n        setLoadingIdData(true)\n        try {\n            const response = await api.get(`/api/v1/private/phone_type/${idEdit}`)\n\n            setIdData(response.data)\n        } catch (error) {\n\n        }\n        setLoadingIdData(false)\n    }\n\n    useEffect(() => {\n        if (modalEditRegister) {\n            if (idEdit) {\n                callLoadEditRegister()\n            }\n        }\n    }, [modalEditRegister])\n\n    const callEdit = (id) => {\n        setModalEditRegister(true)\n        setIdEdit(id)\n    }\n\n    const callDelete = async (id) => {\n        Swal.fire({\n            title: 'Tem certeza que deseja excluir este cadastro?',\n            showDenyButton: true,\n            showCancelButton: true,\n            showCancelButton: false,\n            confirmButtonText: 'Sim',\n            confirmButtonColor: '#80D946',\n            denyButtonText: `Não`,\n        }).then(async (result) => {\n            if (result.isConfirmed) {\n                try {\n                    const response = await api.delete(`/api/v1/private/phone_type/${id}`)\n                    Swal.fire({\n                        title: response.data.title,\n                        text: response.data.message,\n                        icon: 'success',\n                        confirmButtonText: 'Fechar'\n                    }).then((result) => {\n                        loadData()\n                    })\n                } catch (error) {\n                    Swal.fire({\n                        title: error.response.data.title,\n                        text: error.response.data.message,\n                        icon: 'error',\n                        confirmButtonText: 'Fechar'\n                    })\n                }\n            }\n        })\n    }\n\n    const renderTable = () => {\n        return (\n            <>\n                <Row>\n                    <Col xs={12} xxl={12} className=\" d-flex justify-content-end align-items-end\">\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            disabled={loading}\n                            onClick={() => setModalNewRegister(true)}\n                        >\n                            Novo Cadastro <CsLineIcons icon=\"plus\" />\n                        </Button>\n                    </Col>\n                </Row>\n\n                {/* FILTERS */}\n                <Row>\n                    <Col xs={12} xxl={1} className=\"d-flex d-flex justify-content-end align-items-end\">\n                        <Dropdown\n                            align={{ xs: 'end' }}\n                            className=\"d-inline-block ms-1\"\n                            onSelect={(e) =>\n                                setLimit(e)\n                            }\n                        >\n                            <Dropdown.Toggle variant=\"foreground-alternate\" className=\"shadow\">\n                                {limit} Items\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu\n                                className=\"shadow dropdown-menu-end\"\n                            >\n                                <Dropdown.Item eventKey=\"5\">5 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"10\">10 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"20\">20 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"50\">50 Items</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n\n                    <Col xxl={4}>\n                        <Row className=\"g-2 w-100\">\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">De</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                />\n                            </Col>\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">Até</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={endDate}\n                                    onChange={(date) => setEndDate(date)}\n                                    selectsEnd\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                    minDate={startDate}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xxl={4}>\n                        &nbsp;\n                    </Col>\n                    <Col xs={12} xxl={3} className=\" d-flex justify-content-end align-items-end\">\n                        <InputGroup className=\"mt-2\"\n                            onChange={e => handleSearch(e)}\n                            onKeyDown={e => e.key === 'Enter' ? loadData(paginationConfig.limit, 1) : false}\n                        >\n                            <InputGroup.Text >\n                                <CsLineIcons icon=\"search\" />\n                            </InputGroup.Text>\n                            <FormControl placeholder=\"pesquisar...\" aria-label=\"Pesquisar\" aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                {/* FILTERS */}\n\n                {/* DATA */}\n                <Row className='mt-5'>\n                    <Col xs={12} xxl={12}>\n                        {data.length === 0\n                            ? <>\n                                <Row className=\"g-2 mb-5\">\n                                    <Col sm=\"12\" xxl=\"12\">\n                                        <Card className=\"sh-19\">\n                                            <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                                <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                                <p className=\"heading mb-0\">\n                                                    Ops! Nenhum resultado para essa consulta.\n                                                </p>\n\n                                                <p className=\"text-medium mb-0 text-muted\">\n                                                    Altere os filtros da consulta e tente novamente.\n                                                </p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </>\n                            : <>\n\n                                {total\n                                    ? <>\n                                        <Alert variant=\"info\">\n                                            Total de registros localizados: <strong>{total}</strong>\n                                        </Alert>\n                                    </>\n                                    : <></>\n                                }\n\n                                <table className=\"react-table rows\" >\n                                    <thead>\n                                        <tr>\n                                            {columns.map((row, index) => {\n                                                return (\n                                                    <th\n                                                        key={index}\n                                                        className={`text-muted text-small text-uppercase ${row.column ? 'cursor-pointer' : ''}`}\n                                                        onClick={() => row.column ? orderTable(row.column) : false}\n                                                    >\n                                                        <span className={`${order === row.column ? 'text-primary  font-weight-bold' : ''}`}>\n                                                            {row.name} &nbsp;\n\n                                                            {order === row.column\n                                                                ? <CsLineIcons size={10} icon={orderBy === 'asc' ? 'chevron-top' : 'chevron-bottom'} />\n                                                                : <></>\n                                                            }\n                                                        </span>\n                                                    </th>\n                                                )\n                                            })}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data.length > 0 && data.map((row, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    {columns.map((r, i) => {\n                                                        return (\n                                                            <td key={i}>\n\n                                                                {r.format ?\n                                                                    formatField(r.format, row[r.acessor], row)\n                                                                    : <>\n                                                                        {r.acessor === 'custom'\n                                                                            ? <>\n                                                                                <Button onClick={() => callEdit(row.id)} variant=\"outline-info\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"edit\" />\n                                                                                </Button>\n\n                                                                                &nbsp;\n                                                                                <Button onClick={() => callDelete(row.id)} variant=\"outline-danger\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"bin\" />\n                                                                                </Button>\n\n                                                                            </>\n                                                                            : <>\n                                                                                {row[r.acessor]}\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </td>\n                                                        )\n                                                    })}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n\n                                </table>\n\n\n                                <PaginationTable\n                                    config={paginationConfig}\n                                    gotoPage={(page) => [changePaginationConfig('page', page)]}\n                                />\n\n                            </>\n                        }\n                    </Col>\n                </Row>\n                {/* DATA */}\n            </>\n        )\n    }\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required('Este campo é obrigatório'),\n    })\n\n    const formatOptionLabel = ({ value, label, customAbbreviation }) => (\n        <div style={{ display: \"flex\" }}>\n            <div>{label}</div>\n            <div style={{ marginLeft: \"10px\", color: \"#ccc\" }}>\n                <CsLineIcons icon={`${label}`} className=\"text-info\" size={20} />\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            {loading\n                ? <>\n                    <div className=\"align-items-center\">\n                        <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                        <div>Carregando...</div>\n                    </div>\n                </>\n                : <>\n                    {renderTable()}\n                </>\n            }\n\n            {/* MODAL NEW REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalNewRegister}\n                size='md'\n                centered\n                onHide={() => setModalNewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalNewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Novo cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            name: '',\n                            icon: '',\n                            default: false,\n                            color: ''\n                        }}\n                        validationSchema={validationSchema}\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/phone_type`, values)\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalNewRegister(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\"tooltip-end-bottom mt-4\">\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Nome </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                    {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                </div>\n\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Icone </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={icons}\n                                        value={\n                                            icons.filter(option =>\n                                                option.label === values.icon)\n                                        }\n                                        onChange={e => setFieldValue('icon', e.label)}\n                                        formatOptionLabel={formatOptionLabel}\n                                    />\n                                    {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                </div>\n\n                                <div className=\"mb-4  form-group tooltip-end-top\">\n                                    <div className='label'> Cor </div>\n                                    <div className='d-flex justify-content-center align-items-center'>\n                                        <SketchPicker\n                                            color={values.color}\n                                            onChange={(e) => setFieldValue('color', e.hex)}\n                                        />\n                                    </div>\n                                </div>\n\n                                <label>\n                                    Este atributo será padrão? &nbsp;\n                                    <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                </label>\n\n                                <Alert variant='info' className='mt-4 mb-4'>\n                                    Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                </Alert>\n\n                                <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                    <Button\n                                        variant=\"success\"\n                                        type=\"submit\"\n                                        disabled={values.loading}\n                                    >\n                                        {values.loading\n                                            ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                            : <>Cadastrar</>\n                                        }\n                                    </Button>\n                                </div>\n                            </Form>\n                        )}\n                    </Formik>\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL NEW REGISTER */}\n\n            {/* MODAL EDIT REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalEditRegister}\n                size='md'\n                centered\n                onHide={() => setModalEditRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalEditRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Editar</h4>\n\n                    {loadingIdData\n                        ? <>\n                            <div className=\"align-items-center\">\n                                <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                                <div>Carregando...</div>\n                            </div>\n                        </>\n                        : <Formik\n                            initialValues={{\n                                name: idData.name,\n                                icon: idData.icon,\n                                default: idData.default ? idData.default : false,\n                                color: idData.color\n                            }}\n\n                            validationSchema={validationSchema}\n\n                            onSubmit={async (values, { resetForm }) => {\n                                try {\n                                    const response = await api.post(`/api/v1/private/phone_type/${idEdit}`, values)\n\n                                    resetForm()\n\n                                    Swal.fire({\n                                        title: response.data.title,\n                                        text: response.data.message,\n                                        icon: 'success',\n                                        confirmButtonText: 'Fechar'\n                                    }).then((result) => {\n                                        setModalEditRegister(false)\n                                        loadData()\n                                    })\n                                } catch (error) {\n                                    Swal.fire({\n                                        title: error.response.data.title,\n                                        text: error.response.data.message,\n                                        icon: 'error',\n                                        confirmButtonText: 'Fechar'\n                                    })\n                                }\n                            }}\n                        >\n                            {({ values, errors, touched, setFieldValue }) => (\n                                <Form className=\"tooltip-end-bottom mt-4\">\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Nome </div>\n                                        <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                        {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                    </div>\n\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Icone </div>\n                                        <ReactSelect\n                                            placeholder=\"\"\n                                            classNamePrefix=\"react-select\"\n                                            options={icons}\n                                            value={\n                                                icons.filter(option =>\n                                                    option.label === values.icon)\n                                            }\n                                            onChange={e => setFieldValue('icon', e.label)}\n                                            formatOptionLabel={formatOptionLabel}\n                                        />\n                                        {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                    </div>\n\n                                    <div className=\"mb-4  form-group tooltip-end-top\">\n                                        <div className='label'> Cor </div>\n                                        <div className='d-flex justify-content-center align-items-center'>\n                                            <SketchPicker\n                                                color={values.color ? values.color : false}\n                                                onChange={(e) => setFieldValue('color', e.hex)}\n                                            />\n                                        </div>\n                                    </div>\n\n                                    <label>\n                                        Este atributo será padrão? &nbsp;\n                                        <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                    </label>\n\n                                    <Alert variant='info' className='mt-4 mb-4'>\n                                        Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                    </Alert>\n\n                                    <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                        <Button\n                                            variant=\"success\"\n                                            type=\"submit\"\n                                            disabled={values.loading}\n                                        >\n                                            {values.loading\n                                                ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                : <>Editar</>\n                                            }\n                                        </Button>\n                                    </div>\n                                </Form>\n                            )}\n                        </Formik>\n                    }\n\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL EDIT REGISTER */}\n        </>\n    );\n};\n\nexport default Component;\n","/Users/caio/Projects/Samples/front-vawlog/src/views/config/user_type.js",["1127","1128","1129","1130","1131","1132","1133","1134","1135"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport moment from 'moment';\nimport pt from 'date-fns/locale/pt';\nimport DatePicker from 'react-datepicker';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport PaginationTable from 'helpers/pagination';\nimport formatField from 'helpers/formatField';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2'\nimport { SketchPicker } from 'react-color';\nimport ReactSelect from 'react-select';\n\n\nconst Component = () => {\n    const title = 'Tipo de usuário';\n    const description = 'Tipo de usuário';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'config', text: 'Configurações' },\n        { to: 'user_type', text: 'Tipo de usuário' },\n    ]\n\n    const columns = [\n        { name: 'Id', acessor: 'id', column: 'id' },\n        { name: 'Nome', acessor: 'name', column: 'name' },\n        { name: 'Cor', acessor: 'color', column: 'hint_home', format: 'color' },\n        { name: 'Icon', acessor: 'icon', column: 'fixture', format: 'icon' },\n        { name: 'Padrão', acessor: 'default', column: 'points', format: 'boolean' },\n        { name: 'Data', acessor: 'created_at', column: 'created_at' },\n        { name: '', acessor: 'custom', column: 'custom' },\n    ]\n\n\n    const [modalNewRegister, setModalNewRegister] = useState(false)\n    const [limit, setLimit] = useState(10)\n    const [loading, setLoading] = useState(true)\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [order, setOrder] = useState(false)\n    const [orderBy, setOrderBy] = useState('asc')\n    const [data, setData] = useState(false)\n    const [total, setTotal] = useState(false)\n    const [searchField, setSearchField] = useState('')\n    const [paginationConfig, setPaginationConfig] = useState({\n        page: 1\n    })\n\n    const [modalEditRegister, setModalEditRegister] = useState(false)\n    const [idEdit, setIdEdit] = useState(false)\n    const [loadingIdData, setLoadingIdData] = useState(false)\n    const [idData, setIdData] = useState(false)\n\n    const loadData = async (pageLimit, page) => {\n        document.body.classList.add('spinner')\n\n        pageLimit = limit\n\n        try {\n            let url = `/api/v1/private/user_type?order=${orderBy}&limit=${pageLimit}&page=${page}&search=${searchField}`\n\n            if (startDate && endDate) {\n                url += `&start=${moment(startDate).format('YYYY-MM-DD')}&end=${moment(endDate).format('YYYY-MM-DD')}`\n            }\n\n            if (order) {\n                url += `&order=${orderBy}&order_by=${order}`\n            }\n\n            const response = await api.get(url)\n\n            setData(response.data.data)\n            setTotal(response.data.total)\n\n            setPaginationConfig({\n                previousPage: response.data.data.prev_page_url,\n                page: response.data.data.current_page,\n                nextPage: response.data.data.next_page_url,\n                limit: pageLimit,\n                total: response.data.data.last_page,\n                lastPage: response.data.data.last_page\n            })\n\n        } catch (error) {\n            console.log(error)\n        }\n\n        document.body.classList.remove('spinner')\n\n        setLoading(false)\n    }\n\n    const [icons, setIcons] = useState([])\n\n    const getIcons = async () => {\n        try {\n            const response = await api.get(`/api/v1/private/icons`)\n\n            let array_icons = []\n\n            response.data.map((row) => {\n                array_icons.push({\n                    label: row.name,\n                    value: row.name\n                })\n            })\n\n            setIcons(array_icons)\n        } catch (error) {\n\n        }\n    }\n\n    useEffect(() => {\n        if (icons.length === 0) {\n            getIcons()\n        }\n    }, [])\n\n    const orderTable = (param) => {\n        setOrder(param)\n\n        if (orderBy === 'asc') {\n            setOrderBy('desc')\n        } else {\n            setOrderBy('asc')\n        }\n    }\n\n    const changePaginationConfig = async (param, value) => {\n        await setPaginationConfig({\n            ...paginationConfig, [param]: value\n        })\n    }\n\n    useEffect(() => {\n        if (!data) {\n            loadData(paginationConfig.limit, paginationConfig.page)\n        }\n    }, [paginationConfig.page])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [limit])\n\n    useEffect(() => {\n        if (data) {\n            if (startDate && endDate) {\n                loadData(limit, 1)\n            }\n        }\n    }, [endDate, startDate])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [order, orderBy])\n\n    const handleSearch = (e) => {\n        setSearchField(e.target.value)\n    }\n\n    const callLoadEditRegister = async () => {\n        setLoadingIdData(true)\n        try {\n            const response = await api.get(`/api/v1/private/user_type/${idEdit}`)\n\n            setIdData(response.data)\n        } catch (error) {\n\n        }\n        setLoadingIdData(false)\n    }\n\n    useEffect(() => {\n        if (modalEditRegister) {\n            if (idEdit) {\n                callLoadEditRegister()\n            }\n        }\n    }, [modalEditRegister])\n\n    const callEdit = (id) => {\n        setModalEditRegister(true)\n        setIdEdit(id)\n    }\n\n    const callDelete = async (id) => {\n        Swal.fire({\n            title: 'Tem certeza que deseja excluir este cadastro?',\n            showDenyButton: true,\n            showCancelButton: true,\n            showCancelButton: false,\n            confirmButtonText: 'Sim',\n            confirmButtonColor: '#80D946',\n            denyButtonText: `Não`,\n        }).then(async (result) => {\n            if (result.isConfirmed) {\n                try {\n                    const response = await api.delete(`/api/v1/private/user_type/${id}`)\n                    Swal.fire({\n                        title: response.data.title,\n                        text: response.data.message,\n                        icon: 'success',\n                        confirmButtonText: 'Fechar'\n                    }).then((result) => {\n                        loadData()\n                    })\n                } catch (error) {\n                    Swal.fire({\n                        title: error.response.data.title,\n                        text: error.response.data.message,\n                        icon: 'error',\n                        confirmButtonText: 'Fechar'\n                    })\n                }\n            }\n        })\n    }\n\n    const renderTable = () => {\n        return (\n            <>\n                <Row>\n                    <Col xs={12} xxl={12} className=\" d-flex justify-content-end align-items-end\">\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            disabled={loading}\n                            onClick={() => setModalNewRegister(true)}\n                        >\n                            Novo Cadastro <CsLineIcons icon=\"plus\" />\n                        </Button>\n                    </Col>\n                </Row>\n\n                {/* FILTERS */}\n                <Row>\n                    <Col xs={12} xxl={1} className=\"d-flex d-flex justify-content-end align-items-end\">\n                        <Dropdown\n                            align={{ xs: 'end' }}\n                            className=\"d-inline-block ms-1\"\n                            onSelect={(e) =>\n                                setLimit(e)\n                            }\n                        >\n                            <Dropdown.Toggle variant=\"foreground-alternate\" className=\"shadow\">\n                                {limit} Items\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu\n                                className=\"shadow dropdown-menu-end\"\n                            >\n                                <Dropdown.Item eventKey=\"5\">5 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"10\">10 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"20\">20 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"50\">50 Items</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n\n                    <Col xxl={4}>\n                        <Row className=\"g-2 w-100\">\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">De</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                />\n                            </Col>\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">Até</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={endDate}\n                                    onChange={(date) => setEndDate(date)}\n                                    selectsEnd\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                    minDate={startDate}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xxl={4}>\n                        &nbsp;\n                    </Col>\n                    <Col xs={12} xxl={3} className=\" d-flex justify-content-end align-items-end\">\n                        <InputGroup className=\"mt-2\"\n                            onChange={e => handleSearch(e)}\n                            onKeyDown={e => e.key === 'Enter' ? loadData(paginationConfig.limit, 1) : false}\n                        >\n                            <InputGroup.Text >\n                                <CsLineIcons icon=\"search\" />\n                            </InputGroup.Text>\n                            <FormControl placeholder=\"pesquisar...\" aria-label=\"Pesquisar\" aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                {/* FILTERS */}\n\n                {/* DATA */}\n                <Row className='mt-5'>\n                    <Col xs={12} xxl={12}>\n                        {data.length === 0\n                            ? <>\n                                <Row className=\"g-2 mb-5\">\n                                    <Col sm=\"12\" xxl=\"12\">\n                                        <Card className=\"sh-19\">\n                                            <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                                <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                                <p className=\"heading mb-0\">\n                                                    Ops! Nenhum resultado para essa consulta.\n                                                </p>\n\n                                                <p className=\"text-medium mb-0 text-muted\">\n                                                    Altere os filtros da consulta e tente novamente.\n                                                </p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </>\n                            : <>\n\n                                {total\n                                    ? <>\n                                        <Alert variant=\"info\">\n                                            Total de registros localizados: <strong>{total}</strong>\n                                        </Alert>\n                                    </>\n                                    : <></>\n                                }\n\n                                <table className=\"react-table rows\" >\n                                    <thead>\n                                        <tr>\n                                            {columns.map((row, index) => {\n                                                return (\n                                                    <th\n                                                        key={index}\n                                                        className={`text-muted text-small text-uppercase ${row.column ? 'cursor-pointer' : ''}`}\n                                                        onClick={() => row.column ? orderTable(row.column) : false}\n                                                    >\n                                                        <span className={`${order === row.column ? 'text-primary  font-weight-bold' : ''}`}>\n                                                            {row.name} &nbsp;\n\n                                                            {order === row.column\n                                                                ? <CsLineIcons size={10} icon={orderBy === 'asc' ? 'chevron-top' : 'chevron-bottom'} />\n                                                                : <></>\n                                                            }\n                                                        </span>\n                                                    </th>\n                                                )\n                                            })}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data.length > 0 && data.map((row, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    {columns.map((r, i) => {\n                                                        return (\n                                                            <td key={i}>\n\n                                                                {r.format ?\n                                                                    formatField(r.format, row[r.acessor], row)\n                                                                    : <>\n                                                                        {r.acessor === 'custom'\n                                                                            ? <>\n                                                                                <Button onClick={() => callEdit(row.id)} variant=\"outline-info\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"edit\" />\n                                                                                </Button>\n\n                                                                                &nbsp;\n                                                                                <Button onClick={() => callDelete(row.id)} variant=\"outline-danger\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"bin\" />\n                                                                                </Button>\n\n                                                                            </>\n                                                                            : <>\n                                                                                {row[r.acessor]}\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </td>\n                                                        )\n                                                    })}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n\n                                </table>\n\n\n                                <PaginationTable\n                                    config={paginationConfig}\n                                    gotoPage={(page) => [changePaginationConfig('page', page)]}\n                                />\n\n                            </>\n                        }\n                    </Col>\n                </Row>\n                {/* DATA */}\n            </>\n        )\n    }\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required('Este campo é obrigatório'),\n    })\n\n    const formatOptionLabel = ({ value, label, customAbbreviation }) => (\n        <div style={{ display: \"flex\" }}>\n            <div>{label}</div>\n            <div style={{ marginLeft: \"10px\", color: \"#ccc\" }}>\n                <CsLineIcons icon={`${label}`} className=\"text-info\" size={20} />\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            {loading\n                ? <>\n                    <div className=\"align-items-center\">\n                        <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                        <div>Carregando...</div>\n                    </div>\n                </>\n                : <>\n                    {renderTable()}\n                </>\n            }\n\n            {/* MODAL NEW REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalNewRegister}\n                size='md'\n                centered\n                onHide={() => setModalNewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalNewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Novo cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            name: '',\n                            icon: '',\n                            default: false,\n                            color: ''\n                        }}\n                        validationSchema={validationSchema}\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/user_type`, values)\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalNewRegister(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\"tooltip-end-bottom mt-4\">\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Nome </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                    {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                </div>\n\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Icone </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={icons}\n                                        value={\n                                            icons.filter(option =>\n                                                option.label === values.icon)\n                                        }\n                                        onChange={e => setFieldValue('icon', e.label)}\n                                        formatOptionLabel={formatOptionLabel}\n                                    />\n                                    {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                </div>\n\n                                <div className=\"mb-4  form-group tooltip-end-top\">\n                                    <div className='label'> Cor </div>\n                                    <div className='d-flex justify-content-center align-items-center'>\n                                        <SketchPicker\n                                            color={values.color}\n                                            onChange={(e) => setFieldValue('color', e.hex)}\n                                        />\n                                    </div>\n                                </div>\n\n                                <label>\n                                    Este atributo será padrão? &nbsp;\n                                    <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                </label>\n\n                                <Alert variant='info' className='mt-4 mb-4'>\n                                    Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                </Alert>\n\n                                <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                    <Button\n                                        variant=\"success\"\n                                        type=\"submit\"\n                                        disabled={values.loading}\n                                    >\n                                        {values.loading\n                                            ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                            : <>Cadastrar</>\n                                        }\n                                    </Button>\n                                </div>\n                            </Form>\n                        )}\n                    </Formik>\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL NEW REGISTER */}\n\n            {/* MODAL EDIT REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalEditRegister}\n                size='md'\n                centered\n                onHide={() => setModalEditRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalEditRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Editar</h4>\n\n                    {loadingIdData\n                        ? <>\n                            <div className=\"align-items-center\">\n                                <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                                <div>Carregando...</div>\n                            </div>\n                        </>\n                        : <Formik\n                            initialValues={{\n                                name: idData.name,\n                                icon: idData.icon,\n                                default: idData.default ? idData.default : false,\n                                color: idData.color\n                            }}\n\n                            validationSchema={validationSchema}\n\n                            onSubmit={async (values, { resetForm }) => {\n                                try {\n                                    const response = await api.post(`/api/v1/private/user_type/${idEdit}`, values)\n\n                                    resetForm()\n\n                                    Swal.fire({\n                                        title: response.data.title,\n                                        text: response.data.message,\n                                        icon: 'success',\n                                        confirmButtonText: 'Fechar'\n                                    }).then((result) => {\n                                        setModalEditRegister(false)\n                                        loadData()\n                                    })\n                                } catch (error) {\n                                    Swal.fire({\n                                        title: error.response.data.title,\n                                        text: error.response.data.message,\n                                        icon: 'error',\n                                        confirmButtonText: 'Fechar'\n                                    })\n                                }\n                            }}\n                        >\n                            {({ values, errors, touched, setFieldValue }) => (\n                                <Form className=\"tooltip-end-bottom mt-4\">\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Nome </div>\n                                        <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                        {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                    </div>\n\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Icone </div>\n                                        <ReactSelect\n                                            placeholder=\"\"\n                                            classNamePrefix=\"react-select\"\n                                            options={icons}\n                                            value={\n                                                icons.filter(option =>\n                                                    option.label === values.icon)\n                                            }\n                                            onChange={e => setFieldValue('icon', e.label)}\n                                            formatOptionLabel={formatOptionLabel}\n                                        />\n                                        {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                    </div>\n\n                                    <div className=\"mb-4  form-group tooltip-end-top\">\n                                        <div className='label'> Cor </div>\n                                        <div className='d-flex justify-content-center align-items-center'>\n                                            <SketchPicker\n                                                color={values.color ? values.color : false}\n                                                onChange={(e) => setFieldValue('color', e.hex)}\n                                            />\n                                        </div>\n                                    </div>\n\n                                    <label>\n                                        Este atributo será padrão? &nbsp;\n                                        <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                    </label>\n\n                                    <Alert variant='info' className='mt-4 mb-4'>\n                                        Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                    </Alert>\n\n                                    <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                        <Button\n                                            variant=\"success\"\n                                            type=\"submit\"\n                                            disabled={values.loading}\n                                        >\n                                            {values.loading\n                                                ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                : <>Editar</>\n                                            }\n                                        </Button>\n                                    </div>\n                                </Form>\n                            )}\n                        </Formik>\n                    }\n\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL EDIT REGISTER */}\n        </>\n    );\n};\n\nexport default Component;\n","/Users/caio/Projects/Samples/front-vawlog/src/views/config/file_type.js",["1136","1137","1138","1139","1140","1141","1142","1143","1144"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport moment from 'moment';\nimport pt from 'date-fns/locale/pt';\nimport DatePicker from 'react-datepicker';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport PaginationTable from 'helpers/pagination';\nimport formatField from 'helpers/formatField';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2'\nimport { SketchPicker } from 'react-color';\nimport ReactSelect from 'react-select';\n\n\nconst Component = () => {\n    const title = 'Tipo de arquivo';\n    const description = 'Tipo de arquivo';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'config', text: 'Configurações' },\n        { to: 'file_type', text: 'Tipo de arquivo' },\n    ]\n\n    const columns = [\n        { name: 'Id', acessor: 'id', column: 'id' },\n        { name: 'Nome', acessor: 'name', column: 'name' },\n        { name: 'Cor', acessor: 'color', column: 'hint_home', format: 'color' },\n        { name: 'Icon', acessor: 'icon', column: 'fixture', format: 'icon' },\n        { name: 'Padrão', acessor: 'default', column: 'points', format: 'boolean' },\n        { name: 'Data', acessor: 'created_at', column: 'created_at' },\n        { name: '', acessor: 'custom', column: 'custom' },\n    ]\n\n\n    const [modalNewRegister, setModalNewRegister] = useState(false)\n    const [limit, setLimit] = useState(10)\n    const [loading, setLoading] = useState(true)\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [order, setOrder] = useState(false)\n    const [orderBy, setOrderBy] = useState('asc')\n    const [data, setData] = useState(false)\n    const [total, setTotal] = useState(false)\n    const [searchField, setSearchField] = useState('')\n    const [paginationConfig, setPaginationConfig] = useState({\n        page: 1\n    })\n\n    const [modalEditRegister, setModalEditRegister] = useState(false)\n    const [idEdit, setIdEdit] = useState(false)\n    const [loadingIdData, setLoadingIdData] = useState(false)\n    const [idData, setIdData] = useState(false)\n\n    const loadData = async (pageLimit, page) => {\n        document.body.classList.add('spinner')\n\n        pageLimit = limit\n\n        try {\n            let url = `/api/v1/private/file_type?order=${orderBy}&limit=${pageLimit}&page=${page}&search=${searchField}`\n\n            if (startDate && endDate) {\n                url += `&start=${moment(startDate).format('YYYY-MM-DD')}&end=${moment(endDate).format('YYYY-MM-DD')}`\n            }\n\n            if (order) {\n                url += `&order=${orderBy}&order_by=${order}`\n            }\n\n            const response = await api.get(url)\n\n            setData(response.data.data)\n            setTotal(response.data.total)\n\n            setPaginationConfig({\n                previousPage: response.data.data.prev_page_url,\n                page: response.data.data.current_page,\n                nextPage: response.data.data.next_page_url,\n                limit: pageLimit,\n                total: response.data.data.last_page,\n                lastPage: response.data.data.last_page\n            })\n\n        } catch (error) {\n            console.log(error)\n        }\n\n        document.body.classList.remove('spinner')\n\n        setLoading(false)\n    }\n\n    const [icons, setIcons] = useState([])\n\n    const getIcons = async () => {\n        try {\n            const response = await api.get(`/api/v1/private/icons`)\n\n            let array_icons = []\n\n            response.data.map((row) => {\n                array_icons.push({\n                    label: row.name,\n                    value: row.name\n                })\n            })\n\n            setIcons(array_icons)\n        } catch (error) {\n\n        }\n    }\n\n    useEffect(() => {\n        if (icons.length === 0) {\n            getIcons()\n        }\n    }, [])\n\n    const orderTable = (param) => {\n        setOrder(param)\n\n        if (orderBy === 'asc') {\n            setOrderBy('desc')\n        } else {\n            setOrderBy('asc')\n        }\n    }\n\n    const changePaginationConfig = async (param, value) => {\n        await setPaginationConfig({\n            ...paginationConfig, [param]: value\n        })\n    }\n\n    useEffect(() => {\n        if (!data) {\n            loadData(paginationConfig.limit, paginationConfig.page)\n        }\n    }, [paginationConfig.page])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [limit])\n\n    useEffect(() => {\n        if (data) {\n            if (startDate && endDate) {\n                loadData(limit, 1)\n            }\n        }\n    }, [endDate, startDate])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [order, orderBy])\n\n    const handleSearch = (e) => {\n        setSearchField(e.target.value)\n    }\n\n    const callLoadEditRegister = async () => {\n        setLoadingIdData(true)\n        try {\n            const response = await api.get(`/api/v1/private/file_type/${idEdit}`)\n\n            setIdData(response.data)\n        } catch (error) {\n\n        }\n        setLoadingIdData(false)\n    }\n\n    useEffect(() => {\n        if (modalEditRegister) {\n            if (idEdit) {\n                callLoadEditRegister()\n            }\n        }\n    }, [modalEditRegister])\n\n    const callEdit = (id) => {\n        setModalEditRegister(true)\n        setIdEdit(id)\n    }\n\n    const callDelete = async (id) => {\n        Swal.fire({\n            title: 'Tem certeza que deseja excluir este cadastro?',\n            showDenyButton: true,\n            showCancelButton: true,\n            showCancelButton: false,\n            confirmButtonText: 'Sim',\n            confirmButtonColor: '#80D946',\n            denyButtonText: `Não`,\n        }).then(async (result) => {\n            if (result.isConfirmed) {\n                try {\n                    const response = await api.delete(`/api/v1/private/file_type/${id}`)\n                    Swal.fire({\n                        title: response.data.title,\n                        text: response.data.message,\n                        icon: 'success',\n                        confirmButtonText: 'Fechar'\n                    }).then((result) => {\n                        loadData()\n                    })\n                } catch (error) {\n                    Swal.fire({\n                        title: error.response.data.title,\n                        text: error.response.data.message,\n                        icon: 'error',\n                        confirmButtonText: 'Fechar'\n                    })\n                }\n            }\n        })\n    }\n\n    const renderTable = () => {\n        return (\n            <>\n                <Row>\n                    <Col xs={12} xxl={12} className=\" d-flex justify-content-end align-items-end\">\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            disabled={loading}\n                            onClick={() => setModalNewRegister(true)}\n                        >\n                            Novo Cadastro <CsLineIcons icon=\"plus\" />\n                        </Button>\n                    </Col>\n                </Row>\n\n                {/* FILTERS */}\n                <Row>\n                    <Col xs={12} xxl={1} className=\"d-flex d-flex justify-content-end align-items-end\">\n                        <Dropdown\n                            align={{ xs: 'end' }}\n                            className=\"d-inline-block ms-1\"\n                            onSelect={(e) =>\n                                setLimit(e)\n                            }\n                        >\n                            <Dropdown.Toggle variant=\"foreground-alternate\" className=\"shadow\">\n                                {limit} Items\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu\n                                className=\"shadow dropdown-menu-end\"\n                            >\n                                <Dropdown.Item eventKey=\"5\">5 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"10\">10 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"20\">20 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"50\">50 Items</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n\n                    <Col xxl={4}>\n                        <Row className=\"g-2 w-100\">\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">De</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                />\n                            </Col>\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">Até</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={endDate}\n                                    onChange={(date) => setEndDate(date)}\n                                    selectsEnd\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                    minDate={startDate}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xxl={4}>\n                        &nbsp;\n                    </Col>\n                    <Col xs={12} xxl={3} className=\" d-flex justify-content-end align-items-end\">\n                        <InputGroup className=\"mt-2\"\n                            onChange={e => handleSearch(e)}\n                            onKeyDown={e => e.key === 'Enter' ? loadData(paginationConfig.limit, 1) : false}\n                        >\n                            <InputGroup.Text >\n                                <CsLineIcons icon=\"search\" />\n                            </InputGroup.Text>\n                            <FormControl placeholder=\"pesquisar...\" aria-label=\"Pesquisar\" aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                {/* FILTERS */}\n\n                {/* DATA */}\n                <Row className='mt-5'>\n                    <Col xs={12} xxl={12}>\n                        {data.length === 0\n                            ? <>\n                                <Row className=\"g-2 mb-5\">\n                                    <Col sm=\"12\" xxl=\"12\">\n                                        <Card className=\"sh-19\">\n                                            <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                                <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                                <p className=\"heading mb-0\">\n                                                    Ops! Nenhum resultado para essa consulta.\n                                                </p>\n\n                                                <p className=\"text-medium mb-0 text-muted\">\n                                                    Altere os filtros da consulta e tente novamente.\n                                                </p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </>\n                            : <>\n\n                                {total\n                                    ? <>\n                                        <Alert variant=\"info\">\n                                            Total de registros localizados: <strong>{total}</strong>\n                                        </Alert>\n                                    </>\n                                    : <></>\n                                }\n\n                                <table className=\"react-table rows\" >\n                                    <thead>\n                                        <tr>\n                                            {columns.map((row, index) => {\n                                                return (\n                                                    <th\n                                                        key={index}\n                                                        className={`text-muted text-small text-uppercase ${row.column ? 'cursor-pointer' : ''}`}\n                                                        onClick={() => row.column ? orderTable(row.column) : false}\n                                                    >\n                                                        <span className={`${order === row.column ? 'text-primary  font-weight-bold' : ''}`}>\n                                                            {row.name} &nbsp;\n\n                                                            {order === row.column\n                                                                ? <CsLineIcons size={10} icon={orderBy === 'asc' ? 'chevron-top' : 'chevron-bottom'} />\n                                                                : <></>\n                                                            }\n                                                        </span>\n                                                    </th>\n                                                )\n                                            })}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data.length > 0 && data.map((row, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    {columns.map((r, i) => {\n                                                        return (\n                                                            <td key={i}>\n\n                                                                {r.format ?\n                                                                    formatField(r.format, row[r.acessor], row)\n                                                                    : <>\n                                                                        {r.acessor === 'custom'\n                                                                            ? <>\n                                                                                <Button onClick={() => callEdit(row.id)} variant=\"outline-info\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"edit\" />\n                                                                                </Button>\n\n                                                                                &nbsp;\n                                                                                <Button onClick={() => callDelete(row.id)} variant=\"outline-danger\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"bin\" />\n                                                                                </Button>\n\n                                                                            </>\n                                                                            : <>\n                                                                                {row[r.acessor]}\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </td>\n                                                        )\n                                                    })}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n\n                                </table>\n\n\n                                <PaginationTable\n                                    config={paginationConfig}\n                                    gotoPage={(page) => [changePaginationConfig('page', page)]}\n                                />\n\n                            </>\n                        }\n                    </Col>\n                </Row>\n                {/* DATA */}\n            </>\n        )\n    }\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required('Este campo é obrigatório'),\n    })\n\n    const formatOptionLabel = ({ value, label, customAbbreviation }) => (\n        <div style={{ display: \"flex\" }}>\n            <div>{label}</div>\n            <div style={{ marginLeft: \"10px\", color: \"#ccc\" }}>\n                <CsLineIcons icon={`${label}`} className=\"text-info\" size={20} />\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            {loading\n                ? <>\n                    <div className=\"align-items-center\">\n                        <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                        <div>Carregando...</div>\n                    </div>\n                </>\n                : <>\n                    {renderTable()}\n                </>\n            }\n\n            {/* MODAL NEW REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalNewRegister}\n                size='md'\n                centered\n                onHide={() => setModalNewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalNewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Novo cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            name: '',\n                            icon: '',\n                            default: false,\n                            color: ''\n                        }}\n                        validationSchema={validationSchema}\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/file_type`, values)\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalNewRegister(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\"tooltip-end-bottom mt-4\">\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Nome </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                    {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                </div>\n\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Icone </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={icons}\n                                        value={\n                                            icons.filter(option =>\n                                                option.label === values.icon)\n                                        }\n                                        onChange={e => setFieldValue('icon', e.label)}\n                                        formatOptionLabel={formatOptionLabel}\n                                    />\n                                    {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                </div>\n\n                                <div className=\"mb-4  form-group tooltip-end-top\">\n                                    <div className='label'> Cor </div>\n                                    <div className='d-flex justify-content-center align-items-center'>\n                                        <SketchPicker\n                                            color={values.color}\n                                            onChange={(e) => setFieldValue('color', e.hex)}\n                                        />\n                                    </div>\n                                </div>\n\n                                <label>\n                                    Este atributo será padrão? &nbsp;\n                                    <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                </label>\n\n                                <Alert variant='info' className='mt-4 mb-4'>\n                                    Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                </Alert>\n\n                                <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                    <Button\n                                        variant=\"success\"\n                                        type=\"submit\"\n                                        disabled={values.loading}\n                                    >\n                                        {values.loading\n                                            ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                            : <>Cadastrar</>\n                                        }\n                                    </Button>\n                                </div>\n                            </Form>\n                        )}\n                    </Formik>\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL NEW REGISTER */}\n\n            {/* MODAL EDIT REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalEditRegister}\n                size='md'\n                centered\n                onHide={() => setModalEditRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalEditRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Editar</h4>\n\n                    {loadingIdData\n                        ? <>\n                            <div className=\"align-items-center\">\n                                <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                                <div>Carregando...</div>\n                            </div>\n                        </>\n                        : <Formik\n                            initialValues={{\n                                name: idData.name,\n                                icon: idData.icon,\n                                default: idData.default ? idData.default : false,\n                                color: idData.color\n                            }}\n\n                            validationSchema={validationSchema}\n\n                            onSubmit={async (values, { resetForm }) => {\n                                try {\n                                    const response = await api.post(`/api/v1/private/file_type/${idEdit}`, values)\n\n                                    resetForm()\n\n                                    Swal.fire({\n                                        title: response.data.title,\n                                        text: response.data.message,\n                                        icon: 'success',\n                                        confirmButtonText: 'Fechar'\n                                    }).then((result) => {\n                                        setModalEditRegister(false)\n                                        loadData()\n                                    })\n                                } catch (error) {\n                                    Swal.fire({\n                                        title: error.response.data.title,\n                                        text: error.response.data.message,\n                                        icon: 'error',\n                                        confirmButtonText: 'Fechar'\n                                    })\n                                }\n                            }}\n                        >\n                            {({ values, errors, touched, setFieldValue }) => (\n                                <Form className=\"tooltip-end-bottom mt-4\">\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Nome </div>\n                                        <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                        {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                    </div>\n\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Icone </div>\n                                        <ReactSelect\n                                            placeholder=\"\"\n                                            classNamePrefix=\"react-select\"\n                                            options={icons}\n                                            value={\n                                                icons.filter(option =>\n                                                    option.label === values.icon)\n                                            }\n                                            onChange={e => setFieldValue('icon', e.label)}\n                                            formatOptionLabel={formatOptionLabel}\n                                        />\n                                        {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                    </div>\n\n                                    <div className=\"mb-4  form-group tooltip-end-top\">\n                                        <div className='label'> Cor </div>\n                                        <div className='d-flex justify-content-center align-items-center'>\n                                            <SketchPicker\n                                                color={values.color ? values.color : false}\n                                                onChange={(e) => setFieldValue('color', e.hex)}\n                                            />\n                                        </div>\n                                    </div>\n\n                                    <label>\n                                        Este atributo será padrão? &nbsp;\n                                        <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                    </label>\n\n                                    <Alert variant='info' className='mt-4 mb-4'>\n                                        Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                    </Alert>\n\n                                    <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                        <Button\n                                            variant=\"success\"\n                                            type=\"submit\"\n                                            disabled={values.loading}\n                                        >\n                                            {values.loading\n                                                ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                : <>Editar</>\n                                            }\n                                        </Button>\n                                    </div>\n                                </Form>\n                            )}\n                        </Formik>\n                    }\n\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL EDIT REGISTER */}\n        </>\n    );\n};\n\nexport default Component;\n","/Users/caio/Projects/Samples/front-vawlog/src/views/vehicles/type.js",["1145","1146","1147","1148","1149","1150","1151","1152","1153"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport moment from 'moment';\nimport pt from 'date-fns/locale/pt';\nimport DatePicker from 'react-datepicker';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport PaginationTable from 'helpers/pagination';\nimport formatField from 'helpers/formatField';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2'\nimport { SketchPicker } from 'react-color';\nimport ReactSelect from 'react-select';\n\n\nconst Component = () => {\n    const title = 'Tipo de veículo';\n    const description = 'Tipo de veículo';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'list', text: 'Veículos' },\n        { to: 'vehicle_type', text: 'Tipo de veículo' },\n    ]\n\n    const columns = [\n        { name: 'Id', acessor: 'id', column: 'id' },\n        { name: 'Nome', acessor: 'name', column: 'name' },\n        { name: 'Cor', acessor: 'color', column: 'hint_home', format: 'color' },\n        { name: 'Icon', acessor: 'icon', column: 'fixture', format: 'icon' },\n        { name: 'Padrão', acessor: 'default', column: 'points', format: 'boolean' },\n        { name: 'Data', acessor: 'created_at', column: 'created_at' },\n        { name: '', acessor: 'custom', column: 'custom' },\n    ]\n\n\n    const [modalNewRegister, setModalNewRegister] = useState(false)\n    const [limit, setLimit] = useState(10)\n    const [loading, setLoading] = useState(true)\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [order, setOrder] = useState(false)\n    const [orderBy, setOrderBy] = useState('asc')\n    const [data, setData] = useState(false)\n    const [total, setTotal] = useState(false)\n    const [searchField, setSearchField] = useState('')\n    const [paginationConfig, setPaginationConfig] = useState({\n        page: 1\n    })\n\n    const [modalEditRegister, setModalEditRegister] = useState(false)\n    const [idEdit, setIdEdit] = useState(false)\n    const [loadingIdData, setLoadingIdData] = useState(false)\n    const [idData, setIdData] = useState(false)\n\n    const loadData = async (pageLimit, page) => {\n        document.body.classList.add('spinner')\n\n        pageLimit = limit\n\n        try {\n            let url = `/api/v1/private/vehicle_type?order=${orderBy}&limit=${pageLimit}&page=${page}&search=${searchField}`\n\n            if (startDate && endDate) {\n                url += `&start=${moment(startDate).format('YYYY-MM-DD')}&end=${moment(endDate).format('YYYY-MM-DD')}`\n            }\n\n            if (order) {\n                url += `&order=${orderBy}&order_by=${order}`\n            }\n\n            const response = await api.get(url)\n\n            setData(response.data.data)\n            setTotal(response.data.total)\n\n            setPaginationConfig({\n                previousPage: response.data.data.prev_page_url,\n                page: response.data.data.current_page,\n                nextPage: response.data.data.next_page_url,\n                limit: pageLimit,\n                total: response.data.data.last_page,\n                lastPage: response.data.data.last_page\n            })\n\n        } catch (error) {\n            console.log(error)\n        }\n\n        document.body.classList.remove('spinner')\n\n        setLoading(false)\n    }\n\n    const [icons, setIcons] = useState([])\n\n    const getIcons = async () => {\n        try {\n            const response = await api.get(`/api/v1/private/icons`)\n\n            let array_icons = []\n\n            response.data.map((row) => {\n                array_icons.push({\n                    label: row.name,\n                    value: row.name\n                })\n            })\n\n            setIcons(array_icons)\n        } catch (error) {\n\n        }\n    }\n\n    useEffect(() => {\n        if (icons.length === 0) {\n            getIcons()\n        }\n    }, [])\n\n    const orderTable = (param) => {\n        setOrder(param)\n\n        if (orderBy === 'asc') {\n            setOrderBy('desc')\n        } else {\n            setOrderBy('asc')\n        }\n    }\n\n    const changePaginationConfig = async (param, value) => {\n        await setPaginationConfig({\n            ...paginationConfig, [param]: value\n        })\n    }\n\n    useEffect(() => {\n        if (!data) {\n            loadData(paginationConfig.limit, paginationConfig.page)\n        }\n    }, [paginationConfig.page])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [limit])\n\n    useEffect(() => {\n        if (data) {\n            if (startDate && endDate) {\n                loadData(limit, 1)\n            }\n        }\n    }, [endDate, startDate])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [order, orderBy])\n\n    const handleSearch = (e) => {\n        setSearchField(e.target.value)\n    }\n\n    const callLoadEditRegister = async () => {\n        setLoadingIdData(true)\n        try {\n            const response = await api.get(`/api/v1/private/vehicle_type/${idEdit}`)\n\n            setIdData(response.data)\n        } catch (error) {\n\n        }\n        setLoadingIdData(false)\n    }\n\n    useEffect(() => {\n        if (modalEditRegister) {\n            if (idEdit) {\n                callLoadEditRegister()\n            }\n        }\n    }, [modalEditRegister])\n\n    const callEdit = (id) => {\n        setModalEditRegister(true)\n        setIdEdit(id)\n    }\n\n    const callDelete = async (id) => {\n        Swal.fire({\n            title: 'Tem certeza que deseja excluir este cadastro?',\n            showDenyButton: true,\n            showCancelButton: true,\n            showCancelButton: false,\n            confirmButtonText: 'Sim',\n            confirmButtonColor: '#80D946',\n            denyButtonText: `Não`,\n        }).then(async (result) => {\n            if (result.isConfirmed) {\n                try {\n                    const response = await api.delete(`/api/v1/private/vehicle_type/${id}`)\n                    Swal.fire({\n                        title: response.data.title,\n                        text: response.data.message,\n                        icon: 'success',\n                        confirmButtonText: 'Fechar'\n                    }).then((result) => {\n                        loadData()\n                    })\n                } catch (error) {\n                    Swal.fire({\n                        title: error.response.data.title,\n                        text: error.response.data.message,\n                        icon: 'error',\n                        confirmButtonText: 'Fechar'\n                    })\n                }\n            }\n        })\n    }\n\n    const renderTable = () => {\n        return (\n            <>\n                <Row>\n                    <Col xs={12} xxl={12} className=\" d-flex justify-content-end align-items-end\">\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            disabled={loading}\n                            onClick={() => setModalNewRegister(true)}\n                        >\n                            Novo Cadastro <CsLineIcons icon=\"plus\" />\n                        </Button>\n                    </Col>\n                </Row>\n\n                {/* FILTERS */}\n                <Row>\n                    <Col xs={12} xxl={1} className=\"d-flex d-flex justify-content-end align-items-end\">\n                        <Dropdown\n                            align={{ xs: 'end' }}\n                            className=\"d-inline-block ms-1\"\n                            onSelect={(e) =>\n                                setLimit(e)\n                            }\n                        >\n                            <Dropdown.Toggle variant=\"foreground-alternate\" className=\"shadow\">\n                                {limit} Items\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu\n                                className=\"shadow dropdown-menu-end\"\n                            >\n                                <Dropdown.Item eventKey=\"5\">5 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"10\">10 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"20\">20 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"50\">50 Items</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n\n                    <Col xxl={4}>\n                        <Row className=\"g-2 w-100\">\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">De</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                />\n                            </Col>\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">Até</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={endDate}\n                                    onChange={(date) => setEndDate(date)}\n                                    selectsEnd\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                    minDate={startDate}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xxl={4}>\n                        &nbsp;\n                    </Col>\n                    <Col xs={12} xxl={3} className=\" d-flex justify-content-end align-items-end\">\n                        <InputGroup className=\"mt-2\"\n                            onChange={e => handleSearch(e)}\n                            onKeyDown={e => e.key === 'Enter' ? loadData(paginationConfig.limit, 1) : false}\n                        >\n                            <InputGroup.Text >\n                                <CsLineIcons icon=\"search\" />\n                            </InputGroup.Text>\n                            <FormControl placeholder=\"pesquisar...\" aria-label=\"Pesquisar\" aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                {/* FILTERS */}\n\n                {/* DATA */}\n                <Row className='mt-5'>\n                    <Col xs={12} xxl={12}>\n                        {data.length === 0\n                            ? <>\n                                <Row className=\"g-2 mb-5\">\n                                    <Col sm=\"12\" xxl=\"12\">\n                                        <Card className=\"sh-19\">\n                                            <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                                <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                                <p className=\"heading mb-0\">\n                                                    Ops! Nenhum resultado para essa consulta.\n                                                </p>\n\n                                                <p className=\"text-medium mb-0 text-muted\">\n                                                    Altere os filtros da consulta e tente novamente.\n                                                </p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </>\n                            : <>\n\n                                {total\n                                    ? <>\n                                        <Alert variant=\"info\">\n                                            Total de registros localizados: <strong>{total}</strong>\n                                        </Alert>\n                                    </>\n                                    : <></>\n                                }\n\n                                <table className=\"react-table rows\" >\n                                    <thead>\n                                        <tr>\n                                            {columns.map((row, index) => {\n                                                return (\n                                                    <th\n                                                        key={index}\n                                                        className={`text-muted text-small text-uppercase ${row.column ? 'cursor-pointer' : ''}`}\n                                                        onClick={() => row.column ? orderTable(row.column) : false}\n                                                    >\n                                                        <span className={`${order === row.column ? 'text-primary  font-weight-bold' : ''}`}>\n                                                            {row.name} &nbsp;\n\n                                                            {order === row.column\n                                                                ? <CsLineIcons size={10} icon={orderBy === 'asc' ? 'chevron-top' : 'chevron-bottom'} />\n                                                                : <></>\n                                                            }\n                                                        </span>\n                                                    </th>\n                                                )\n                                            })}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data.length > 0 && data.map((row, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    {columns.map((r, i) => {\n                                                        return (\n                                                            <td key={i}>\n\n                                                                {r.format ?\n                                                                    formatField(r.format, row[r.acessor], row)\n                                                                    : <>\n                                                                        {r.acessor === 'custom'\n                                                                            ? <>\n                                                                                <Button onClick={() => callEdit(row.id)} variant=\"outline-info\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"edit\" />\n                                                                                </Button>\n\n                                                                                &nbsp;\n                                                                                <Button onClick={() => callDelete(row.id)} variant=\"outline-danger\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"bin\" />\n                                                                                </Button>\n\n                                                                            </>\n                                                                            : <>\n                                                                                {row[r.acessor]}\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </td>\n                                                        )\n                                                    })}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n\n                                </table>\n\n\n                                <PaginationTable\n                                    config={paginationConfig}\n                                    gotoPage={(page) => [changePaginationConfig('page', page)]}\n                                />\n\n                            </>\n                        }\n                    </Col>\n                </Row>\n                {/* DATA */}\n            </>\n        )\n    }\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required('Este campo é obrigatório'),\n    })\n\n    const formatOptionLabel = ({ value, label, customAbbreviation }) => (\n        <div style={{ display: \"flex\" }}>\n            <div>{label}</div>\n            <div style={{ marginLeft: \"10px\", color: \"#ccc\" }}>\n                <CsLineIcons icon={`${label}`} className=\"text-info\" size={20} />\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            {loading\n                ? <>\n                    <div className=\"align-items-center\">\n                        <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                        <div>Carregando...</div>\n                    </div>\n                </>\n                : <>\n                    {renderTable()}\n                </>\n            }\n\n            {/* MODAL NEW REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalNewRegister}\n                size='md'\n                centered\n                onHide={() => setModalNewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalNewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Novo cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            name: '',\n                            icon: '',\n                            default: false,\n                            color: ''\n                        }}\n                        validationSchema={validationSchema}\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/vehicle_type`, values)\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalNewRegister(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\"tooltip-end-bottom mt-4\">\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Nome </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                    {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                </div>\n\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Icone </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={icons}\n                                        value={\n                                            icons.filter(option =>\n                                                option.label === values.icon)\n                                        }\n                                        onChange={e => setFieldValue('icon', e.label)}\n                                        formatOptionLabel={formatOptionLabel}\n                                    />\n                                    {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                </div>\n\n                                <div className=\"mb-4  form-group tooltip-end-top\">\n                                    <div className='label'> Cor </div>\n                                    <div className='d-flex justify-content-center align-items-center'>\n                                        <SketchPicker\n                                            color={values.color}\n                                            onChange={(e) => setFieldValue('color', e.hex)}\n                                        />\n                                    </div>\n                                </div>\n\n                                <label>\n                                    Este atributo será padrão? &nbsp;\n                                    <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                </label>\n\n                                <Alert variant='info' className='mt-4 mb-4'>\n                                    Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                </Alert>\n\n                                <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                    <Button\n                                        variant=\"success\"\n                                        type=\"submit\"\n                                        disabled={values.loading}\n                                    >\n                                        {values.loading\n                                            ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                            : <>Cadastrar</>\n                                        }\n                                    </Button>\n                                </div>\n                            </Form>\n                        )}\n                    </Formik>\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL NEW REGISTER */}\n\n            {/* MODAL EDIT REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalEditRegister}\n                size='md'\n                centered\n                onHide={() => setModalEditRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalEditRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Editar</h4>\n\n                    {loadingIdData\n                        ? <>\n                            <div className=\"align-items-center\">\n                                <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                                <div>Carregando...</div>\n                            </div>\n                        </>\n                        : <Formik\n                            initialValues={{\n                                name: idData.name,\n                                icon: idData.icon,\n                                default: idData.default ? idData.default : false,\n                                color: idData.color\n                            }}\n\n                            validationSchema={validationSchema}\n\n                            onSubmit={async (values, { resetForm }) => {\n                                try {\n                                    const response = await api.post(`/api/v1/private/vehicle_type/${idEdit}`, values)\n\n                                    resetForm()\n\n                                    Swal.fire({\n                                        title: response.data.title,\n                                        text: response.data.message,\n                                        icon: 'success',\n                                        confirmButtonText: 'Fechar'\n                                    }).then((result) => {\n                                        setModalEditRegister(false)\n                                        loadData()\n                                    })\n                                } catch (error) {\n                                    Swal.fire({\n                                        title: error.response.data.title,\n                                        text: error.response.data.message,\n                                        icon: 'error',\n                                        confirmButtonText: 'Fechar'\n                                    })\n                                }\n                            }}\n                        >\n                            {({ values, errors, touched, setFieldValue }) => (\n                                <Form className=\"tooltip-end-bottom mt-4\">\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Nome </div>\n                                        <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                        {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                    </div>\n\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Icone </div>\n                                        <ReactSelect\n                                            placeholder=\"\"\n                                            classNamePrefix=\"react-select\"\n                                            options={icons}\n                                            value={\n                                                icons.filter(option =>\n                                                    option.label === values.icon)\n                                            }\n                                            onChange={e => setFieldValue('icon', e.label)}\n                                            formatOptionLabel={formatOptionLabel}\n                                        />\n\n                                        {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                    </div>\n\n                                    <div className=\"mb-4  form-group tooltip-end-top\">\n                                        <div className='label'> Cor </div>\n                                        <div className='d-flex justify-content-center align-items-center'>\n                                            <SketchPicker\n                                                color={values.color ? values.color : false}\n                                                onChange={(e) => setFieldValue('color', e.hex)}\n                                            />\n                                        </div>\n                                    </div>\n\n                                    <label>\n                                        Este atributo será padrão? &nbsp;\n                                        <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                    </label>\n\n                                    <Alert variant='info' className='mt-4 mb-4'>\n                                        Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                    </Alert>\n\n                                    <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                        <Button\n                                            variant=\"success\"\n                                            type=\"submit\"\n                                            disabled={values.loading}\n                                        >\n                                            {values.loading\n                                                ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                : <>Editar</>\n                                            }\n                                        </Button>\n                                    </div>\n                                </Form>\n                            )}\n                        </Formik>\n                    }\n\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL EDIT REGISTER */}\n        </>\n    );\n};\n\nexport default Component;\n","/Users/caio/Projects/Samples/front-vawlog/src/views/vehicles/status.js",["1154","1155","1156","1157","1158","1159","1160","1161","1162"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport moment from 'moment';\nimport pt from 'date-fns/locale/pt';\nimport DatePicker from 'react-datepicker';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport PaginationTable from 'helpers/pagination';\nimport formatField from 'helpers/formatField';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2'\nimport { SketchPicker } from 'react-color';\nimport ReactSelect from 'react-select';\n\n\nconst Component = () => {\n    const title = 'Status do veículo';\n    const description = 'Status do veículo';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'list', text: 'Veículos' },\n        { to: 'vehicle_status', text: 'Status do veículo' },\n    ]\n\n    const columns = [\n        { name: 'Id', acessor: 'id', column: 'id' },\n        { name: 'Nome', acessor: 'name', column: 'name' },\n        { name: 'Cor', acessor: 'color', column: 'hint_home', format: 'color' },\n        { name: 'Icon', acessor: 'icon', column: 'fixture', format: 'icon' },\n        { name: 'Padrão', acessor: 'default', column: 'points', format: 'boolean' },\n        { name: 'Data', acessor: 'created_at', column: 'created_at' },\n        { name: '', acessor: 'custom', column: 'custom' },\n    ]\n\n\n    const [modalNewRegister, setModalNewRegister] = useState(false)\n    const [limit, setLimit] = useState(10)\n    const [loading, setLoading] = useState(true)\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [order, setOrder] = useState(false)\n    const [orderBy, setOrderBy] = useState('asc')\n    const [data, setData] = useState(false)\n    const [total, setTotal] = useState(false)\n    const [searchField, setSearchField] = useState('')\n    const [paginationConfig, setPaginationConfig] = useState({\n        page: 1\n    })\n\n    const [modalEditRegister, setModalEditRegister] = useState(false)\n    const [idEdit, setIdEdit] = useState(false)\n    const [loadingIdData, setLoadingIdData] = useState(false)\n    const [idData, setIdData] = useState(false)\n\n    const loadData = async (pageLimit, page) => {\n        document.body.classList.add('spinner')\n\n        pageLimit = limit\n\n        try {\n            let url = `/api/v1/private/vehicle_status?order=${orderBy}&limit=${pageLimit}&page=${page}&search=${searchField}`\n\n            if (startDate && endDate) {\n                url += `&start=${moment(startDate).format('YYYY-MM-DD')}&end=${moment(endDate).format('YYYY-MM-DD')}`\n            }\n\n            if (order) {\n                url += `&order=${orderBy}&order_by=${order}`\n            }\n\n            const response = await api.get(url)\n\n            setData(response.data.data)\n            setTotal(response.data.total)\n\n            setPaginationConfig({\n                previousPage: response.data.data.prev_page_url,\n                page: response.data.data.current_page,\n                nextPage: response.data.data.next_page_url,\n                limit: pageLimit,\n                total: response.data.data.last_page,\n                lastPage: response.data.data.last_page\n            })\n\n        } catch (error) {\n            console.log(error)\n        }\n\n        document.body.classList.remove('spinner')\n\n        setLoading(false)\n    }\n\n    const [icons, setIcons] = useState([])\n\n    const getIcons = async () => {\n        try {\n            const response = await api.get(`/api/v1/private/icons`)\n\n            let array_icons = []\n\n            response.data.map((row) => {\n                array_icons.push({\n                    label: row.name,\n                    value: row.name\n                })\n            })\n\n            setIcons(array_icons)\n        } catch (error) {\n\n        }\n    }\n\n    useEffect(() => {\n        if (icons.length === 0) {\n            getIcons()\n        }\n    }, [])\n\n    const orderTable = (param) => {\n        setOrder(param)\n\n        if (orderBy === 'asc') {\n            setOrderBy('desc')\n        } else {\n            setOrderBy('asc')\n        }\n    }\n\n    const changePaginationConfig = async (param, value) => {\n        await setPaginationConfig({\n            ...paginationConfig, [param]: value\n        })\n    }\n\n    useEffect(() => {\n        if (!data) {\n            loadData(paginationConfig.limit, paginationConfig.page)\n        }\n    }, [paginationConfig.page])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [limit])\n\n    useEffect(() => {\n        if (data) {\n            if (startDate && endDate) {\n                loadData(limit, 1)\n            }\n        }\n    }, [endDate, startDate])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [order, orderBy])\n\n    const handleSearch = (e) => {\n        setSearchField(e.target.value)\n    }\n\n    const callLoadEditRegister = async () => {\n        setLoadingIdData(true)\n        try {\n            const response = await api.get(`/api/v1/private/vehicle_status/${idEdit}`)\n\n            setIdData(response.data)\n        } catch (error) {\n\n        }\n        setLoadingIdData(false)\n    }\n\n    useEffect(() => {\n        if (modalEditRegister) {\n            if (idEdit) {\n                callLoadEditRegister()\n            }\n        }\n    }, [modalEditRegister])\n\n    const callEdit = (id) => {\n        setModalEditRegister(true)\n        setIdEdit(id)\n    }\n\n    const callDelete = async (id) => {\n        Swal.fire({\n            title: 'Tem certeza que deseja excluir este cadastro?',\n            showDenyButton: true,\n            showCancelButton: true,\n            showCancelButton: false,\n            confirmButtonText: 'Sim',\n            confirmButtonColor: '#80D946',\n            denyButtonText: `Não`,\n        }).then(async (result) => {\n            if (result.isConfirmed) {\n                try {\n                    const response = await api.delete(`/api/v1/private/vehicle_status/${id}`)\n                    Swal.fire({\n                        title: response.data.title,\n                        text: response.data.message,\n                        icon: 'success',\n                        confirmButtonText: 'Fechar'\n                    }).then((result) => {\n                        loadData()\n                    })\n                } catch (error) {\n                    Swal.fire({\n                        title: error.response.data.title,\n                        text: error.response.data.message,\n                        icon: 'error',\n                        confirmButtonText: 'Fechar'\n                    })\n                }\n            }\n        })\n    }\n\n    const renderTable = () => {\n        return (\n            <>\n                <Row>\n                    <Col xs={12} xxl={12} className=\" d-flex justify-content-end align-items-end\">\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            disabled={loading}\n                            onClick={() => setModalNewRegister(true)}\n                        >\n                            Novo Cadastro <CsLineIcons icon=\"plus\" />\n                        </Button>\n                    </Col>\n                </Row>\n\n                {/* FILTERS */}\n                <Row>\n                    <Col xs={12} xxl={1} className=\"d-flex d-flex justify-content-end align-items-end\">\n                        <Dropdown\n                            align={{ xs: 'end' }}\n                            className=\"d-inline-block ms-1\"\n                            onSelect={(e) =>\n                                setLimit(e)\n                            }\n                        >\n                            <Dropdown.Toggle variant=\"foreground-alternate\" className=\"shadow\">\n                                {limit} Items\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu\n                                className=\"shadow dropdown-menu-end\"\n                            >\n                                <Dropdown.Item eventKey=\"5\">5 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"10\">10 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"20\">20 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"50\">50 Items</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n\n                    <Col xxl={4}>\n                        <Row className=\"g-2 w-100\">\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">De</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                />\n                            </Col>\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">Até</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={endDate}\n                                    onChange={(date) => setEndDate(date)}\n                                    selectsEnd\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                    minDate={startDate}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xxl={4}>\n                        &nbsp;\n                    </Col>\n                    <Col xs={12} xxl={3} className=\" d-flex justify-content-end align-items-end\">\n                        <InputGroup className=\"mt-2\"\n                            onChange={e => handleSearch(e)}\n                            onKeyDown={e => e.key === 'Enter' ? loadData(paginationConfig.limit, 1) : false}\n                        >\n                            <InputGroup.Text >\n                                <CsLineIcons icon=\"search\" />\n                            </InputGroup.Text>\n                            <FormControl placeholder=\"pesquisar...\" aria-label=\"Pesquisar\" aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                {/* FILTERS */}\n\n                {/* DATA */}\n                <Row className='mt-5'>\n                    <Col xs={12} xxl={12}>\n                        {data.length === 0\n                            ? <>\n                                <Row className=\"g-2 mb-5\">\n                                    <Col sm=\"12\" xxl=\"12\">\n                                        <Card className=\"sh-19\">\n                                            <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                                <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                                <p className=\"heading mb-0\">\n                                                    Ops! Nenhum resultado para essa consulta.\n                                                </p>\n\n                                                <p className=\"text-medium mb-0 text-muted\">\n                                                    Altere os filtros da consulta e tente novamente.\n                                                </p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </>\n                            : <>\n\n                                {total\n                                    ? <>\n                                        <Alert variant=\"info\">\n                                            Total de registros localizados: <strong>{total}</strong>\n                                        </Alert>\n                                    </>\n                                    : <></>\n                                }\n\n                                <table className=\"react-table rows\" >\n                                    <thead>\n                                        <tr>\n                                            {columns.map((row, index) => {\n                                                return (\n                                                    <th\n                                                        key={index}\n                                                        className={`text-muted text-small text-uppercase ${row.column ? 'cursor-pointer' : ''}`}\n                                                        onClick={() => row.column ? orderTable(row.column) : false}\n                                                    >\n                                                        <span className={`${order === row.column ? 'text-primary  font-weight-bold' : ''}`}>\n                                                            {row.name} &nbsp;\n\n                                                            {order === row.column\n                                                                ? <CsLineIcons size={10} icon={orderBy === 'asc' ? 'chevron-top' : 'chevron-bottom'} />\n                                                                : <></>\n                                                            }\n                                                        </span>\n                                                    </th>\n                                                )\n                                            })}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data.length > 0 && data.map((row, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    {columns.map((r, i) => {\n                                                        return (\n                                                            <td key={i}>\n\n                                                                {r.format ?\n                                                                    formatField(r.format, row[r.acessor], row)\n                                                                    : <>\n                                                                        {r.acessor === 'custom'\n                                                                            ? <>\n                                                                                <Button onClick={() => callEdit(row.id)} variant=\"outline-info\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"edit\" />\n                                                                                </Button>\n\n                                                                                &nbsp;\n                                                                                <Button onClick={() => callDelete(row.id)} variant=\"outline-danger\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"bin\" />\n                                                                                </Button>\n\n                                                                            </>\n                                                                            : <>\n                                                                                {row[r.acessor]}\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </td>\n                                                        )\n                                                    })}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n\n                                </table>\n\n\n                                <PaginationTable\n                                    config={paginationConfig}\n                                    gotoPage={(page) => [changePaginationConfig('page', page)]}\n                                />\n\n                            </>\n                        }\n                    </Col>\n                </Row>\n                {/* DATA */}\n            </>\n        )\n    }\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required('Este campo é obrigatório'),\n    })\n\n    const formatOptionLabel = ({ value, label, customAbbreviation }) => (\n        <div style={{ display: \"flex\" }}>\n            <div>{label}</div>\n            <div style={{ marginLeft: \"10px\", color: \"#ccc\" }}>\n                <CsLineIcons icon={`${label}`} className=\"text-info\" size={20} />\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            {loading\n                ? <>\n                    <div className=\"align-items-center\">\n                        <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                        <div>Carregando...</div>\n                    </div>\n                </>\n                : <>\n                    {renderTable()}\n                </>\n            }\n\n            {/* MODAL NEW REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalNewRegister}\n                size='md'\n                centered\n                onHide={() => setModalNewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalNewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Novo cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            name: '',\n                            icon: '',\n                            default: false,\n                            color: ''\n                        }}\n                        validationSchema={validationSchema}\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/vehicle_status`, values)\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalNewRegister(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\"tooltip-end-bottom mt-4\">\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Nome </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                    {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                </div>\n\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Icone </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={icons}\n                                        value={\n                                            icons.filter(option =>\n                                                option.label === values.icon)\n                                        }\n                                        onChange={e => setFieldValue('icon', e.label)}\n                                        formatOptionLabel={formatOptionLabel}\n                                    />\n                                    {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                </div>\n\n                                <div className=\"mb-4  form-group tooltip-end-top\">\n                                    <div className='label'> Cor </div>\n                                    <div className='d-flex justify-content-center align-items-center'>\n                                        <SketchPicker\n                                            color={values.color}\n                                            onChange={(e) => setFieldValue('color', e.hex)}\n                                        />\n                                    </div>\n                                </div>\n\n                                <label>\n                                    Este atributo será padrão? &nbsp;\n                                    <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                </label>\n\n                                <Alert variant='info' className='mt-4 mb-4'>\n                                    Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                </Alert>\n\n                                <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                    <Button\n                                        variant=\"success\"\n                                        type=\"submit\"\n                                        disabled={values.loading}\n                                    >\n                                        {values.loading\n                                            ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                            : <>Cadastrar</>\n                                        }\n                                    </Button>\n                                </div>\n                            </Form>\n                        )}\n                    </Formik>\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL NEW REGISTER */}\n\n            {/* MODAL EDIT REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalEditRegister}\n                size='md'\n                centered\n                onHide={() => setModalEditRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalEditRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Editar</h4>\n\n                    {loadingIdData\n                        ? <>\n                            <div className=\"align-items-center\">\n                                <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                                <div>Carregando...</div>\n                            </div>\n                        </>\n                        : <Formik\n                            initialValues={{\n                                name: idData.name,\n                                icon: idData.icon,\n                                default: idData.default ? idData.default : false,\n                                color: idData.color\n                            }}\n\n                            validationSchema={validationSchema}\n\n                            onSubmit={async (values, { resetForm }) => {\n                                try {\n                                    const response = await api.post(`/api/v1/private/vehicle_status/${idEdit}`, values)\n\n                                    resetForm()\n\n                                    Swal.fire({\n                                        title: response.data.title,\n                                        text: response.data.message,\n                                        icon: 'success',\n                                        confirmButtonText: 'Fechar'\n                                    }).then((result) => {\n                                        setModalEditRegister(false)\n                                        loadData()\n                                    })\n                                } catch (error) {\n                                    Swal.fire({\n                                        title: error.response.data.title,\n                                        text: error.response.data.message,\n                                        icon: 'error',\n                                        confirmButtonText: 'Fechar'\n                                    })\n                                }\n                            }}\n                        >\n                            {({ values, errors, touched, setFieldValue }) => (\n                                <Form className=\"tooltip-end-bottom mt-4\">\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Nome </div>\n                                        <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                        {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                    </div>\n\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Icone </div>\n                                        <ReactSelect\n                                            placeholder=\"\"\n                                            classNamePrefix=\"react-select\"\n                                            options={icons}\n                                            value={\n                                                icons.filter(option =>\n                                                    option.label === values.icon)\n                                            }\n                                            onChange={e => setFieldValue('icon', e.label)}\n                                            formatOptionLabel={formatOptionLabel}\n                                        />\n                                        {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                    </div>\n\n                                    <div className=\"mb-4  form-group tooltip-end-top\">\n                                        <div className='label'> Cor </div>\n                                        <div className='d-flex justify-content-center align-items-center'>\n                                            <SketchPicker\n                                                color={values.color ? values.color : false}\n                                                onChange={(e) => setFieldValue('color', e.hex)}\n                                            />\n                                        </div>\n                                    </div>\n\n                                    <label>\n                                        Este atributo será padrão? &nbsp;\n                                        <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                    </label>\n\n                                    <Alert variant='info' className='mt-4 mb-4'>\n                                        Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                    </Alert>\n\n                                    <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                        <Button\n                                            variant=\"success\"\n                                            type=\"submit\"\n                                            disabled={values.loading}\n                                        >\n                                            {values.loading\n                                                ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                : <>Editar</>\n                                            }\n                                        </Button>\n                                    </div>\n                                </Form>\n                            )}\n                        </Formik>\n                    }\n\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL EDIT REGISTER */}\n        </>\n    );\n};\n\nexport default Component;\n","/Users/caio/Projects/Samples/front-vawlog/src/views/config/document_type.js",["1163","1164","1165","1166","1167","1168","1169","1170","1171"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport moment from 'moment';\nimport pt from 'date-fns/locale/pt';\nimport DatePicker from 'react-datepicker';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport PaginationTable from 'helpers/pagination';\nimport formatField from 'helpers/formatField';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2'\nimport { SketchPicker } from 'react-color';\nimport ReactSelect from 'react-select';\n\n\nconst Component = () => {\n    const title = 'Tipo de documento';\n    const description = 'Tipo de documento';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'config', text: 'Configurações' },\n        { to: 'document_type', text: 'Tipo de documento' },\n    ]\n\n    const columns = [\n        { name: 'Id', acessor: 'id', column: 'id' },\n        { name: 'Nome', acessor: 'name', column: 'name' },\n        { name: 'Cor', acessor: 'color', column: 'hint_home', format: 'color' },\n        { name: 'Icon', acessor: 'icon', column: 'fixture', format: 'icon' },\n        { name: 'Padrão', acessor: 'default', column: 'points', format: 'boolean' },\n        { name: 'Data', acessor: 'created_at', column: 'created_at' },\n        { name: '', acessor: 'custom', column: 'custom' },\n    ]\n\n\n    const [modalNewRegister, setModalNewRegister] = useState(false)\n    const [limit, setLimit] = useState(10)\n    const [loading, setLoading] = useState(true)\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [order, setOrder] = useState(false)\n    const [orderBy, setOrderBy] = useState('asc')\n    const [data, setData] = useState(false)\n    const [total, setTotal] = useState(false)\n    const [searchField, setSearchField] = useState('')\n    const [paginationConfig, setPaginationConfig] = useState({\n        page: 1\n    })\n\n    const [modalEditRegister, setModalEditRegister] = useState(false)\n    const [idEdit, setIdEdit] = useState(false)\n    const [loadingIdData, setLoadingIdData] = useState(false)\n    const [idData, setIdData] = useState(false)\n\n    const loadData = async (pageLimit, page) => {\n        document.body.classList.add('spinner')\n\n        pageLimit = limit\n\n        try {\n            let url = `/api/v1/private/document_type?order=${orderBy}&limit=${pageLimit}&page=${page}&search=${searchField}`\n\n            if (startDate && endDate) {\n                url += `&start=${moment(startDate).format('YYYY-MM-DD')}&end=${moment(endDate).format('YYYY-MM-DD')}`\n            }\n\n            if (order) {\n                url += `&order=${orderBy}&order_by=${order}`\n            }\n\n            const response = await api.get(url)\n\n            setData(response.data.data)\n            setTotal(response.data.total)\n\n            setPaginationConfig({\n                previousPage: response.data.data.prev_page_url,\n                page: response.data.data.current_page,\n                nextPage: response.data.data.next_page_url,\n                limit: pageLimit,\n                total: response.data.data.last_page,\n                lastPage: response.data.data.last_page\n            })\n\n        } catch (error) {\n            console.log(error)\n        }\n\n        document.body.classList.remove('spinner')\n\n        setLoading(false)\n    }\n\n    const [icons, setIcons] = useState([])\n\n    const getIcons = async () => {\n        try {\n            const response = await api.get(`/api/v1/private/icons`)\n\n            let array_icons = []\n\n            response.data.map((row) => {\n                array_icons.push({\n                    label: row.name,\n                    value: row.name\n                })\n            })\n\n            setIcons(array_icons)\n        } catch (error) {\n\n        }\n    }\n\n    useEffect(() => {\n        if (icons.length === 0) {\n            getIcons()\n        }\n    }, [])\n\n    const orderTable = (param) => {\n        setOrder(param)\n\n        if (orderBy === 'asc') {\n            setOrderBy('desc')\n        } else {\n            setOrderBy('asc')\n        }\n    }\n\n    const changePaginationConfig = async (param, value) => {\n        await setPaginationConfig({\n            ...paginationConfig, [param]: value\n        })\n    }\n\n    useEffect(() => {\n        if (!data) {\n            loadData(paginationConfig.limit, paginationConfig.page)\n        }\n    }, [paginationConfig.page])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [limit])\n\n    useEffect(() => {\n        if (data) {\n            if (startDate && endDate) {\n                loadData(limit, 1)\n            }\n        }\n    }, [endDate, startDate])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [order, orderBy])\n\n    const handleSearch = (e) => {\n        setSearchField(e.target.value)\n    }\n\n    const callLoadEditRegister = async () => {\n        setLoadingIdData(true)\n        try {\n            const response = await api.get(`/api/v1/private/document_type/${idEdit}`)\n\n            setIdData(response.data)\n        } catch (error) {\n\n        }\n        setLoadingIdData(false)\n    }\n\n    useEffect(() => {\n        if (modalEditRegister) {\n            if (idEdit) {\n                callLoadEditRegister()\n            }\n        }\n    }, [modalEditRegister])\n\n    const callEdit = (id) => {\n        setModalEditRegister(true)\n        setIdEdit(id)\n    }\n\n    const callDelete = async (id) => {\n        Swal.fire({\n            title: 'Tem certeza que deseja excluir este cadastro?',\n            showDenyButton: true,\n            showCancelButton: true,\n            showCancelButton: false,\n            confirmButtonText: 'Sim',\n            confirmButtonColor: '#80D946',\n            denyButtonText: `Não`,\n        }).then(async (result) => {\n            if (result.isConfirmed) {\n                try {\n                    const response = await api.delete(`/api/v1/private/document_type/${id}`)\n                    Swal.fire({\n                        title: response.data.title,\n                        text: response.data.message,\n                        icon: 'success',\n                        confirmButtonText: 'Fechar'\n                    }).then((result) => {\n                        loadData()\n                    })\n                } catch (error) {\n                    Swal.fire({\n                        title: error.response.data.title,\n                        text: error.response.data.message,\n                        icon: 'error',\n                        confirmButtonText: 'Fechar'\n                    })\n                }\n            }\n        })\n    }\n\n    const renderTable = () => {\n        return (\n            <>\n                <Row>\n                    <Col xs={12} xxl={12} className=\" d-flex justify-content-end align-items-end\">\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            disabled={loading}\n                            onClick={() => setModalNewRegister(true)}\n                        >\n                            Novo Cadastro <CsLineIcons icon=\"plus\" />\n                        </Button>\n                    </Col>\n                </Row>\n\n                {/* FILTERS */}\n                <Row>\n                    <Col xs={12} xxl={1} className=\"d-flex d-flex justify-content-end align-items-end\">\n                        <Dropdown\n                            align={{ xs: 'end' }}\n                            className=\"d-inline-block ms-1\"\n                            onSelect={(e) =>\n                                setLimit(e)\n                            }\n                        >\n                            <Dropdown.Toggle variant=\"foreground-alternate\" className=\"shadow\">\n                                {limit} Items\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu\n                                className=\"shadow dropdown-menu-end\"\n                            >\n                                <Dropdown.Item eventKey=\"5\">5 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"10\">10 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"20\">20 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"50\">50 Items</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n\n                    <Col xxl={4}>\n                        <Row className=\"g-2 w-100\">\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">De</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                />\n                            </Col>\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">Até</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={endDate}\n                                    onChange={(date) => setEndDate(date)}\n                                    selectsEnd\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                    minDate={startDate}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xxl={4}>\n                        &nbsp;\n                    </Col>\n                    <Col xs={12} xxl={3} className=\" d-flex justify-content-end align-items-end\">\n                        <InputGroup className=\"mt-2\"\n                            onChange={e => handleSearch(e)}\n                            onKeyDown={e => e.key === 'Enter' ? loadData(paginationConfig.limit, 1) : false}\n                        >\n                            <InputGroup.Text >\n                                <CsLineIcons icon=\"search\" />\n                            </InputGroup.Text>\n                            <FormControl placeholder=\"pesquisar...\" aria-label=\"Pesquisar\" aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                {/* FILTERS */}\n\n                {/* DATA */}\n                <Row className='mt-5'>\n                    <Col xs={12} xxl={12}>\n                        {data.length === 0\n                            ? <>\n                                <Row className=\"g-2 mb-5\">\n                                    <Col sm=\"12\" xxl=\"12\">\n                                        <Card className=\"sh-19\">\n                                            <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                                <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                                <p className=\"heading mb-0\">\n                                                    Ops! Nenhum resultado para essa consulta.\n                                                </p>\n\n                                                <p className=\"text-medium mb-0 text-muted\">\n                                                    Altere os filtros da consulta e tente novamente.\n                                                </p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </>\n                            : <>\n\n                                {total\n                                    ? <>\n                                        <Alert variant=\"info\">\n                                            Total de registros localizados: <strong>{total}</strong>\n                                        </Alert>\n                                    </>\n                                    : <></>\n                                }\n\n                                <table className=\"react-table rows\" >\n                                    <thead>\n                                        <tr>\n                                            {columns.map((row, index) => {\n                                                return (\n                                                    <th\n                                                        key={index}\n                                                        className={`text-muted text-small text-uppercase ${row.column ? 'cursor-pointer' : ''}`}\n                                                        onClick={() => row.column ? orderTable(row.column) : false}\n                                                    >\n                                                        <span className={`${order === row.column ? 'text-primary  font-weight-bold' : ''}`}>\n                                                            {row.name} &nbsp;\n\n                                                            {order === row.column\n                                                                ? <CsLineIcons size={10} icon={orderBy === 'asc' ? 'chevron-top' : 'chevron-bottom'} />\n                                                                : <></>\n                                                            }\n                                                        </span>\n                                                    </th>\n                                                )\n                                            })}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data.length > 0 && data.map((row, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    {columns.map((r, i) => {\n                                                        return (\n                                                            <td key={i}>\n\n                                                                {r.format ?\n                                                                    formatField(r.format, row[r.acessor], row)\n                                                                    : <>\n                                                                        {r.acessor === 'custom'\n                                                                            ? <>\n                                                                                <Button onClick={() => callEdit(row.id)} variant=\"outline-info\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"edit\" />\n                                                                                </Button>\n\n                                                                                &nbsp;\n                                                                                <Button onClick={() => callDelete(row.id)} variant=\"outline-danger\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"bin\" />\n                                                                                </Button>\n\n                                                                            </>\n                                                                            : <>\n                                                                                {row[r.acessor]}\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </td>\n                                                        )\n                                                    })}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n\n                                </table>\n\n\n                                <PaginationTable\n                                    config={paginationConfig}\n                                    gotoPage={(page) => [changePaginationConfig('page', page)]}\n                                />\n\n                            </>\n                        }\n                    </Col>\n                </Row>\n                {/* DATA */}\n            </>\n        )\n    }\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required('Este campo é obrigatório'),\n    })\n\n    const formatOptionLabel = ({ value, label, customAbbreviation }) => (\n        <div style={{ display: \"flex\" }}>\n            <div>{label}</div>\n            <div style={{ marginLeft: \"10px\", color: \"#ccc\" }}>\n                <CsLineIcons icon={`${label}`} className=\"text-info\" size={20} />\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            {loading\n                ? <>\n                    <div className=\"align-items-center\">\n                        <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                        <div>Carregando...</div>\n                    </div>\n                </>\n                : <>\n                    {renderTable()}\n                </>\n            }\n\n            {/* MODAL NEW REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalNewRegister}\n                size='md'\n                centered\n                onHide={() => setModalNewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalNewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Novo cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            name: '',\n                            icon: '',\n                            default: false,\n                            color: ''\n                        }}\n                        validationSchema={validationSchema}\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/document_type`, values)\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalNewRegister(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\"tooltip-end-bottom mt-4\">\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Nome </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                    {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                </div>\n\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Icone </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={icons}\n                                        value={\n                                            icons.filter(option =>\n                                                option.label === values.icon)\n                                        }\n                                        onChange={e => setFieldValue('icon', e.label)}\n                                        formatOptionLabel={formatOptionLabel}\n                                    />\n                                    {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                </div>\n\n                                <div className=\"mb-4  form-group tooltip-end-top\">\n                                    <div className='label'> Cor </div>\n                                    <div className='d-flex justify-content-center align-items-center'>\n                                        <SketchPicker\n                                            color={values.color}\n                                            onChange={(e) => setFieldValue('color', e.hex)}\n                                        />\n                                    </div>\n                                </div>\n\n                                <label>\n                                    Este atributo será padrão? &nbsp;\n                                    <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                </label>\n\n                                <Alert variant='info' className='mt-4 mb-4'>\n                                    Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                </Alert>\n\n                                <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                    <Button\n                                        variant=\"success\"\n                                        type=\"submit\"\n                                        disabled={values.loading}\n                                    >\n                                        {values.loading\n                                            ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                            : <>Cadastrar</>\n                                        }\n                                    </Button>\n                                </div>\n                            </Form>\n                        )}\n                    </Formik>\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL NEW REGISTER */}\n\n            {/* MODAL EDIT REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalEditRegister}\n                size='md'\n                centered\n                onHide={() => setModalEditRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalEditRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Editar</h4>\n\n                    {loadingIdData\n                        ? <>\n                            <div className=\"align-items-center\">\n                                <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                                <div>Carregando...</div>\n                            </div>\n                        </>\n                        : <Formik\n                            initialValues={{\n                                name: idData.name,\n                                icon: idData.icon,\n                                default: idData.default ? idData.default : false,\n                                color: idData.color\n                            }}\n\n                            validationSchema={validationSchema}\n\n                            onSubmit={async (values, { resetForm }) => {\n                                try {\n                                    const response = await api.post(`/api/v1/private/document_type/${idEdit}`, values)\n\n                                    resetForm()\n\n                                    Swal.fire({\n                                        title: response.data.title,\n                                        text: response.data.message,\n                                        icon: 'success',\n                                        confirmButtonText: 'Fechar'\n                                    }).then((result) => {\n                                        setModalEditRegister(false)\n                                        loadData()\n                                    })\n                                } catch (error) {\n                                    Swal.fire({\n                                        title: error.response.data.title,\n                                        text: error.response.data.message,\n                                        icon: 'error',\n                                        confirmButtonText: 'Fechar'\n                                    })\n                                }\n                            }}\n                        >\n                            {({ values, errors, touched, setFieldValue }) => (\n                                <Form className=\"tooltip-end-bottom mt-4\">\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Nome </div>\n                                        <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                        {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                    </div>\n\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Icone </div>\n                                        <ReactSelect\n                                            placeholder=\"\"\n                                            classNamePrefix=\"react-select\"\n                                            options={icons}\n                                            value={\n                                                icons.filter(option =>\n                                                    option.label === values.icon)\n                                            }\n                                            onChange={e => setFieldValue('icon', e.label)}\n                                            formatOptionLabel={formatOptionLabel}\n                                        />\n                                        {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                    </div>\n\n                                    <div className=\"mb-4  form-group tooltip-end-top\">\n                                        <div className='label'> Cor </div>\n                                        <div className='d-flex justify-content-center align-items-center'>\n                                            <SketchPicker\n                                                color={values.color ? values.color : false}\n                                                onChange={(e) => setFieldValue('color', e.hex)}\n                                            />\n                                        </div>\n                                    </div>\n\n                                    <label>\n                                        Este atributo será padrão? &nbsp;\n                                        <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                    </label>\n\n                                    <Alert variant='info' className='mt-4 mb-4'>\n                                        Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                    </Alert>\n\n                                    <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                        <Button\n                                            variant=\"success\"\n                                            type=\"submit\"\n                                            disabled={values.loading}\n                                        >\n                                            {values.loading\n                                                ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                : <>Editar</>\n                                            }\n                                        </Button>\n                                    </div>\n                                </Form>\n                            )}\n                        </Formik>\n                    }\n\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL EDIT REGISTER */}\n        </>\n    );\n};\n\nexport default Component;\n","/Users/caio/Projects/Samples/front-vawlog/src/views/vehicles/list.js",["1172","1173","1174","1175","1176","1177","1178","1179","1180","1181","1182","1183"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport moment from 'moment';\nimport pt from 'date-fns/locale/pt';\nimport DatePicker from 'react-datepicker';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport PaginationTable from 'helpers/pagination';\nimport formatField from 'helpers/formatField';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2'\nimport ReactSelect from 'react-select';\n\n\nconst Component = () => {\n    const title = 'Veículos';\n    const description = 'Veículos';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'vehicles', text: 'Veículos' },\n    ]\n\n    const columns = [\n        { name: 'Id', acessor: 'id', column: 'id' },\n        { name: 'Status', acessor: '', column: '', format: 'vehicle_status' },\n        { name: 'Tipo', acessor: '', column: '', format: 'vehicle_type' },\n        { name: 'Fabricante', acessor: 'manufacturer', column: 'manufacturer' },\n        { name: 'Model', acessor: 'model', column: 'model' },\n        { name: 'Ano', acessor: 'year', column: 'year' },\n        { name: 'Data', acessor: 'created_at', column: 'created_at' },\n        { name: '', acessor: 'custom', column: 'custom' },\n    ]\n\n    const [modalNewRegister, setModalNewRegister] = useState(false)\n    const [limit, setLimit] = useState(10)\n    const [loading, setLoading] = useState(true)\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [order, setOrder] = useState(false)\n    const [orderBy, setOrderBy] = useState('asc')\n    const [data, setData] = useState(false)\n    const [total, setTotal] = useState(false)\n    const [searchField, setSearchField] = useState('')\n    const [paginationConfig, setPaginationConfig] = useState({\n        page: 1\n    })\n\n    const [modalEditRegister, setModalEditRegister] = useState(false)\n    const [modalViewRegister, setModalViewRegister] = useState(false)\n\n    const [idEdit, setIdEdit] = useState(false)\n    const [loadingIdData, setLoadingIdData] = useState(false)\n    const [idData, setIdData] = useState(false)\n\n    const loadData = async (pageLimit, page) => {\n        document.body.classList.add('spinner')\n\n        pageLimit = limit\n\n        try {\n            let url = `/api/v1/private/vehicles?order=${orderBy}&limit=${pageLimit}&page=${page}&search=${searchField}`\n\n            if (startDate && endDate) {\n                url += `&start=${moment(startDate).format('YYYY-MM-DD')}&end=${moment(endDate).format('YYYY-MM-DD')}`\n            }\n\n            if (order) {\n                url += `&order=${orderBy}&order_by=${order}`\n            }\n\n            const response = await api.get(url)\n\n            setData(response.data.data)\n            setTotal(response.data.total)\n\n            setPaginationConfig({\n                previousPage: response.data.data.prev_page_url,\n                page: response.data.data.current_page,\n                nextPage: response.data.data.next_page_url,\n                limit: pageLimit,\n                total: response.data.data.last_page,\n                lastPage: response.data.data.last_page\n            })\n\n        } catch (error) {\n            console.log(error)\n        }\n\n        document.body.classList.remove('spinner')\n\n        setLoading(false)\n    }\n\n    const orderTable = (param) => {\n        setOrder(param)\n\n        if (orderBy === 'asc') {\n            setOrderBy('desc')\n        } else {\n            setOrderBy('asc')\n        }\n    }\n\n    const changePaginationConfig = async (param, value) => {\n        await setPaginationConfig({\n            ...paginationConfig, [param]: value\n        })\n    }\n\n    useEffect(() => {\n        if (!data) {\n            loadData(paginationConfig.limit, paginationConfig.page)\n        }\n    }, [paginationConfig.page])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [limit])\n\n    useEffect(() => {\n        if (data) {\n            if (startDate && endDate) {\n                loadData(limit, 1)\n            }\n        }\n    }, [endDate, startDate])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [order, orderBy])\n\n    const handleSearch = (e) => {\n        setSearchField(e.target.value)\n    }\n\n    const callLoadEditRegister = async () => {\n        setLoadingIdData(true)\n        try {\n            const response = await api.get(`/api/v1/private/vehicles/${idEdit}`)\n\n            setIdData(response.data)\n        } catch (error) {\n\n        }\n        setLoadingIdData(false)\n    }\n\n    useEffect(() => {\n        if (modalEditRegister) {\n            if (idEdit) {\n                callLoadEditRegister()\n            }\n        }\n    }, [modalEditRegister])\n\n    useEffect(() => {\n        if (modalViewRegister) {\n            if (idEdit) {\n                callLoadEditRegister()\n            }\n        }\n    }, [modalViewRegister])\n\n    const callEdit = (id) => {\n        setModalEditRegister(true)\n        setIdEdit(id)\n    }\n\n    const callView = (id) => {\n        setModalViewRegister(true)\n        setIdEdit(id)\n    }\n\n    const callDelete = async (id) => {\n        Swal.fire({\n            title: 'Tem certeza que deseja excluir este cadastro?',\n            showDenyButton: true,\n            showCancelButton: true,\n            showCancelButton: false,\n            confirmButtonText: 'Sim',\n            confirmButtonColor: '#80D946',\n            denyButtonText: `Não`,\n        }).then(async (result) => {\n            if (result.isConfirmed) {\n                try {\n                    const response = await api.delete(`/api/v1/private/vehicles/${id}`)\n                    Swal.fire({\n                        title: response.data.title,\n                        text: response.data.message,\n                        icon: 'success',\n                        confirmButtonText: 'Fechar'\n                    }).then((result) => {\n                        loadData()\n                    })\n                } catch (error) {\n                    Swal.fire({\n                        title: error.response.data.title,\n                        text: error.response.data.message,\n                        icon: 'error',\n                        confirmButtonText: 'Fechar'\n                    })\n                }\n            }\n        })\n    }\n\n    const [status, setStatus] = useState([])\n    const [type, setType] = useState([])\n\n    const getParams = async () => {\n        try {\n            const response = await api.get(`/api/v1/private/vehicle_type?limit=100`)\n\n            let array_types = []\n\n            response.data.data.map((row) => {\n                array_types.push({\n                    label: row.name,\n                    value: row.id\n                })\n            })\n\n            setType(array_types)\n        } catch (error) {\n\n        }\n\n        try {\n            const response = await api.get(`/api/v1/private/vehicle_status?limit=100`)\n\n            let array_status = []\n\n            response.data.data.map((row) => {\n                array_status.push({\n                    label: row.name,\n                    value: row.id\n                })\n            })\n\n            setStatus(array_status)\n        } catch (error) {\n\n        }\n    }\n\n    useEffect(() => {\n        if (status.length === 0 && type.length === 0) {\n            getParams()\n        }\n    }, [])\n\n    const renderTable = () => {\n        return (\n            <>\n                <Row>\n                    <Col xs={12} xxl={12} className=\" d-flex justify-content-end align-items-end\">\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            disabled={loading}\n                            onClick={() => setModalNewRegister(true)}\n                        >\n                            Novo Cadastro <CsLineIcons icon=\"plus\" />\n                        </Button>\n                    </Col>\n                </Row>\n\n                {/* FILTERS */}\n                <Row>\n                    <Col xs={12} xxl={1} className=\"d-flex d-flex justify-content-end align-items-end\">\n                        <Dropdown\n                            align={{ xs: 'end' }}\n                            className=\"d-inline-block ms-1\"\n                            onSelect={(e) =>\n                                setLimit(e)\n                            }\n                        >\n                            <Dropdown.Toggle variant=\"foreground-alternate\" className=\"shadow\">\n                                {limit} Items\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu\n                                className=\"shadow dropdown-menu-end\"\n                            >\n                                <Dropdown.Item eventKey=\"5\">5 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"10\">10 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"20\">20 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"50\">50 Items</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n\n                    <Col xxl={4}>\n                        <Row className=\"g-2 w-100\">\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">De</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                />\n                            </Col>\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">Até</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={endDate}\n                                    onChange={(date) => setEndDate(date)}\n                                    selectsEnd\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                    minDate={startDate}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xxl={4}>\n                        &nbsp;\n                    </Col>\n                    <Col xs={12} xxl={3} className=\" d-flex justify-content-end align-items-end\">\n                        <InputGroup className=\"mt-2\"\n                            onChange={e => handleSearch(e)}\n                            onKeyDown={e => e.key === 'Enter' ? loadData(paginationConfig.limit, 1) : false}\n                        >\n                            <InputGroup.Text >\n                                <CsLineIcons icon=\"search\" />\n                            </InputGroup.Text>\n                            <FormControl placeholder=\"pesquisar...\" aria-label=\"Pesquisar\" aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                {/* FILTERS */}\n\n                {/* DATA */}\n                <Row className='mt-5'>\n                    <Col xs={12} xxl={12}>\n                        {data.length === 0\n                            ? <>\n                                <Row className=\"g-2 mb-5\">\n                                    <Col sm=\"12\" xxl=\"12\">\n                                        <Card className=\"sh-19\">\n                                            <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                                <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                                <p className=\"heading mb-0\">\n                                                    Ops! Nenhum resultado para essa consulta.\n                                                </p>\n\n                                                <p className=\"text-medium mb-0 text-muted\">\n                                                    Altere os filtros da consulta e tente novamente.\n                                                </p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </>\n                            : <>\n\n                                {total\n                                    ? <>\n                                        <Alert variant=\"info\">\n                                            Total de registros localizados: <strong>{total}</strong>\n                                        </Alert>\n                                    </>\n                                    : <></>\n                                }\n\n                                <table className=\"react-table rows\" >\n                                    <thead>\n                                        <tr>\n                                            {columns.map((row, index) => {\n                                                return (\n                                                    <th\n                                                        key={index}\n                                                        className={`text-muted text-small text-uppercase ${row.column ? 'cursor-pointer' : ''}`}\n                                                        onClick={() => row.column ? orderTable(row.column) : false}\n                                                    >\n                                                        <span className={`${order === row.column ? 'text-primary  font-weight-bold' : ''}`}>\n                                                            {row.name} &nbsp;\n\n                                                            {order === row.column\n                                                                ? <CsLineIcons size={10} icon={orderBy === 'asc' ? 'chevron-top' : 'chevron-bottom'} />\n                                                                : <></>\n                                                            }\n                                                        </span>\n                                                    </th>\n                                                )\n                                            })}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data.length > 0 && data.map((row, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    {columns.map((r, i) => {\n                                                        return (\n                                                            <td key={i}>\n\n                                                                {r.format ?\n                                                                    formatField(r.format, row[r.acessor], row)\n                                                                    : <>\n                                                                        {r.acessor === 'custom'\n                                                                            ? <>\n                                                                                <Button onClick={() => callView(row.id)} variant=\"outline-success\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"eye\" />\n                                                                                </Button>\n\n                                                                                &nbsp;\n                                                                                <Button onClick={() => callEdit(row.id)} variant=\"outline-info\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"edit\" />\n                                                                                </Button>\n\n                                                                                &nbsp;\n                                                                                <Button onClick={() => callDelete(row.id)} variant=\"outline-danger\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"bin\" />\n                                                                                </Button>\n\n                                                                            </>\n                                                                            : <>\n                                                                                {row[r.acessor]}\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </td>\n                                                        )\n                                                    })}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n\n                                </table>\n\n\n                                <PaginationTable\n                                    config={paginationConfig}\n                                    gotoPage={(page) => [changePaginationConfig('page', page)]}\n                                />\n\n                            </>\n                        }\n                    </Col>\n                </Row>\n                {/* DATA */}\n            </>\n        )\n    }\n\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            {loading\n                ? <>\n                    <div className=\"align-items-center\">\n                        <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                        <div>Carregando...</div>\n                    </div>\n                </>\n                : <>\n                    {renderTable()}\n                </>\n            }\n\n            {/* MODAL NEW REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalNewRegister}\n                size='md'\n                centered\n                onHide={() => setModalNewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalNewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Novo cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            vehicle_type_id: false,\n                            vehicle_status_id: false,\n                            description: '',\n                            plate: '',\n                            renavam: '',\n                            model: '',\n                            manufacturer: '',\n                            year: '',\n                            fuel: '',\n                            color: '',\n                            capacity_kg: '',\n                            capacity_m: '',\n                            bodywork: '',\n                            ipva: '',\n                            dpvat: '',\n                            licensing: ''\n                        }}\n\n\n                        onSubmit={async (values, { resetForm }) => {\n\n                            values.ipva = moment(values.ipva).format('YYYY-MM-DD')\n                            values.dpvat = moment(values.dpvat).format('YYYY-MM-DD')\n                            values.licensing = moment(values.licensing).format('YYYY-MM-DD')\n\n                            try {\n                                const response = await api.post(`/api/v1/private/vehicles`, values)\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalNewRegister(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\"tooltip-end-bottom mt-4\">\n\n                                <div className=\"mb-3 form-group tooltip-end-top\">\n                                    <div className='label'> Tipo </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={type}\n                                        value={type.filter(option => option.value === values.vehicle_type_id)}\n                                        onChange={e => setFieldValue('vehicle_type_id', e.value)}\n                                    />\n                                    {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                </div>\n\n\n                                <div className=\"mb-3 form-group tooltip-end-top\">\n                                    <div className='label'> Status </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={status}\n                                        value={status.filter(option => option.value === values.vehicle_status_id)}\n                                        onChange={e => setFieldValue('vehicle_status_id', e.value)}\n                                    />\n                                    {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                </div>\n\n                                <Row>\n                                    <Col xs={6}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Placa </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"plate\" value={values.plate} />\n                                            {errors.plate && touched.plate && <div className=\"d-block invalid-tooltip\">{errors.plate}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={6}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Renavam </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"renavam\" value={values.renavam} />\n                                            {errors.renavam && touched.renavam && <div className=\"d-block invalid-tooltip\">{errors.renavam}</div>}\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                <Row>\n                                    <Col xs={6}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Modelo </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"model\" value={values.model} />\n                                            {errors.model && touched.model && <div className=\"d-block invalid-tooltip\">{errors.model}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={6}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Fabricante </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"manufacturer\" value={values.manufacturer} />\n                                            {errors.manufacturer && touched.manufacturer && <div className=\"d-block invalid-tooltip\">{errors.manufacturer}</div>}\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                <Row>\n                                    <Col xs={4}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Ano </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"year\" value={values.year} />\n                                            {errors.year && touched.year && <div className=\"d-block invalid-tooltip\">{errors.year}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={4}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Combustível </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"fuel\" value={values.fuel} />\n                                            {errors.fuel && touched.fuel && <div className=\"d-block invalid-tooltip\">{errors.fuel}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={4}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Cor </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"color\" value={values.color} />\n                                            {errors.color && touched.color && <div className=\"d-block invalid-tooltip\">{errors.color}</div>}\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                <Row>\n                                    <Col xs={6}>\n                                        <div className=\"mb-3 form-group \">\n                                            <div className='label'> Capacidade KG </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"capacity_kg\" value={values.capacity_kg} />\n                                            {errors.capacity_kg && touched.capacity_kg && <div className=\"d-block invalid-tooltip\">{errors.capacity_kg}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={6}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Capacidade m²</div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"capacity_m\" value={values.capacity_m} />\n                                            {errors.capacity_m && touched.capacity_m && <div className=\"d-block invalid-tooltip\">{errors.capacity_m}</div>}\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                <Row>\n                                    <Col xs={12}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Carroceria</div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"bodywork\" value={values.bodywork} />\n                                            {errors.bodywork && touched.bodywork && <div className=\"d-block invalid-tooltip\">{errors.bodywork}</div>}\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                <Row>\n                                    <Col xs={4}>\n                                        <div className=\"mb-3 form-group \">\n                                            <div className='label'> IPVA </div>\n                                            <DatePicker\n                                                locale={pt}\n                                                dateFormat=\"dd/MM/yyyy\"\n                                                className=\"form-control\"\n                                                selected={values.ipva}\n                                                onChange={e => setFieldValue('ipva', e)}\n                                                startDate={values.ipva}\n                                            />\n                                            {errors.ipva && touched.ipva && <div className=\"d-block invalid-tooltip\">{errors.ipva}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={4}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> DPVAT</div>\n                                            <DatePicker\n                                                locale={pt}\n                                                dateFormat=\"dd/MM/yyyy\"\n                                                className=\"form-control\"\n                                                selected={values.dpvat}\n                                                onChange={e => setFieldValue('dpvat', e)}\n                                                startDate={values.dpvat}\n                                            />\n                                            {errors.dpvat && touched.dpvat && <div className=\"d-block invalid-tooltip\">{errors.dpvat}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={4}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Licenciamento </div>\n                                            <DatePicker\n                                                locale={pt}\n                                                dateFormat=\"dd/MM/yyyy\"\n                                                className=\"form-control\"\n                                                selected={values.licensing}\n                                                onChange={e => setFieldValue('licensing', e)}\n                                                startDate={values.licensing}\n                                            />\n                                            {errors.licensing && touched.licensing && <div className=\"d-block invalid-tooltip\">{errors.licensing}</div>}\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                <Row>\n                                    <Col xs={12}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Descrição </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"description\" value={values.description} />\n                                            {errors.description && touched.description && <div className=\"d-block invalid-tooltip\">{errors.description}</div>}\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                    <Button\n                                        variant=\"success\"\n                                        type=\"submit\"\n                                        disabled={values.loading}\n                                    >\n                                        {values.loading\n                                            ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                            : <>Cadastrar</>\n                                        }\n                                    </Button>\n                                </div>\n                            </Form>\n                        )}\n                    </Formik>\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL NEW REGISTER */}\n\n            {/* MODAL EDIT REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalEditRegister}\n                size='md'\n                centered\n                onHide={() => setModalEditRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalEditRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Editar</h4>\n\n                    {loadingIdData\n                        ? <>\n                            <div className=\"align-items-center\">\n                                <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                                <div>Carregando...</div>\n                            </div>\n                        </>\n                        :\n                        <Formik\n                            initialValues={{\n                                vehicle_type_id: idData.vehicle_type_id,\n                                vehicle_status_id: idData.vehicle_status_id,\n                                description: idData.description,\n                                plate: idData.plate,\n                                renavam: idData.renavam,\n                                model: idData.model,\n                                manufacturer: idData.manufacturer,\n                                year: idData.year,\n                                fuel: idData.fuel,\n                                color: idData.color,\n                                capacity_kg: idData.capacity_kg,\n                                capacity_m: idData.capacity_m,\n                                bodywork: idData.bodywork,\n                                ipva: idData.ipva ? new Date(new Date(idData.ipva).setDate(new Date(idData.ipva).getDate() + 1)) : false,\n                                dpvat: idData.dpvat ? new Date(new Date(idData.dpvat).setDate(new Date(idData.dpvat).getDate() + 1)) : false,\n                                licensing: idData.licensing ? new Date(new Date(idData.licensing).setDate(new Date(idData.licensing).getDate() + 1)) : false,\n                            }}\n\n\n                            onSubmit={async (values, { resetForm }) => {\n                                values.ipva = values.ipva ? moment(values.ipva).format('YYYY-MM-DD') : false\n                                values.dpvat = values.dpvat ? moment(values.dpvat).format('YYYY-MM-DD') : false\n                                values.licensing = values.licensing ? moment(values.licensing).format('YYYY-MM-DD') : false\n\n                                try {\n                                    \n                                    const response = await api.post(`/api/v1/private/vehicles/${idEdit}`, values)\n\n                                    resetForm()\n\n                                    Swal.fire({\n                                        title: response.data.title,\n                                        text: response.data.message,\n                                        icon: 'success',\n                                        confirmButtonText: 'Fechar'\n                                    }).then((result) => {\n                                        setModalEditRegister(false)\n                                        loadData()\n                                    })\n\n                                } catch (error) {\n                                    Swal.fire({\n                                        title: error.response.data.title,\n                                        text: error.response.data.message,\n                                        icon: 'error',\n                                        confirmButtonText: 'Fechar'\n                                    })\n                                }\n                            }}\n                        >\n                            {({ values, errors, touched, setFieldValue }) => (\n                                <Form className=\"tooltip-end-bottom mt-4\">\n                           \n                                    <div className=\"mb-3 form-group tooltip-end-top\">\n                                        <div className='label'> Tipo </div>\n                                        <ReactSelect\n                                            placeholder=\"\"\n                                            classNamePrefix=\"react-select\"\n                                            options={type}\n                                            value={type.filter(option => option.value === values.vehicle_type_id)}\n                                            onChange={e => setFieldValue('vehicle_type_id', e.value)}\n                                        />\n                                        {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                    </div>\n\n\n                                    <div className=\"mb-3 form-group tooltip-end-top\">\n                                        <div className='label'> Status </div>\n                                        <ReactSelect\n                                            placeholder=\"\"\n                                            classNamePrefix=\"react-select\"\n                                            options={status}\n                                            value={status.filter(option => option.value === values.vehicle_status_id)}\n                                            onChange={e => setFieldValue('vehicle_status_id', e.value)}\n                                        />\n                                        {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                    </div>\n\n                                    <Row>\n                                        <Col xs={6}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Placa </div>\n                                                <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"plate\" value={values.plate} />\n                                                {errors.plate && touched.plate && <div className=\"d-block invalid-tooltip\">{errors.plate}</div>}\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={6}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Renavam </div>\n                                                <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"renavam\" value={values.renavam} />\n                                                {errors.renavam && touched.renavam && <div className=\"d-block invalid-tooltip\">{errors.renavam}</div>}\n                                            </div>\n                                        </Col>\n                                    </Row>\n\n                                    <Row>\n                                        <Col xs={6}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Modelo </div>\n                                                <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"model\" value={values.model} />\n                                                {errors.model && touched.model && <div className=\"d-block invalid-tooltip\">{errors.model}</div>}\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={6}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Fabricante </div>\n                                                <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"manufacturer\" value={values.manufacturer} />\n                                                {errors.manufacturer && touched.manufacturer && <div className=\"d-block invalid-tooltip\">{errors.manufacturer}</div>}\n                                            </div>\n                                        </Col>\n                                    </Row>\n\n                                    <Row>\n                                        <Col xs={4}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Ano </div>\n                                                <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"year\" value={values.year} />\n                                                {errors.year && touched.year && <div className=\"d-block invalid-tooltip\">{errors.year}</div>}\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={4}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Combustível </div>\n                                                <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"fuel\" value={values.fuel} />\n                                                {errors.fuel && touched.fuel && <div className=\"d-block invalid-tooltip\">{errors.fuel}</div>}\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={4}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Cor </div>\n                                                <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"color\" value={values.color} />\n                                                {errors.color && touched.color && <div className=\"d-block invalid-tooltip\">{errors.color}</div>}\n                                            </div>\n                                        </Col>\n                                    </Row>\n\n                                    <Row>\n                                        <Col xs={6}>\n                                            <div className=\"mb-3 form-group \">\n                                                <div className='label'> Capacidade KG </div>\n                                                <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"capacity_kg\" value={values.capacity_kg} />\n                                                {errors.capacity_kg && touched.capacity_kg && <div className=\"d-block invalid-tooltip\">{errors.capacity_kg}</div>}\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={6}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Capacidade m²</div>\n                                                <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"capacity_m\" value={values.capacity_m} />\n                                                {errors.capacity_m && touched.capacity_m && <div className=\"d-block invalid-tooltip\">{errors.capacity_m}</div>}\n                                            </div>\n                                        </Col>\n                                    </Row>\n\n                                    <Row>\n                                        <Col xs={12}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Carroceria</div>\n                                                <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"bodywork\" value={values.bodywork} />\n                                                {errors.bodywork && touched.bodywork && <div className=\"d-block invalid-tooltip\">{errors.bodywork}</div>}\n                                            </div>\n                                        </Col>\n                                    </Row>\n\n                                    <Row>\n                                        <Col xs={4}>\n                                            <div className=\"mb-3 form-group \">\n                                                <div className='label'> IPVA </div>\n                                                <DatePicker\n                                                    locale={pt}\n                                                    dateFormat=\"dd/MM/yyyy\"\n                                                    className=\"form-control\"\n                                                    selected={values.ipva}\n                                                    onChange={e => setFieldValue('ipva', e)}\n                                                    startDate={values.ipva}\n                                                />\n                                                {errors.ipva && touched.ipva && <div className=\"d-block invalid-tooltip\">{errors.ipva}</div>}\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={4}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> DPVAT</div>\n                                                <DatePicker\n                                                    locale={pt}\n                                                    dateFormat=\"dd/MM/yyyy\"\n                                                    className=\"form-control\"\n                                                    selected={values.dpvat}\n                                                    onChange={e => setFieldValue('dpvat', e)}\n                                                    startDate={values.dpvat}\n                                                />\n                                                {errors.dpvat && touched.dpvat && <div className=\"d-block invalid-tooltip\">{errors.dpvat}</div>}\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={4}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Licenciamento </div>\n                                                <DatePicker\n                                                    locale={pt}\n                                                    dateFormat=\"dd/MM/yyyy\"\n                                                    className=\"form-control\"\n                                                    selected={values.licensing}\n                                                    onChange={e => setFieldValue('licensing', e)}\n                                                    startDate={values.licensing}\n                                                />\n                                                {errors.licensing && touched.licensing && <div className=\"d-block invalid-tooltip\">{errors.licensing}</div>}\n                                            </div>\n                                        </Col>\n                                    </Row>\n\n                                    <Row>\n                                        <Col xs={12}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Descrição </div>\n                                                <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"description\" value={values.description} />\n                                                {errors.description && touched.description && <div className=\"d-block invalid-tooltip\">{errors.description}</div>}\n                                            </div>\n                                        </Col>\n                                    </Row>\n\n                                    <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                        <Button\n                                            variant=\"success\"\n                                            type=\"submit\"\n                                            disabled={values.loading}\n                                        >\n                                            {values.loading\n                                                ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                : <>Editar</>\n                                            }\n                                        </Button>\n                                    </div>\n                                </Form>\n                            )}\n                        </Formik>\n                    }\n\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL EDIT REGISTER */}\n\n            {/* MODAL VIEW */}\n            <Modal\n                show={modalViewRegister}\n                size='xl'\n                centered\n                onHide={() => setModalViewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalViewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Visualizar</h4>\n\n                    <Row>\n                        <Col xs={12} className=\"mt-4\">\n                            <span className='text-primary'><b>Model:</b> </span> {idData.model} / {idData.manufacturer}\n                        </Col>\n\n                        <Col xs={6} className=\"mt-4\">\n                            <span className='text-primary'><b>Status:</b> </span>\n                            <CsLineIcons stroke={idData?.vehicle_status?.color} icon={idData?.vehicle_status?.icon} className='text-info' size={15} /> &nbsp;\n                            {idData?.vehicle_status?.name}\n                        </Col>\n\n                        <Col xs={6} className=\"mt-4\">\n                            <span className='text-primary'><b>Tipo:</b> </span>\n                            <CsLineIcons stroke={idData?.vehicle_type?.color} icon={idData?.vehicle_type?.icon} className='text-info' size={15} /> &nbsp;\n                            {idData?.vehicle_type?.name}\n                        </Col>\n\n                        <Col xs={6} className=\"mt-4\">\n                            <span className='text-primary'><b>Model:</b> </span> {idData.model} / {idData.manufacturer}\n                        </Col>\n\n                        <Col xs={4} className=\"mt-4\">\n                            <span className='text-primary'><b>Placa:</b> </span> {idData.plate}\n                        </Col>\n\n                        <Col xs={4} className=\"mt-4\">\n                            <span className='text-primary'><b>Renavam:</b> </span> {idData.renavam}\n                        </Col>\n\n                        <Col xs={4} className=\"mt-4\">\n                            <span className='text-primary'><b>IPVA:</b> </span> {idData.ipva}\n                        </Col>\n\n                        <Col xs={4} className=\"mt-4\">\n                            <span className='text-primary'><b>Ano:</b> </span> {idData.year}\n                        </Col>\n\n                        <Col xs={4} className=\"mt-4\">\n                            <span className='text-primary'><b>Cor:</b> </span> {idData.color}\n                        </Col>\n\n                        <Col xs={4} className=\"mt-4\">\n                            <span className='text-primary'><b>Combustível:</b> </span> {idData.fuel}\n                        </Col>\n\n                        <Col xs={6} className=\"mt-4\">\n                            <span className='text-primary'><b>Capacidade KG:</b> </span> {idData.capacity_kg}\n                        </Col>\n\n                        <Col xs={6} className=\"mt-4\">\n                            <span className='text-primary'><b>Capacidade m²:</b> </span> {idData.capacity_m}\n                        </Col>\n\n                        <Col xs={4} className=\"mt-4\">\n                            <span className='text-primary'><b>Carroceria:</b> </span> {idData.bodywork}\n                        </Col>\n\n                        <Col xs={12} className=\"mt-4\">\n                            <span className='text-primary'><b>Descrição:</b> </span> <br />\n                            <div style={{ marginLeft: 20 }}>\n                                {idData.description}\n                            </div>\n                        </Col>\n                    </Row>\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL VIEW */}\n        </>\n    );\n};\n\nexport default Component;\n","/Users/caio/Projects/Samples/front-vawlog/src/views/drivers/list.js",["1184","1185","1186","1187","1188","1189","1190","1191","1192","1193","1194"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport moment from 'moment';\nimport pt from 'date-fns/locale/pt';\nimport DatePicker from 'react-datepicker';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport PaginationTable from 'helpers/pagination';\nimport formatField from 'helpers/formatField';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2'\nimport ReactSelect from 'react-select';\n\n\nconst Component = () => {\n    const title = 'Veículos';\n    const description = 'Veículos';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'drivers', text: 'Motoristas' },\n    ]\n\n    const columns = [\n        { name: 'Id', acessor: 'id', column: 'id' },\n        { name: 'Nome', acessor: 'name', column: 'name' },\n        { name: 'Telefone', acessor: 'phone', column: 'phone' },\n        { name: 'CPF', acessor: 'taxid', column: 'taxid' },\n        { name: 'Categoria', acessor: 'category', column: 'category' },\n        { name: 'Status', acessor: '', column: '', format: 'driver_status' },\n        { name: 'Data', acessor: 'created_at', column: 'created_at' },\n        { name: '', acessor: 'custom', column: 'custom' },\n    ]\n\n\n    const [modalNewRegister, setModalNewRegister] = useState(false)\n    const [limit, setLimit] = useState(10)\n    const [loading, setLoading] = useState(true)\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [order, setOrder] = useState(false)\n    const [orderBy, setOrderBy] = useState('asc')\n    const [data, setData] = useState(false)\n    const [total, setTotal] = useState(false)\n    const [searchField, setSearchField] = useState('')\n    const [paginationConfig, setPaginationConfig] = useState({\n        page: 1\n    })\n\n    const [modalEditRegister, setModalEditRegister] = useState(false)\n    const [modalViewRegister, setModalViewRegister] = useState(false)\n\n    const [idEdit, setIdEdit] = useState(false)\n    const [loadingIdData, setLoadingIdData] = useState(false)\n    const [idData, setIdData] = useState(false)\n    const loadData = async (pageLimit, page) => {\n        document.body.classList.add('spinner')\n\n        pageLimit = limit\n\n        try {\n            let url = `/api/v1/private/drivers?order=${orderBy}&limit=${pageLimit}&page=${page}&search=${searchField}`\n\n            if (startDate && endDate) {\n                url += `&start=${moment(startDate).format('YYYY-MM-DD')}&end=${moment(endDate).format('YYYY-MM-DD')}`\n            }\n\n            if (order) {\n                url += `&order=${orderBy}&order_by=${order}`\n            }\n\n            const response = await api.get(url)\n\n            setData(response.data.data)\n            setTotal(response.data.total)\n\n            setPaginationConfig({\n                previousPage: response.data.data.prev_page_url,\n                page: response.data.data.current_page,\n                nextPage: response.data.data.next_page_url,\n                limit: pageLimit,\n                total: response.data.data.last_page,\n                lastPage: response.data.data.last_page\n            })\n\n        } catch (error) {\n            console.log(error)\n        }\n\n        document.body.classList.remove('spinner')\n\n        setLoading(false)\n    }\n\n    const orderTable = (param) => {\n        setOrder(param)\n\n        if (orderBy === 'asc') {\n            setOrderBy('desc')\n        } else {\n            setOrderBy('asc')\n        }\n    }\n\n    const changePaginationConfig = async (param, value) => {\n        await setPaginationConfig({\n            ...paginationConfig, [param]: value\n        })\n    }\n\n    useEffect(() => {\n        if (!data) {\n            loadData(paginationConfig.limit, paginationConfig.page)\n        }\n    }, [paginationConfig.page])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [limit])\n\n    useEffect(() => {\n        if (data) {\n            if (startDate && endDate) {\n                loadData(limit, 1)\n            }\n        }\n    }, [endDate, startDate])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [order, orderBy])\n\n    const handleSearch = (e) => {\n        setSearchField(e.target.value)\n    }\n\n    const callLoadEditRegister = async () => {\n        setLoadingIdData(true)\n        try {\n            const response = await api.get(`/api/v1/private/drivers/${idEdit}`)\n\n            setIdData(response.data)\n        } catch (error) {\n\n        }\n        setLoadingIdData(false)\n    }\n\n    useEffect(() => {\n        if (modalEditRegister) {\n            if (idEdit) {\n                callLoadEditRegister()\n            }\n        }\n    }, [modalEditRegister])\n\n    useEffect(() => {\n        if (modalViewRegister) {\n            if (idEdit) {\n                callLoadEditRegister()\n            }\n        }\n    }, [modalViewRegister])\n\n    const callEdit = (id) => {\n        setModalEditRegister(true)\n        setIdEdit(id)\n    }\n\n    const callView = (id) => {\n        setModalViewRegister(true)\n        setIdEdit(id)\n    }\n\n\n    const [status, setStatus] = useState([])\n    const [type, setType] = useState([])\n\n    const getParams = async () => {\n        try {\n            const response = await api.get(`/api/v1/private/driver_type?limit=100`)\n\n            let array_types = []\n\n            response.data.data.map((row) => {\n                array_types.push({\n                    label: row.name,\n                    value: row.id\n                })\n            })\n\n            setType(array_types)\n        } catch (error) {\n\n        }\n\n        try {\n            const response = await api.get(`/api/v1/private/driver_status?limit=100`)\n\n            let array_status = []\n\n            response.data.data.map((row) => {\n                array_status.push({\n                    label: row.name,\n                    value: row.id\n                })\n            })\n\n            setStatus(array_status)\n        } catch (error) {\n\n        }\n    }\n\n    useEffect(() => {\n        if (status.length === 0 && type.length === 0) {\n            getParams()\n        }\n    }, [])\n\n\n    const callDelete = async (id) => {\n        Swal.fire({\n            title: 'Tem certeza que deseja excluir este cadastro?',\n            showDenyButton: true,\n            showCancelButton: true,\n            showCancelButton: false,\n            confirmButtonText: 'Sim',\n            confirmButtonColor: '#80D946',\n            denyButtonText: `Não`,\n        }).then(async (result) => {\n            if (result.isConfirmed) {\n                try {\n                    const response = await api.delete(`/api/v1/private/drivers/${id}`)\n                    Swal.fire({\n                        title: response.data.title,\n                        text: response.data.message,\n                        icon: 'success',\n                        confirmButtonText: 'Fechar'\n                    }).then((result) => {\n                        loadData()\n                    })\n                } catch (error) {\n                    Swal.fire({\n                        title: error.response.data.title,\n                        text: error.response.data.message,\n                        icon: 'error',\n                        confirmButtonText: 'Fechar'\n                    })\n                }\n            }\n        })\n    }\n\n    const renderTable = () => {\n        return (\n            <>\n                <Row>\n                    <Col xs={12} xxl={12} className=\" d-flex justify-content-end align-items-end\">\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            disabled={loading}\n                            onClick={() => setModalNewRegister(true)}\n                        >\n                            Novo Cadastro <CsLineIcons icon=\"plus\" />\n                        </Button>\n                    </Col>\n                </Row>\n\n                {/* FILTERS */}\n                <Row>\n                    <Col xs={12} xxl={1} className=\"d-flex d-flex justify-content-end align-items-end\">\n                        <Dropdown\n                            align={{ xs: 'end' }}\n                            className=\"d-inline-block ms-1\"\n                            onSelect={(e) =>\n                                setLimit(e)\n                            }\n                        >\n                            <Dropdown.Toggle variant=\"foreground-alternate\" className=\"shadow\">\n                                {limit} Items\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu\n                                className=\"shadow dropdown-menu-end\"\n                            >\n                                <Dropdown.Item eventKey=\"5\">5 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"10\">10 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"20\">20 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"50\">50 Items</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n\n                    <Col xxl={4}>\n                        <Row className=\"g-2 w-100\">\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">De</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                />\n                            </Col>\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">Até</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={endDate}\n                                    onChange={(date) => setEndDate(date)}\n                                    selectsEnd\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                    minDate={startDate}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xxl={4}>\n                        &nbsp;\n                    </Col>\n                    <Col xs={12} xxl={3} className=\" d-flex justify-content-end align-items-end\">\n                        <InputGroup className=\"mt-2\"\n                            onChange={e => handleSearch(e)}\n                            onKeyDown={e => e.key === 'Enter' ? loadData(paginationConfig.limit, 1) : false}\n                        >\n                            <InputGroup.Text >\n                                <CsLineIcons icon=\"search\" />\n                            </InputGroup.Text>\n                            <FormControl placeholder=\"pesquisar...\" aria-label=\"Pesquisar\" aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                {/* FILTERS */}\n\n                {/* DATA */}\n                <Row className='mt-5'>\n                    <Col xs={12} xxl={12}>\n                        {data.length === 0\n                            ? <>\n                                <Row className=\"g-2 mb-5\">\n                                    <Col sm=\"12\" xxl=\"12\">\n                                        <Card className=\"sh-19\">\n                                            <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                                <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                                <p className=\"heading mb-0\">\n                                                    Ops! Nenhum resultado para essa consulta.\n                                                </p>\n\n                                                <p className=\"text-medium mb-0 text-muted\">\n                                                    Altere os filtros da consulta e tente novamente.\n                                                </p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </>\n                            : <>\n\n                                {total\n                                    ? <>\n                                        <Alert variant=\"info\">\n                                            Total de registros localizados: <strong>{total}</strong>\n                                        </Alert>\n                                    </>\n                                    : <></>\n                                }\n\n                                <table className=\"react-table rows\" >\n                                    <thead>\n                                        <tr>\n                                            {columns.map((row, index) => {\n                                                return (\n                                                    <th\n                                                        key={index}\n                                                        className={`text-muted text-small text-uppercase ${row.column ? 'cursor-pointer' : ''}`}\n                                                        onClick={() => row.column ? orderTable(row.column) : false}\n                                                    >\n                                                        <span className={`${order === row.column ? 'text-primary  font-weight-bold' : ''}`}>\n                                                            {row.name} &nbsp;\n\n                                                            {order === row.column\n                                                                ? <CsLineIcons size={10} icon={orderBy === 'asc' ? 'chevron-top' : 'chevron-bottom'} />\n                                                                : <></>\n                                                            }\n                                                        </span>\n                                                    </th>\n                                                )\n                                            })}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data.length > 0 && data.map((row, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    {columns.map((r, i) => {\n                                                        return (\n                                                            <td key={i}>\n\n                                                                {r.format ?\n                                                                    formatField(r.format, row[r.acessor], row)\n                                                                    : <>\n                                                                        {r.acessor === 'custom'\n                                                                            ? <>\n                                                                                <Button onClick={() => callView(row.id)} variant=\"outline-success\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"eye\" />\n                                                                                </Button>\n\n                                                                                &nbsp;\n                                                                                <Button onClick={() => callEdit(row.id)} variant=\"outline-info\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"edit\" />\n                                                                                </Button>\n\n                                                                                &nbsp;\n                                                                                <Button onClick={() => callDelete(row.id)} variant=\"outline-danger\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"bin\" />\n                                                                                </Button>\n\n                                                                            </>\n                                                                            : <>\n                                                                                {row[r.acessor]}\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </td>\n                                                        )\n                                                    })}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n\n                                </table>\n\n\n                                <PaginationTable\n                                    config={paginationConfig}\n                                    gotoPage={(page) => [changePaginationConfig('page', page)]}\n                                />\n\n                            </>\n                        }\n                    </Col>\n                </Row>\n                {/* DATA */}\n            </>\n        )\n    }\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required('Este campo é obrigatório'),\n        driver_type_id: Yup.string().required('Este campo é obrigatório'),\n        driver_status_id: Yup.string().required('Este campo é obrigatório'),\n        taxid: Yup.string().required('Este campo é obrigatório'),\n    })\n\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            {loading\n                ? <>\n                    <div className=\"align-items-center\">\n                        <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                        <div>Carregando...</div>\n                    </div>\n                </>\n                : <>\n                    {renderTable()}\n                </>\n            }\n\n            {/* MODAL NEW REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalNewRegister}\n                size='md'\n                centered\n                onHide={() => setModalNewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalNewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Novo cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            driver_status_id: '',\n                            driver_type_id: '',\n                            name: '',\n                            phone: '',\n                            rg: '',\n                            taxid: '',\n                            category: '',\n                            description: '',\n                            number: '',\n                            loading: false,\n                        }}\n\n                        validationSchema={validationSchema}\n\n                        onSubmit={async (values, { resetForm, setFieldValue }) => {\n                            setFieldValue('loading', true)\n                            try {\n                                const response = await api.post(`/api/v1/private/drivers`, values)\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalNewRegister(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n\n                        }}\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\"tooltip-end-bottom mt-4\">\n                                <div className=\"mb-3 form-group tooltip-end-top\">\n                                    <div className='label'> Tipo </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={type}\n                                        value={type.filter(option => option.value === values.driver_type_id)}\n                                        onChange={e => setFieldValue('driver_type_id', e.value)}\n                                    />\n                                    {errors.driver_type_id && touched.driver_type_id && <div className=\"d-block invalid-tooltip\">{errors.driver_type_id}</div>}\n                                </div>\n\n                                <div className=\"mb-3 form-group tooltip-end-top\">\n                                    <div className='label'> Status </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={status}\n                                        value={status.filter(option => option.value === values.driver_status_id)}\n                                        onChange={e => setFieldValue('driver_status_id', e.value)}\n                                    />\n                                    {errors.driver_status_id && touched.driver_status_id && <div className=\"d-block invalid-tooltip\">{errors.driver_status_id}</div>}\n                                </div>\n\n                                <Row>\n                                    <Col xs={12}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Nome </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                            {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={12}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Telefone </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"phone\" value={values.phone} />\n                                            {errors.phone && touched.phone && <div className=\"d-block invalid-tooltip\">{errors.phone}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={6}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> RG </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"rg\" value={values.rg} />\n                                            {errors.rg && touched.rg && <div className=\"d-block invalid-tooltip\">{errors.rg}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={6}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> CPF </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"taxid\" value={values.taxid} />\n                                            {errors.taxid && touched.taxid && <div className=\"d-block invalid-tooltip\">{errors.taxid}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={6}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Categoria (ex: A, B, C...) </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"category\" value={values.category} />\n                                            {errors.taxcategoryid && touched.category && <div className=\"d-block invalid-tooltip\">{errors.category}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={6}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Nº Carteira </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"number\" value={values.number} />\n                                            {errors.number && touched.number && <div className=\"d-block invalid-tooltip\">{errors.number}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={12}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Descrição </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"description\" value={values.description} />\n                                            {errors.description && touched.description && <div className=\"d-block invalid-tooltip\">{errors.description}</div>}\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                    <Button\n                                        variant=\"success\"\n                                        type=\"submit\"\n                                        disabled={values.loading}\n                                    >\n                                        {values.loading\n                                            ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                            : <>Cadastrar</>\n                                        }\n                                    </Button>\n                                </div>\n                            </Form>\n                        )}\n                    </Formik>\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL NEW REGISTER */}\n\n            {/* MODAL EDIT REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalEditRegister}\n                size='md'\n                centered\n                onHide={() => setModalEditRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalEditRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Editar</h4>\n\n                    {loadingIdData\n                        ? <>\n                            <div className=\"align-items-center\">\n                                <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                                <div>Carregando...</div>\n                            </div>\n                        </>\n                        : <Formik\n                            initialValues={{\n                                driver_status_id: idData.driver_status_id,\n                                driver_type_id: idData.driver_type_id,\n                                name: idData.name,\n                                phone: idData.phone,\n                                rg: idData.rg,\n                                taxid: idData.taxid,\n                                category: idData.category,\n                                description: idData.description,\n                                number: idData.number,\n                                loading: false\n                            }}\n\n                            validationSchema={validationSchema}\n\n                            onSubmit={async (values, { resetForm, setFieldValue }) => {\n                                setFieldValue('loading', true)\n                                try {\n                                    const response = await api.post(`/api/v1/private/drivers/${idEdit}`, values)\n\n                                    resetForm()\n\n                                    Swal.fire({\n                                        title: response.data.title,\n                                        text: response.data.message,\n                                        icon: 'success',\n                                        confirmButtonText: 'Fechar'\n                                    }).then((result) => {\n                                        setModalEditRegister(false)\n                                        loadData()\n                                    })\n\n                                } catch (error) {\n                                    Swal.fire({\n                                        title: error.response.data.title,\n                                        text: error.response.data.message,\n                                        icon: 'error',\n                                        confirmButtonText: 'Fechar'\n                                    })\n                                }\n    \n                            }}\n                        >\n                            {({ values, errors, touched, setFieldValue }) => (\n                                <Form className=\"tooltip-end-bottom mt-4\">\n                                    <div className=\"mb-3 form-group tooltip-end-top\">\n                                        <div className='label'> Tipo </div>\n                                        <ReactSelect\n                                            placeholder=\"\"\n                                            classNamePrefix=\"react-select\"\n                                            options={type}\n                                            value={type.filter(option => option.value === values.driver_type_id)}\n                                            onChange={e => setFieldValue('driver_type_id', e.value)}\n                                        />\n                                        {errors.driver_type_id && touched.driver_type_id && <div className=\"d-block invalid-tooltip\">{errors.driver_type_id}</div>}\n                                    </div>\n\n                                    <div className=\"mb-3 form-group tooltip-end-top\">\n                                        <div className='label'> Status </div>\n                                        <ReactSelect\n                                            placeholder=\"\"\n                                            classNamePrefix=\"react-select\"\n                                            options={status}\n                                            value={status.filter(option => option.value === values.driver_status_id)}\n                                            onChange={e => setFieldValue('driver_status_id', e.value)}\n                                        />\n                                        {errors.driver_status_id && touched.driver_status_id && <div className=\"d-block invalid-tooltip\">{errors.driver_status_id}</div>}\n                                    </div>\n\n                                    <Row>\n                                        <Col xs={12}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Nome </div>\n                                                <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                                {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={12}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Telefone </div>\n                                                <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"phone\" value={values.phone} />\n                                                {errors.phone && touched.phone && <div className=\"d-block invalid-tooltip\">{errors.phone}</div>}\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={6}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> RG </div>\n                                                <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"rg\" value={values.rg} />\n                                                {errors.rg && touched.rg && <div className=\"d-block invalid-tooltip\">{errors.rg}</div>}\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={6}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> CPF </div>\n                                                <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"taxid\" value={values.taxid} />\n                                                {errors.taxid && touched.taxid && <div className=\"d-block invalid-tooltip\">{errors.taxid}</div>}\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={6}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Categoria (ex: A, B, C...) </div>\n                                                <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"category\" value={values.category} />\n                                                {errors.taxcategoryid && touched.category && <div className=\"d-block invalid-tooltip\">{errors.category}</div>}\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={6}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Nº Carteira </div>\n                                                <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"number\" value={values.number} />\n                                                {errors.number && touched.number && <div className=\"d-block invalid-tooltip\">{errors.number}</div>}\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={12}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Descrição </div>\n                                                <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"description\" value={values.description} />\n                                                {errors.description && touched.description && <div className=\"d-block invalid-tooltip\">{errors.description}</div>}\n                                            </div>\n                                        </Col>\n                                    </Row>\n\n                                    <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                        <Button\n                                            variant=\"success\"\n                                            type=\"submit\"\n                                            disabled={values.loading}\n                                        >\n                                            {values.loading\n                                                ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                : <>Editar</>\n                                            }\n                                        </Button>\n                                    </div>\n                                </Form>\n                            )}\n                        </Formik>\n                    }\n\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL EDIT REGISTER */}\n\n            {/* MODAL VIEW */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalViewRegister}\n                size='md'\n                centered\n                onHide={() => setModalViewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalViewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Visualizar</h4>\n\n\n                    <div> <b>Descrição:</b> {idData.description} </div>\n                    <div> <b>Placa:</b> {idData.plate} </div>\n                    <div> <b>Renavam:</b> {idData.renavam} </div>\n                    <div> <b>Fabricante:</b> {idData.manufacturer} </div>\n                    <div> <b>Modelo:</b> {idData.model} </div>\n                    <div> <b>Ano:</b> {idData.year} </div>\n                    <div> <b>Combustível:</b> {idData.fuel} </div>\n                    <div> <b>Cor:</b> {idData.color} </div>\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL VIEW */}\n        </>\n    );\n};\n\nexport default Component;\n","/Users/caio/Projects/Samples/front-vawlog/src/views/organizations/denied.js",["1195","1196","1197","1198","1199","1200","1201","1202","1203","1204","1205","1206","1207"],"import React from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport { Field, Form, Formik } from 'formik';\nimport Swal from 'sweetalert2'\n\n\nconst Component = () => {\n    const title = 'Negado';\n    const description = 'Negado';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n    ]\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            <Row className='mt-5'>\n                <Col xs={12} xxl={12}>\n                    <Row className=\"g-2 mb-5\">\n                        <Col sm=\"12\" xxl=\"12\">\n                            <Card className=\"sh-19\">\n                                <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                    <CsLineIcons icon=\"error-hexagon\" className=\"text-danger\" size={45} />\n                                    <p className=\"heading mb-0\">\n                                        Acesso negado!\n                                    </p>\n\n                                    <p className=\"text-medium mb-4 text-muted\">\n                                        Você não possui permissão para acessar este conteúdo, entre em contato com o administrador do sistemas para solicitar acesso.\n                                    </p>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Col>\n            </Row>\n\n\n        </>\n    );\n};\n\nexport default Component;\n","/Users/caio/Projects/Samples/front-vawlog/src/views/orders/status.js",["1208","1209","1210","1211","1212","1213","1214","1215","1216"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport moment from 'moment';\nimport pt from 'date-fns/locale/pt';\nimport DatePicker from 'react-datepicker';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport PaginationTable from 'helpers/pagination';\nimport formatField from 'helpers/formatField';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2'\nimport { SketchPicker } from 'react-color';\nimport ReactSelect from 'react-select';\n\n\nconst Component = () => {\n    const title = 'Status';\n    const description = 'Status';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'list', text: 'Ordens de coleta' },\n        { to: 'collection_order_status', text: 'Status' },\n    ]\n\n    const columns = [\n        { name: 'Id', acessor: 'id', column: 'id' },\n        { name: 'Nome', acessor: 'name', column: 'name' },\n        { name: 'Cor', acessor: 'color', column: 'hint_home', format: 'color' },\n        { name: 'Icon', acessor: 'icon', column: 'fixture', format: 'icon' },\n        { name: 'Padrão', acessor: 'default', column: 'points', format: 'boolean' },\n        { name: 'Data', acessor: 'created_at', column: 'created_at' },\n        { name: '', acessor: 'custom', column: 'custom' },\n    ]\n\n    const [modalNewRegister, setModalNewRegister] = useState(false)\n    const [limit, setLimit] = useState(10)\n    const [loading, setLoading] = useState(true)\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [order, setOrder] = useState(false)\n    const [orderBy, setOrderBy] = useState('asc')\n    const [data, setData] = useState(false)\n    const [total, setTotal] = useState(false)\n    const [searchField, setSearchField] = useState('')\n    const [paginationConfig, setPaginationConfig] = useState({\n        page: 1\n    })\n\n    const [modalEditRegister, setModalEditRegister] = useState(false)\n    const [idEdit, setIdEdit] = useState(false)\n    const [loadingIdData, setLoadingIdData] = useState(false)\n    const [idData, setIdData] = useState(false)\n\n    const loadData = async (pageLimit, page) => {\n        document.body.classList.add('spinner')\n\n        pageLimit = limit\n\n        try {\n            let url = `/api/v1/private/collection_order_status?order=${orderBy}&limit=${pageLimit}&page=${page}&search=${searchField}`\n\n            if (startDate && endDate) {\n                url += `&start=${moment(startDate).format('YYYY-MM-DD')}&end=${moment(endDate).format('YYYY-MM-DD')}`\n            }\n\n            if (order) {\n                url += `&order=${orderBy}&order_by=${order}`\n            }\n\n            const response = await api.get(url)\n\n            setData(response.data.data)\n            setTotal(response.data.total)\n\n            setPaginationConfig({\n                previousPage: response.data.data.prev_page_url,\n                page: response.data.data.current_page,\n                nextPage: response.data.data.next_page_url,\n                limit: pageLimit,\n                total: response.data.data.last_page,\n                lastPage: response.data.data.last_page\n            })\n\n        } catch (error) {\n            console.log(error)\n        }\n\n        document.body.classList.remove('spinner')\n\n        setLoading(false)\n    }\n\n    const [icons, setIcons] = useState([])\n\n    const getIcons = async () => {\n        try {\n            const response = await api.get(`/api/v1/private/icons`)\n\n            let array_icons = []\n\n            response.data.map((row) => {\n                array_icons.push({\n                    label: row.name,\n                    value: row.name\n                })\n            })\n\n            setIcons(array_icons)\n        } catch (error) {\n\n        }\n    }\n\n    useEffect(() => {\n        if (icons.length === 0) {\n            getIcons()\n        }\n    }, [])\n\n    const orderTable = (param) => {\n        setOrder(param)\n\n        if (orderBy === 'asc') {\n            setOrderBy('desc')\n        } else {\n            setOrderBy('asc')\n        }\n    }\n\n    const changePaginationConfig = async (param, value) => {\n        await setPaginationConfig({\n            ...paginationConfig, [param]: value\n        })\n    }\n\n    useEffect(() => {\n        if (!data) {\n            loadData(paginationConfig.limit, paginationConfig.page)\n        }\n    }, [paginationConfig.page])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [limit])\n\n    useEffect(() => {\n        if (data) {\n            if (startDate && endDate) {\n                loadData(limit, 1)\n            }\n        }\n    }, [endDate, startDate])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [order, orderBy])\n\n    const handleSearch = (e) => {\n        setSearchField(e.target.value)\n    }\n\n    const callLoadEditRegister = async () => {\n        setLoadingIdData(true)\n        try {\n            const response = await api.get(`/api/v1/private/collection_order_status/${idEdit}`)\n\n            setIdData(response.data)\n        } catch (error) {\n\n        }\n        setLoadingIdData(false)\n    }\n\n    useEffect(() => {\n        if (modalEditRegister) {\n            if (idEdit) {\n                callLoadEditRegister()\n            }\n        }\n    }, [modalEditRegister])\n\n    const callEdit = (id) => {\n        setModalEditRegister(true)\n        setIdEdit(id)\n    }\n\n    const callDelete = async (id) => {\n        Swal.fire({\n            title: 'Tem certeza que deseja excluir este cadastro?',\n            showDenyButton: true,\n            showCancelButton: true,\n            showCancelButton: false,\n            confirmButtonText: 'Sim',\n            confirmButtonColor: '#80D946',\n            denyButtonText: `Não`,\n        }).then(async (result) => {\n            if (result.isConfirmed) {\n                try {\n                    const response = await api.delete(`/api/v1/private/collection_order_status/${id}`)\n                    Swal.fire({\n                        title: response.data.title,\n                        text: response.data.message,\n                        icon: 'success',\n                        confirmButtonText: 'Fechar'\n                    }).then((result) => {\n                        loadData()\n                    })\n                } catch (error) {\n                    Swal.fire({\n                        title: error.response.data.title,\n                        text: error.response.data.message,\n                        icon: 'error',\n                        confirmButtonText: 'Fechar'\n                    })\n                }\n            }\n        })\n    }\n\n    const renderTable = () => {\n        return (\n            <>\n                <Row>\n                    <Col xs={12} xxl={12} className=\" d-flex justify-content-end align-items-end\">\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            disabled={loading}\n                            onClick={() => setModalNewRegister(true)}\n                        >\n                            Novo Cadastro <CsLineIcons icon=\"plus\" />\n                        </Button>\n                    </Col>\n                </Row>\n\n                {/* FILTERS */}\n                <Row>\n                    <Col xs={12} xxl={1} className=\"d-flex d-flex justify-content-end align-items-end\">\n                        <Dropdown\n                            align={{ xs: 'end' }}\n                            className=\"d-inline-block ms-1\"\n                            onSelect={(e) =>\n                                setLimit(e)\n                            }\n                        >\n                            <Dropdown.Toggle variant=\"foreground-alternate\" className=\"shadow\">\n                                {limit} Items\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu\n                                className=\"shadow dropdown-menu-end\"\n                            >\n                                <Dropdown.Item eventKey=\"5\">5 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"10\">10 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"20\">20 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"50\">50 Items</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n\n                    <Col xxl={4}>\n                        <Row className=\"g-2 w-100\">\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">De</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                />\n                            </Col>\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">Até</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={endDate}\n                                    onChange={(date) => setEndDate(date)}\n                                    selectsEnd\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                    minDate={startDate}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xxl={4}>\n                        &nbsp;\n                    </Col>\n                    <Col xs={12} xxl={3} className=\" d-flex justify-content-end align-items-end\">\n                        <InputGroup className=\"mt-2\"\n                            onChange={e => handleSearch(e)}\n                            onKeyDown={e => e.key === 'Enter' ? loadData(paginationConfig.limit, 1) : false}\n                        >\n                            <InputGroup.Text >\n                                <CsLineIcons icon=\"search\" />\n                            </InputGroup.Text>\n                            <FormControl placeholder=\"pesquisar...\" aria-label=\"Pesquisar\" aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                {/* FILTERS */}\n\n                {/* DATA */}\n                <Row className='mt-5'>\n                    <Col xs={12} xxl={12}>\n                        {data.length === 0\n                            ? <>\n                                <Row className=\"g-2 mb-5\">\n                                    <Col sm=\"12\" xxl=\"12\">\n                                        <Card className=\"sh-19\">\n                                            <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                                <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                                <p className=\"heading mb-0\">\n                                                    Ops! Nenhum resultado para essa consulta.\n                                                </p>\n\n                                                <p className=\"text-medium mb-0 text-muted\">\n                                                    Altere os filtros da consulta e tente novamente.\n                                                </p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </>\n                            : <>\n\n                                {total\n                                    ? <>\n                                        <Alert variant=\"info\">\n                                            Total de registros localizados: <strong>{total}</strong>\n                                        </Alert>\n                                    </>\n                                    : <></>\n                                }\n\n                                <table className=\"react-table rows\" >\n                                    <thead>\n                                        <tr>\n                                            {columns.map((row, index) => {\n                                                return (\n                                                    <th\n                                                        key={index}\n                                                        className={`text-muted text-small text-uppercase ${row.column ? 'cursor-pointer' : ''}`}\n                                                        onClick={() => row.column ? orderTable(row.column) : false}\n                                                    >\n                                                        <span className={`${order === row.column ? 'text-primary  font-weight-bold' : ''}`}>\n                                                            {row.name} &nbsp;\n\n                                                            {order === row.column\n                                                                ? <CsLineIcons size={10} icon={orderBy === 'asc' ? 'chevron-top' : 'chevron-bottom'} />\n                                                                : <></>\n                                                            }\n                                                        </span>\n                                                    </th>\n                                                )\n                                            })}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data.length > 0 && data.map((row, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    {columns.map((r, i) => {\n                                                        return (\n                                                            <td key={i}>\n\n                                                                {r.format ?\n                                                                    formatField(r.format, row[r.acessor], row)\n                                                                    : <>\n                                                                        {r.acessor === 'custom'\n                                                                            ? <>\n                                                                                <Button onClick={() => callEdit(row.id)} variant=\"outline-info\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"edit\" />\n                                                                                </Button>\n\n                                                                                &nbsp;\n                                                                                <Button onClick={() => callDelete(row.id)} variant=\"outline-danger\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"bin\" />\n                                                                                </Button>\n\n                                                                            </>\n                                                                            : <>\n                                                                                {row[r.acessor]}\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </td>\n                                                        )\n                                                    })}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n\n                                </table>\n\n\n                                <PaginationTable\n                                    config={paginationConfig}\n                                    gotoPage={(page) => [changePaginationConfig('page', page)]}\n                                />\n\n                            </>\n                        }\n                    </Col>\n                </Row>\n                {/* DATA */}\n            </>\n        )\n    }\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required('Este campo é obrigatório'),\n    })\n\n    const formatOptionLabel = ({ value, label, customAbbreviation }) => (\n        <div style={{ display: \"flex\" }}>\n            <div>{label}</div>\n            <div style={{ marginLeft: \"10px\", color: \"#ccc\" }}>\n                <CsLineIcons icon={`${label}`} className=\"text-info\" size={20} />\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            {loading\n                ? <>\n                    <div className=\"align-items-center\">\n                        <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                        <div>Carregando...</div>\n                    </div>\n                </>\n                : <>\n                    {renderTable()}\n                </>\n            }\n\n            {/* MODAL NEW REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalNewRegister}\n                size='md'\n                centered\n                onHide={() => setModalNewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalNewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Novo cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            name: '',\n                            icon: '',\n                            default: false,\n                            color: ''\n                        }}\n                        validationSchema={validationSchema}\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/collection_order_status`, values)\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalNewRegister(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\"tooltip-end-bottom mt-4\">\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Nome </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                    {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                </div>\n\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Icone </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={icons}\n                                        value={\n                                            icons.filter(option =>\n                                                option.label === values.icon)\n                                        }\n                                        onChange={e => setFieldValue('icon', e.label)}\n                                        formatOptionLabel={formatOptionLabel}\n                                    />\n                                    {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                </div>\n\n                                <div className=\"mb-4  form-group tooltip-end-top\">\n                                    <div className='label'> Cor </div>\n                                    <div className='d-flex justify-content-center align-items-center'>\n                                        <SketchPicker\n                                            color={values.color}\n                                            onChange={(e) => setFieldValue('color', e.hex)}\n                                        />\n                                    </div>\n                                </div>\n\n                                <label>\n                                    Este atributo será padrão? &nbsp;\n                                    <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                </label>\n\n                                <Alert variant='info' className='mt-4 mb-4'>\n                                    Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                </Alert>\n\n                                <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                    <Button\n                                        variant=\"success\"\n                                        type=\"submit\"\n                                        disabled={values.loading}\n                                    >\n                                        {values.loading\n                                            ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                            : <>Cadastrar</>\n                                        }\n                                    </Button>\n                                </div>\n                            </Form>\n                        )}\n                    </Formik>\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL NEW REGISTER */}\n\n            {/* MODAL EDIT REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalEditRegister}\n                size='md'\n                centered\n                onHide={() => setModalEditRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalEditRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Editar</h4>\n\n                    {loadingIdData\n                        ? <>\n                            <div className=\"align-items-center\">\n                                <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                                <div>Carregando...</div>\n                            </div>\n                        </>\n                        : <Formik\n                            initialValues={{\n                                name: idData.name,\n                                icon: idData.icon,\n                                default: idData.default ? idData.default : false,\n                                color: idData.color\n                            }}\n\n                            validationSchema={validationSchema}\n\n                            onSubmit={async (values, { resetForm }) => {\n                                try {\n                                    const response = await api.post(`/api/v1/private/collection_order_status/${idEdit}`, values)\n\n                                    resetForm()\n\n                                    Swal.fire({\n                                        title: response.data.title,\n                                        text: response.data.message,\n                                        icon: 'success',\n                                        confirmButtonText: 'Fechar'\n                                    }).then((result) => {\n                                        setModalEditRegister(false)\n                                        loadData()\n                                    })\n                                } catch (error) {\n                                    Swal.fire({\n                                        title: error.response.data.title,\n                                        text: error.response.data.message,\n                                        icon: 'error',\n                                        confirmButtonText: 'Fechar'\n                                    })\n                                }\n                            }}\n                        >\n                            {({ values, errors, touched, setFieldValue }) => (\n                                <Form className=\"tooltip-end-bottom mt-4\">\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Nome </div>\n                                        <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                        {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                    </div>\n\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Icone </div>\n                                        <ReactSelect\n                                            placeholder=\"\"\n                                            classNamePrefix=\"react-select\"\n                                            options={icons}\n                                            value={\n                                                icons.filter(option =>\n                                                    option.label === values.icon)\n                                            }\n                                            onChange={e => setFieldValue('icon', e.label)}\n                                            formatOptionLabel={formatOptionLabel}\n                                        />\n                                        {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                    </div>\n\n                                    <div className=\"mb-4  form-group tooltip-end-top\">\n                                        <div className='label'> Cor </div>\n                                        <div className='d-flex justify-content-center align-items-center'>\n                                            <SketchPicker\n                                                color={values.color ? values.color : false}\n                                                onChange={(e) => setFieldValue('color', e.hex)}\n                                            />\n                                        </div>\n                                    </div>\n\n                                    <label>\n                                        Este atributo será padrão? &nbsp;\n                                        <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                    </label>\n\n                                    <Alert variant='info' className='mt-4 mb-4'>\n                                        Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                    </Alert>\n\n                                    <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                        <Button\n                                            variant=\"success\"\n                                            type=\"submit\"\n                                            disabled={values.loading}\n                                        >\n                                            {values.loading\n                                                ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                : <>Editar</>\n                                            }\n                                        </Button>\n                                    </div>\n                                </Form>\n                            )}\n                        </Formik>\n                    }\n\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL EDIT REGISTER */}\n        </>\n    );\n};\n\nexport default Component;\n","/Users/caio/Projects/Samples/front-vawlog/src/views/orders/list.js",["1217","1218","1219","1220","1221","1222","1223","1224","1225"],"/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport moment from 'moment';\nimport pt from 'date-fns/locale/pt';\nimport DatePicker from 'react-datepicker';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport PaginationTable from 'helpers/pagination';\nimport formatField from 'helpers/formatField';\nimport { Field, Form, Formik, useFormikContext } from 'formik';\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2'\nimport { SketchPicker } from 'react-color';\nimport ReactSelect from 'react-select';\nimport axios from 'axios';\n\n\nconst Component = () => {\n\n    const title = 'Listar';\n    const description = 'Listar';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'list', text: 'Ordens de coleta' },\n        { to: '', text: 'Listar' },\n    ]\n\n    const columns = [\n        { name: 'Ordem', acessor: 'order', column: 'order' },\n        { name: 'Empresa', acessor: 'organization', column: 'organization', format: 'organization' },\n        { name: 'Status', acessor: 'status', column: 'status', format: 'collection_order_status' },\n        { name: 'Tipo', acessor: 'type', column: 'type', format: 'collection_order_type' },\n        { name: 'Data', acessor: 'created_at', column: 'created_at' },\n        { name: '', acessor: 'custom', column: 'custom' },\n    ]\n\n    const [collectionOrderType, setCollectionOrderType] = useState([])\n    const [collectionOrderStatus, setCollectionOrderStatus] = useState([])\n    const [drivers, setDrivers] = useState([])\n    const [vehicles, setVehicles] = useState([])\n    const [organizations, setOrganizations] = useState([])\n    const [addressType, setAddressType] = useState([])\n    const [loading, setLoading] = useState(false)\n    const [modalNewRegister, setModalNewRegister] = useState(false)\n    const [limit, setLimit] = useState(10)\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [order, setOrder] = useState(false)\n    const [orderBy, setOrderBy] = useState('asc')\n    const [data, setData] = useState(false)\n    const [total, setTotal] = useState(false)\n    const [searchField, setSearchField] = useState('')\n    const [paginationConfig, setPaginationConfig] = useState({\n        page: 1\n    })\n    const [dataContent, setDataContent] = useState(false)\n    const [modalView, setModalView] = useState(false)\n    const [modalEdit, setModalEdit] = useState(false)\n    const [modalPrevision, setModalPrevision] = useState(false)\n\n    const [viewInteractions, setViewInteractions] = useState(false)\n\n    const getParams = async () => {\n        try {\n            const response = await api.get(`/api/v1/private/collection_order_type?limit=100`)\n            let array_collection_order_type = []\n            response.data.data.map((row) => {\n                array_collection_order_type.push({\n                    label: row.name,\n                    value: row.id\n                })\n            })\n            setCollectionOrderType(array_collection_order_type)\n        } catch (error) {\n        }\n\n        try {\n            const response = await api.get(`/api/v1/private/collection_order_status?limit=100`)\n            let array_collection_order_status = []\n            response.data.data.map((row) => {\n                array_collection_order_status.push({\n                    label: row.name,\n                    value: row.id\n                })\n            })\n            setCollectionOrderStatus(array_collection_order_status)\n        } catch (error) {\n        }\n\n        try {\n            const response = await api.get(`/api/v1/private/drivers?limit=100`)\n            let array_drivers = []\n            response.data.data.map((row) => {\n                array_drivers.push({\n                    label: row.name,\n                    value: row.id\n                })\n            })\n            setDrivers(array_drivers)\n        } catch (error) {\n        }\n\n        try {\n            const response = await api.get(`/api/v1/private/vehicles?limit=100`)\n            let array_vehicles = []\n            response.data.data.map((row) => {\n                array_vehicles.push({\n                    label: `(${row.plate}) ${row.model} - ${row.manufacturer}`,\n                    value: row.id\n                })\n            })\n            setVehicles(array_vehicles)\n        } catch (error) {\n        }\n\n        try {\n            const response = await api.get(`/api/v1/private/organizations?limit=100`)\n            let array_organizations = []\n            response.data.data.map((row) => {\n                array_organizations.push({\n                    label: row.social_name,\n                    value: row.id\n                })\n            })\n            setOrganizations(array_organizations)\n        } catch (error) {\n        }\n\n        try {\n            const response = await api.get(`/api/v1/private/address_type?limit=100`)\n            let array_address_type = []\n            response.data.data.map((row) => {\n                array_address_type.push({\n                    label: row.name,\n                    value: row.id\n                })\n            })\n            setAddressType(array_address_type)\n        } catch (error) {\n        }\n    }\n\n    useEffect(() => {\n        if (collectionOrderType.length === 0 && collectionOrderStatus.length === 0) {\n            getParams()\n        }\n    }, [])\n\n    const loadData = async (pageLimit, page) => {\n        document.body.classList.add('spinner')\n\n        pageLimit = limit\n\n        try {\n            let url = `/api/v1/private/collection_order?order=${orderBy}&limit=${pageLimit}&page=${page}&search=${searchField}`\n\n            if (startDate && endDate) {\n                url += `&start=${moment(startDate).format('YYYY-MM-DD')}&end=${moment(endDate).format('YYYY-MM-DD')}`\n            }\n\n            if (order) {\n                url += `&order=${orderBy}&order_by=${order}`\n            }\n\n            const response = await api.get(url)\n\n            setData(response.data.data)\n            setTotal(response.data.total)\n\n            setPaginationConfig({\n                previousPage: response.data.data.prev_page_url,\n                page: response.data.data.current_page,\n                nextPage: response.data.data.next_page_url,\n                limit: pageLimit,\n                total: response.data.data.last_page,\n                lastPage: response.data.data.last_page\n            })\n\n        } catch (error) {\n            console.log(error)\n        }\n\n        document.body.classList.remove('spinner')\n\n        setLoading(false)\n    }\n\n    const orderTable = (param) => {\n        setOrder(param)\n\n        if (orderBy === 'asc') {\n            setOrderBy('desc')\n        } else {\n            setOrderBy('asc')\n        }\n    }\n\n    const changePaginationConfig = async (param, value) => {\n        await setPaginationConfig({\n            ...paginationConfig, [param]: value\n        })\n    }\n\n    useEffect(() => {\n        if (!data) {\n            loadData(paginationConfig.limit, paginationConfig.page)\n        }\n    }, [paginationConfig.page])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [limit])\n\n    useEffect(() => {\n        if (data) {\n            if (startDate && endDate) {\n                loadData(limit, 1)\n            }\n        }\n    }, [endDate, startDate])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [order, orderBy])\n\n    const handleSearch = (e) => {\n        setSearchField(e.target.value)\n    }\n\n\n    const renderTable = () => {\n        return (\n            <>\n                <Row>\n                    <Col xs={12} xxl={12} className=\" d-flex justify-content-end align-items-end\">\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            disabled={loading}\n                            onClick={() => setModalNewRegister(true)}\n                        >\n                            Nova ordem de coleta <CsLineIcons icon=\"plus\" />\n                        </Button>\n                    </Col>\n                </Row>\n\n                {/* FILTERS */}\n                <Row>\n                    <Col xs={12} xxl={1} className=\"d-flex d-flex justify-content-end align-items-end\">\n                        <Dropdown\n                            align={{ xs: 'end' }}\n                            className=\"d-inline-block ms-1\"\n                            onSelect={(e) =>\n                                setLimit(e)\n                            }\n                        >\n                            <Dropdown.Toggle variant=\"foreground-alternate\" className=\"shadow\">\n                                {limit} Items\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu\n                                className=\"shadow dropdown-menu-end\"\n                            >\n                                <Dropdown.Item eventKey=\"5\">5 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"10\">10 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"20\">20 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"50\">50 Items</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n\n                    <Col xxl={4}>\n                        <Row className=\"g-2 w-100\">\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">De</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                />\n                            </Col>\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">Até</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={endDate}\n                                    onChange={(date) => setEndDate(date)}\n                                    selectsEnd\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                    minDate={startDate}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xxl={4}>\n                        &nbsp;\n                    </Col>\n                    <Col xs={12} xxl={3} className=\" d-flex justify-content-end align-items-end\">\n                        <InputGroup className=\"mt-2\"\n                            onChange={e => handleSearch(e)}\n                            onKeyDown={e => e.key === 'Enter' ? loadData(paginationConfig.limit, 1) : false}\n                        >\n                            <InputGroup.Text >\n                                <CsLineIcons icon=\"search\" />\n                            </InputGroup.Text>\n                            <FormControl placeholder=\"pesquisar...\" aria-label=\"Pesquisar\" aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                {/* FILTERS */}\n\n                {/* DATA */}\n                <Row className='mt-5'>\n                    <Col xs={12} xxl={12}>\n                        {data.length === 0\n                            ? <>\n                                <Row className=\"g-2 mb-5\">\n                                    <Col sm=\"12\" xxl=\"12\">\n                                        <Card className=\"sh-19\">\n                                            <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                                <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                                <p className=\"heading mb-0\">\n                                                    Ops! Nenhum resultado para essa consulta.\n                                                </p>\n\n                                                <p className=\"text-medium mb-0 text-muted\">\n                                                    Altere os filtros da consulta e tente novamente.\n                                                </p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </>\n                            : <>\n\n                                {total\n                                    ? <>\n                                        <Alert variant=\"info\">\n                                            Total de registros localizados: <strong>{total}</strong>\n                                        </Alert>\n                                    </>\n                                    : <></>\n                                }\n\n                                <table className=\"react-table rows\" >\n                                    <thead>\n                                        <tr>\n                                            {columns.map((row, index) => {\n                                                return (\n                                                    <th\n                                                        key={index}\n                                                        className={`text-muted text-small text-uppercase ${row.column ? 'cursor-pointer' : ''}`}\n                                                        onClick={() => row.column ? orderTable(row.column) : false}\n                                                    >\n                                                        <span className={`${order === row.column ? 'text-primary  font-weight-bold' : ''}`}>\n                                                            {row.name} &nbsp;\n\n                                                            {order === row.column\n                                                                ? <CsLineIcons size={10} icon={orderBy === 'asc' ? 'chevron-top' : 'chevron-bottom'} />\n                                                                : <></>\n                                                            }\n                                                        </span>\n                                                    </th>\n                                                )\n                                            })}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data.length > 0 && data.map((row, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    {columns.map((r, i) => {\n                                                        return (\n                                                            <td key={i}>\n\n                                                                {r.format ?\n                                                                    formatField(r.format, row[r.acessor], row)\n                                                                    : <>\n                                                                        {r.acessor === 'custom'\n                                                                            ? <>\n                                                                                <Button onClick={() => callView(row)} variant=\"outline-warning\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"eye\" />\n                                                                                </Button>&nbsp;\n\n                                                                                <Button onClick={() => callEdit(row)} variant=\"outline-info\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"edit\" />\n                                                                                </Button>&nbsp;\n\n                                                                                <Button onClick={() => callArchiveOrder(row)} variant=\"outline-success\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"check\" />\n                                                                                </Button>\n\n                                                                                <Button onClick={() => callSetPrevision(row)} variant=\"outline-danger\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"calendar\" />\n                                                                                </Button>\n                                                                            </>\n                                                                            : <>\n                                                                                {row[r.acessor]}\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </td>\n                                                        )\n                                                    })}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n\n                                </table>\n\n\n                                <PaginationTable\n                                    config={paginationConfig}\n                                    gotoPage={(page) => [changePaginationConfig('page', page)]}\n                                />\n\n                            </>\n                        }\n                    </Col>\n                </Row>\n                {/* DATA */}\n            </>\n        )\n    }\n\n    const ChangeZipCode = () => {\n        const { values, setFieldValue } = useFormikContext();\n        React.useEffect(() => {\n            if (values?.address_from?.zip_code && values?.address_from?.zip_code.length >= 8 && !values?.address_from?.address) {\n                axios.get(`https://viacep.com.br/ws/${values.address_from.zip_code}/json/`).then((response) => {\n                    setFieldValue('address_from.address', response.data.logradouro)\n                    setFieldValue('address_from.city', response.data.localidade)\n                    setFieldValue('address_from.district', response.data.bairro)\n                    setFieldValue('address_from.state', response.data.uf)\n                })\n            }\n\n            if (values?.address_to?.zip_code && values?.address_to?.zip_code.length >= 8 && !values?.address_to?.address) {\n                axios.get(`https://viacep.com.br/ws/${values.address_to.zip_code}/json/`).then((response) => {\n                    setFieldValue('address_to.address', response.data.logradouro)\n                    setFieldValue('address_to.city', response.data.localidade)\n                    setFieldValue('address_to.district', response.data.bairro)\n                    setFieldValue('address_to.state', response.data.uf)\n                })\n            }\n        }, [values])\n        return null\n    }\n\n    const callView = async (row) => {\n        setDataContent(row)\n        setModalView(true)\n    }\n\n    const toogleInteraction = () => {\n        setViewInteractions(!viewInteractions)\n    }\n\n    const callEdit = async (row) => {\n        setDataContent(row)\n        setModalEdit(true)\n    }\n\n    const callArchiveOrder = async (row) => {\n        Swal.fire({\n            title: 'Tem certeza que deseja arquivar esta ordem?',\n            showDenyButton: true,\n            showCancelButton: false,\n            confirmButtonText: 'Sim',\n            confirmButtonColor: '#80D946',\n            denyButtonText: `Não`,\n        }).then(async (result) => {\n            if (result.isConfirmed) {\n                try {\n                    const response = await api.post(`/api/v1/private/archive_order/close/${row.id}`)\n                    Swal.fire({\n                        title: response.data.title,\n                        text: response.data.message,\n                        icon: 'success',\n                        confirmButtonText: 'Fechar'\n                    }).then((result) => {\n                        loadData()\n                    })\n                } catch (error) {\n                    Swal.fire({\n                        title: error.response.data.title,\n                        text: error.response.data.message,\n                        icon: 'error',\n                        confirmButtonText: 'Fechar'\n                    })\n                }\n            }\n        })\n    }\n\n    const callSetPrevision = async (row) => {\n        setDataContent(row)\n        setModalPrevision(true)\n    }\n\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            {loading\n                ? <>\n                    <div className=\"align-items-center\">\n                        <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                        <div>Carregando...</div>\n                    </div>\n                </>\n                : <>\n                    {renderTable()}\n                </>\n            }\n\n\n            {/* NEW */}\n            <Modal\n                show={modalNewRegister}\n                size='lg'\n                centered\n                onHide={() => setModalNewRegister(false)}\n            >\n                <Modal.Body>\n\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalNewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Novo cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            collection_order_type_id: false,\n                            collection_order_status_id: false,\n                            organization_id: false,\n                            vehicle_id: false,\n                            driver_id: false,\n                            address_from: {\n                                address_type_id: false,\n                                address: '',\n                                zip_code: '',\n                                city: '',\n                                district: '',\n                                number: '',\n                                complement: '',\n                                state: ''\n                            },\n                            address_to: {\n                                address_type_id: false,\n                                address: '',\n                                zip_code: '',\n                                city: '',\n                                district: '',\n                                number: '',\n                                complement: '',\n                                state: ''\n                            }\n                        }}\n\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/collection_order`, {\n                                    collection_order_type_id: values.collection_order_type_id,\n                                    collection_order_status_id: values.collection_order_status_id,\n                                    organization_id: values.organization_id,\n                                    vehicle_id: values.vehicle_id,\n                                    driver_id: values.driver_id,\n                                    address_from: values.address_from,\n                                    address_to: values.address_to\n                                })\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalNewRegister(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\"mt-4\">\n                                <Row>\n                                    <Col xs={6}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Tipo </div>\n                                            <ReactSelect\n                                                placeholder=\"\"\n                                                classNamePrefix=\"react-select\"\n                                                options={collectionOrderType}\n                                                value={collectionOrderType.filter(option => option.value === values.collection_order_type_id)}\n                                                onChange={e => setFieldValue('collection_order_type_id', e.value)}\n                                            />\n                                            {errors.collection_order_type_id && touched.collection_order_type_id && <div className=\"d-block invalid-tooltip\">{errors.collection_order_type_id}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={6}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Status </div>\n                                            <ReactSelect\n                                                placeholder=\"\"\n                                                classNamePrefix=\"react-select\"\n                                                options={collectionOrderStatus}\n                                                value={collectionOrderStatus.filter(option => option.value === values.collection_order_status_id)}\n                                                onChange={e => setFieldValue('collection_order_status_id', e.value)}\n                                            />\n                                            {errors.collection_order_status_id && touched.collection_order_status_id && <div className=\"d-block invalid-tooltip\">{errors.collection_order_status_id}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={12}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Empresa </div>\n                                            <ReactSelect\n                                                placeholder=\"\"\n                                                classNamePrefix=\"react-select\"\n                                                options={organizations}\n                                                value={organizations.filter(option => option.value === values.organization_id)}\n                                                onChange={e => setFieldValue('organization_id', e.value)}\n                                            />\n                                            {errors.organization_id && touched.organization_id && <div className=\"d-block invalid-tooltip\">{errors.organization_id}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={6}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Veículo </div>\n                                            <ReactSelect\n                                                placeholder=\"\"\n                                                classNamePrefix=\"react-select\"\n                                                options={vehicles}\n                                                value={vehicles.filter(option => option.value === values.vehicle_id)}\n                                                onChange={e => setFieldValue('vehicle_id', e.value)}\n                                            />\n                                            {errors.vehicle_id && touched.vehicle_id && <div className=\"d-block invalid-tooltip\">{errors.vehicle_id}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={6}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Motorista </div>\n                                            <ReactSelect\n                                                placeholder=\"\"\n                                                classNamePrefix=\"react-select\"\n                                                options={drivers}\n                                                value={drivers.filter(option => option.value === values.driver_id)}\n                                                onChange={e => setFieldValue('driver_id', e.value)}\n                                            />\n                                            {errors.driver_id && touched.driver_id && <div className=\"d-block invalid-tooltip\">{errors.driver_id}</div>}\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                <Row className='mb-2 mt-2'>\n                                    <Col xs={12}>\n                                        <div className='text-primary h-100 mt-1'>\n                                            <h5>Endereço de retirada</h5>\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                {/* FROM */}\n                                <Row style={{ border: '1px solid #616161', padding: 5, margin: 5, borderRadius: '6px' }}>\n                                    <Col xs={6}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Tipo de endereço </div>\n                                            <ReactSelect\n                                                placeholder=\"\"\n                                                classNamePrefix=\"react-select\"\n                                                options={addressType}\n                                                value={addressType.filter(option => option.value === values.address_from?.address_type_id)}\n                                                onChange={e => setFieldValue('address_from.address_type_id', e.value)}\n                                            />\n                                        </div>\n                                    </Col>\n                                    <Col xs={6}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> CEP </div>\n                                            <Field\n                                                className=\"form-control\"\n                                                disabled={values.loading}\n                                                type=\"text\"\n                                                value={values.address_from?.zip_code}\n                                                onChange={e => setFieldValue('address_from.zip_code', e.target.value)}\n                                            />\n                                            <ChangeZipCode />\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={12}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Endereço </div>\n                                            <Field\n                                                className=\"form-control\"\n                                                disabled={values.loading}\n                                                type=\"text\"\n                                                value={values?.address_from?.address}\n                                                onChange={e => setFieldValue('address_from.address', e.target.value)}\n                                            />\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={4}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Bairro </div>\n                                            <Field\n                                                className=\"form-control\"\n                                                disabled={values.loading}\n                                                type=\"text\"\n                                                value={values?.address_from?.district}\n                                                onChange={e => setFieldValue('address_from.district', e.target.value)}\n                                            />\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={4}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Cidade </div>\n                                            <Field\n                                                className=\"form-control\"\n                                                disabled={values.loading}\n                                                type=\"text\"\n                                                value={values?.address_from?.city}\n                                                onChange={e => setFieldValue('address_from.city', e.target.value)}\n                                            />\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={4}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Estado </div>\n                                            <Field\n                                                className=\"form-control\"\n                                                disabled={values.loading}\n                                                type=\"text\"\n                                                value={values?.address_from?.state}\n                                                onChange={e => setFieldValue('address_from.state', e.target.value)}\n                                            />\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={3}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Número </div>\n                                            <Field\n                                                className=\"form-control\"\n                                                disabled={values.loading}\n                                                type=\"text\"\n                                                value={values?.address_from?.number}\n                                                onChange={e => setFieldValue('address_from.number', e.target.value)}\n                                            />\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={9}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Complemento </div>\n                                            <Field\n                                                className=\"form-control\"\n                                                disabled={values.loading}\n                                                type=\"text\"\n                                                value={values?.address_from?.complement}\n                                                onChange={e => setFieldValue('address_from.complement', e.target.value)}\n                                            />\n                                        </div>\n                                    </Col>\n                                </Row>\n                                {/* FROM */}\n\n\n                                <Row className='mb-2 mt-2'>\n                                    <Col xs={12}>\n                                        <div className='text-primary h-100 mt-1'>\n                                            <h5>Endereço de destino</h5>\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                {/* TO */}\n                                <Row style={{ border: '1px solid #616161', padding: 5, margin: 5, borderRadius: '6px' }}>\n                                    <Col xs={6}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Tipo de endereço </div>\n                                            <ReactSelect\n                                                placeholder=\"\"\n                                                classNamePrefix=\"react-select\"\n                                                options={addressType}\n                                                value={addressType.filter(option => option.value === values.address_to?.address_type_id)}\n                                                onChange={e => setFieldValue('address_to.address_type_id', e.value)}\n                                            />\n                                        </div>\n                                    </Col>\n                                    <Col xs={6}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> CEP </div>\n                                            <Field\n                                                className=\"form-control\"\n                                                disabled={values.loading}\n                                                type=\"text\"\n                                                value={values.address_to?.zip_code}\n                                                onChange={e => setFieldValue('address_to.zip_code', e.target.value)}\n                                            />\n                                            <ChangeZipCode />\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={12}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Endereço </div>\n                                            <Field\n                                                className=\"form-control\"\n                                                disabled={values.loading}\n                                                type=\"text\"\n                                                value={values?.address_to?.address}\n                                                onChange={e => setFieldValue('address_to.address', e.target.value)}\n                                            />\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={4}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Bairro </div>\n                                            <Field\n                                                className=\"form-control\"\n                                                disabled={values.loading}\n                                                type=\"text\"\n                                                value={values?.address_to?.district}\n                                                onChange={e => setFieldValue('address_to.district', e.target.value)}\n                                            />\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={4}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Cidade </div>\n                                            <Field\n                                                className=\"form-control\"\n                                                disabled={values.loading}\n                                                type=\"text\"\n                                                value={values?.address_to?.city}\n                                                onChange={e => setFieldValue('address_to.city', e.target.value)}\n                                            />\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={4}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Estado </div>\n                                            <Field\n                                                className=\"form-control\"\n                                                disabled={values.loading}\n                                                type=\"text\"\n                                                value={values?.address_to?.state}\n                                                onChange={e => setFieldValue('address_to.state', e.target.value)}\n                                            />\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={3}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Número </div>\n                                            <Field\n                                                className=\"form-control\"\n                                                disabled={values.loading}\n                                                type=\"text\"\n                                                value={values?.address_to?.number}\n                                                onChange={e => setFieldValue('address_to.number', e.target.value)}\n                                            />\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={9}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Complemento </div>\n                                            <Field\n                                                className=\"form-control\"\n                                                disabled={values.loading}\n                                                type=\"text\"\n                                                value={values?.address_to?.complement}\n                                                onChange={e => setFieldValue('address_to.complement', e.target.value)}\n                                            />\n                                        </div>\n                                    </Col>\n                                </Row>\n                                {/* TO */}\n\n                                <Row className='mt-2 mb-2'>\n                                    <Col xs={12}>\n                                        <div className='d-flex justify-content-end align-items-end'>\n                                            <Button\n                                                variant=\"success\"\n                                                type=\"submit\"\n                                                disabled={values.loading}\n                                            >\n                                                {values.loading\n                                                    ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                    : <>Cadastrar</>\n                                                }\n                                            </Button>\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                            </Form>\n                        )}\n                    </Formik>\n\n                </Modal.Body>\n            </Modal>\n            {/* NEW */}\n\n            {/* VIEW */}\n            <Modal\n                show={modalView}\n                size='lg'\n                centered\n                onHide={() => setModalView(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={10}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={2}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalView(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n\n                    <p>Ordem #{dataContent?.order}</p>\n\n\n                    <Row>\n                        <Col xs={6} className=\"mt-2\">\n                            <span className='text-primary'><b>Cliente:</b> </span> {dataContent?.organization?.social_name}\n                        </Col>\n\n                        <Col xs={6} className=\"mt-2\">\n                            <span className='text-primary'><b>CPF/CNPJ:</b> </span> {dataContent?.organization?.taxid}\n                        </Col>\n\n                        <Col xs={6} className=\"mt-2\">\n                            <span className='text-primary'><b>Status:</b> </span>\n                            {dataContent?.collection_order_status?.name} &nbsp;\n                            <CsLineIcons stroke={dataContent?.collection_order_status?.color} icon={dataContent?.collection_order_status?.icon} size={15} />\n                        </Col>\n\n                        <Col xs={6} className=\"mt-2\">\n                            <span className='text-primary'><b>Tipo:</b> </span>\n                            {dataContent?.collection_order_type?.name} &nbsp;\n                            <CsLineIcons stroke={dataContent?.collection_order_type?.color} icon={dataContent?.collection_order_type?.icon} size={15} />\n                        </Col>\n\n                        <Col xs={6} className=\"mt-2\">\n                            <span className='text-primary'><b>Motorista:</b> </span> {dataContent?.driver?.name} ({dataContent?.driver?.category} )\n                        </Col>\n\n                        <Col xs={6} className=\"mt-2\">\n                            <span className='text-primary'><b>Veículo:</b> </span> {dataContent?.vehicle?.model} ({dataContent?.vehicle?.plate} )\n                        </Col>\n                    </Row>\n\n                    <Row className='mt-2' style={{ border: '1px solid #616161', padding: 5, margin: 2, borderRadius: '6px' }}>\n                        <Col xs={12} className=\"mt-2\">\n                            <span className='text-primary'><b>Retirada:</b> </span>\n                        </Col>\n                        <Col xs={12} className=\"mt-2\">\n                            <span className='text-primary'><b>CEP:</b> </span> {dataContent?.to_address?.zip_code}\n                        </Col>\n\n                        <Col xs={12} className=\"mt-2\">\n                            <span className='text-primary'><b>Endereço:</b> </span> {dataContent?.to_address?.address}\n                        </Col>\n\n                        <Col xs={4} className=\"mt-2\">\n                            <span className='text-primary'><b>Bairro:</b> </span> {dataContent?.to_address?.district}\n                        </Col>\n\n                        <Col xs={4} className=\"mt-2\">\n                            <span className='text-primary'><b>Cidade:</b> </span> {dataContent?.to_address?.city}\n                        </Col>\n\n                        <Col xs={4} className=\"mt-2\">\n                            <span className='text-primary'><b>Estado:</b> </span> {dataContent?.to_address?.state}\n                        </Col>\n\n                        <Col xs={12} className=\"mt-2\">\n                            <span className='text-primary'><b>Complemento:</b> </span> {dataContent?.to_address?.complement}\n                        </Col>\n\n                        <Col xs={4} className=\"mt-2\">\n                            <span className='text-primary'><b>Número:</b> </span> {dataContent?.to_address?.number}\n                        </Col>\n\n                        <Col xs={12} className=\"mt-2\">\n                            <span className='text-primary'><b>Observações:</b> </span> {dataContent?.to_address?.observation}\n                        </Col>\n                    </Row>\n\n                    <Row className='mt-2' style={{ border: '1px solid #616161', padding: 5, margin: 2, borderRadius: '6px' }}>\n                        <Col xs={12} className=\"mt-2\">\n                            <span className='text-primary'><b>Envio:</b> </span>\n                        </Col>\n                        <Col xs={12} className=\"mt-2\">\n                            <span className='text-primary'><b>CEP:</b> </span> {dataContent?.from_address?.zip_code}\n                        </Col>\n\n                        <Col xs={12} className=\"mt-2\">\n                            <span className='text-primary'><b>Endereço:</b> </span> {dataContent?.from_address?.address}\n                        </Col>\n\n                        <Col xs={4} className=\"mt-2\">\n                            <span className='text-primary'><b>Bairro:</b> </span> {dataContent?.from_address?.district}\n                        </Col>\n\n                        <Col xs={4} className=\"mt-2\">\n                            <span className='text-primary'><b>Cidade:</b> </span> {dataContent?.from_address?.city}\n                        </Col>\n\n                        <Col xs={4} className=\"mt-2\">\n                            <span className='text-primary'><b>Estado:</b> </span> {dataContent?.from_address?.state}\n                        </Col>\n\n                        <Col xs={12} className=\"mt-2\">\n                            <span className='text-primary'><b>Complemento:</b> </span> {dataContent?.from_address?.complement}\n                        </Col>\n\n                        <Col xs={4} className=\"mt-2\">\n                            <span className='text-primary'><b>Número:</b> </span> {dataContent?.from_address?.number}\n                        </Col>\n\n                        <Col xs={12} className=\"mt-2\">\n                            <span className='text-primary'><b>Observações:</b> </span> {dataContent?.from_address?.observation}\n                        </Col>\n                    </Row>\n\n                    <h4 className='mt-2 pt-2'>Interações</h4>\n\n                    {dataContent && dataContent.interactions.length === 0\n                        ? <Row className=\"g-2 mb-5\">\n                            <Col sm=\"12\" xxl=\"12\">\n                                <Card className=\"sh-19\">\n                                    <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                        <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                        <p className=\"heading mb-0\">\n                                            Nenhuma interação aqui ainda\n                                        </p>\n\n                                        <p className=\"text-medium mb-0 text-muted\">\n                                            Você pode interagir com este tópico no clicando logo abaixo\n                                        </p>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        </Row>\n                        : <></>\n                    }\n\n                    {dataContent && dataContent?.interactions.map((row, index) => {\n                        let extra = row.extra && Object.keys(row.extra[0])\n\n                        return (\n                            <Row key={index} className='mt-2' style={{ border: '1px solid #616161', padding: 5, margin: 2, borderRadius: '6px' }}>\n                                {row.extra\n                                    ? <>\n                                        <Col xs={12} className=\"mt-2\">\n                                            {extra.map((r, i) => {\n                                                return <span key={r}>\n                                                    {row.extra[0][r]}\n                                                </span>\n                                            })}\n\n                                            <div style={{ fontSize: 10, display: 'flex', justifyContent: 'flex-end', alignItems: 'flex-end' }} className='text-right'>\n                                                {row.created_at}\n                                            </div>\n\n                                        </Col>\n                                    </>\n                                    : <>\n                                        <Col xs={12} className=\"mt-2\">\n                                            <span className='text-primary'><b>Nome:</b> </span> {row.owner.name}\n                                        </Col>\n\n                                        <Col xs={12} className=\"mt-2\">\n                                            <span className='text-primary'><b>Mensagem:</b> </span> {row.description}\n                                        </Col>\n\n                                        <div style={{ fontSize: 10, display: 'flex', justifyContent: 'flex-end', alignItems: 'flex-end' }} className='text-right'>\n                                            {row.created_at}\n                                        </div>\n                                    </>\n                                }\n                            </Row>\n                        )\n                    })}\n\n\n                    {!viewInteractions\n                        ? <Row className='mt-4'>\n                            <Col xs={12}>\n                                <div className='d-flex justify-content-end align-items-end'>\n                                    <Button\n                                        variant=\"info\"\n                                        type=\"submit\"\n                                        disabled={loading}\n                                        onClick={() => toogleInteraction()}\n                                    >\n                                        Adicionar interação\n                                    </Button>\n                                </div>\n                            </Col>\n                        </Row>\n                        : <>\n\n\n                            <Formik\n                                initialValues={{\n                                    description: '',\n                                    collection_order_id: dataContent?.id,\n                                }}\n\n                                onSubmit={async (values, { resetForm }) => {\n                                    try {\n                                        const response = await api.post(`/api/v1/private/collection_order_interaction/${dataContent?.id}`, values)\n\n                                        resetForm()\n\n                                        Swal.fire({\n                                            title: response.data.title,\n                                            text: response.data.message,\n                                            icon: 'success',\n                                            confirmButtonText: 'Fechar'\n                                        }).then((result) => {\n                                            setModalView(false)\n                                            loadData()\n                                        })\n\n                                    } catch (error) {\n                                        Swal.fire({\n                                            title: error.response.data.title,\n                                            text: error.response.data.message,\n                                            icon: 'error',\n                                            confirmButtonText: 'Fechar'\n                                        })\n                                    }\n                                }}\n                            >\n                                {({ values, errors, touched, setFieldValue }) => (\n                                    <Form className=\"tooltip-end-bottom mt-4\">\n                                        <div className=\"mb-3  form-group tooltip-end-top\">\n                                            <div className='label'> Descrição </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"description\" value={values.description} />\n                                            {errors.description && touched.description && <div className=\"d-block invalid-tooltip\">{errors.description}</div>}\n                                        </div>\n\n\n                                        <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                            <Button\n                                                variant=\"info\"\n                                                type=\"submit\"\n                                                disabled={values.loading}\n                                            >\n                                                {values.loading\n                                                    ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                    : <>Adicionar interação</>\n                                                }\n                                            </Button>\n                                        </div>\n                                    </Form>\n                                )}\n                            </Formik>\n\n                        </>\n                    }\n\n                </Modal.Body>\n            </Modal>\n            {/* VIEW */}\n\n            {/* EDIT */}\n            <Modal\n                show={modalEdit}\n                size='md'\n                centered\n                onHide={() => setModalEdit(false)}\n            >\n                <Modal.Body>\n\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalEdit(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Editar ordem de coleta</h4>\n\n                    <Formik\n                        initialValues={{\n                            collection_order_type_id: dataContent.collection_order_type_id ? dataContent.collection_order_type_id : false,\n                            collection_order_status_id: dataContent.collection_order_status_id ? dataContent.collection_order_status_id : false,\n                            vehicle_id: dataContent.vehicle_id ? dataContent.vehicle_id : false,\n                            driver_id: dataContent.driver_id ? dataContent.driver_id : false,\n                        }}\n\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/collection_order/${dataContent.id}`, {\n                                    collection_order_type_id: values.collection_order_type_id,\n                                    collection_order_status_id: values.collection_order_status_id,\n                                    organization_id: values.organization_id,\n                                    vehicle_id: values.vehicle_id,\n                                    driver_id: values.driver_id,\n                                })\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalNewRegister(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\"mt-4\">\n                                <Row>\n                                    <Col xs={12}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Tipo </div>\n                                            <ReactSelect\n                                                placeholder=\"\"\n                                                classNamePrefix=\"react-select\"\n                                                options={collectionOrderType}\n                                                value={collectionOrderType.filter(option => option.value === values.collection_order_type_id)}\n                                                onChange={e => setFieldValue('collection_order_type_id', e.value)}\n                                            />\n                                            {errors.collection_order_type_id && touched.collection_order_type_id && <div className=\"d-block invalid-tooltip\">{errors.collection_order_type_id}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={12}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Status </div>\n                                            <ReactSelect\n                                                placeholder=\"\"\n                                                classNamePrefix=\"react-select\"\n                                                options={collectionOrderStatus}\n                                                value={collectionOrderStatus.filter(option => option.value === values.collection_order_status_id)}\n                                                onChange={e => setFieldValue('collection_order_status_id', e.value)}\n                                            />\n                                            {errors.collection_order_status_id && touched.collection_order_status_id && <div className=\"d-block invalid-tooltip\">{errors.collection_order_status_id}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={12}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Veículo </div>\n                                            <ReactSelect\n                                                placeholder=\"\"\n                                                classNamePrefix=\"react-select\"\n                                                options={vehicles}\n                                                value={vehicles.filter(option => option.value === values.vehicle_id)}\n                                                onChange={e => setFieldValue('vehicle_id', e.value)}\n                                            />\n                                            {errors.vehicle_id && touched.vehicle_id && <div className=\"d-block invalid-tooltip\">{errors.vehicle_id}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={12}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Motorista </div>\n                                            <ReactSelect\n                                                placeholder=\"\"\n                                                classNamePrefix=\"react-select\"\n                                                options={drivers}\n                                                value={drivers.filter(option => option.value === values.driver_id)}\n                                                onChange={e => setFieldValue('driver_id', e.value)}\n                                            />\n                                            {errors.driver_id && touched.driver_id && <div className=\"d-block invalid-tooltip\">{errors.driver_id}</div>}\n                                        </div>\n                                    </Col>\n\n                                </Row>\n\n\n\n                                <Row className='mt-2 mb-2'>\n                                    <Col xs={12}>\n                                        <div className='d-flex justify-content-end align-items-end'>\n                                            <Button\n                                                variant=\"success\"\n                                                type=\"submit\"\n                                                disabled={values.loading}\n                                            >\n                                                {values.loading\n                                                    ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                    : <>Atualizar</>\n                                                }\n                                            </Button>\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                            </Form>\n                        )}\n                    </Formik>\n\n\n                </Modal.Body>\n            </Modal>\n            {/* EDIT */}\n\n            {/* VIEW */}\n            <Modal\n                show={modalPrevision}\n                size='md'\n                centered\n                onHide={() => setModalPrevision(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={10}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={2}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalPrevision(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <Row className=\"g-2 mb-5\">\n                        <Col sm=\"12\" xxl=\"12\">\n                            <Card className=\"sh-19\">\n                                <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                    <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                    <p className=\"heading mb-0\">\n                                        Atenção!\n                                    </p>\n\n                                    <p className=\"text-medium mb-0 text-muted\">\n                                        Verique as informações antes de salvar\n                                    </p>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                    </Row>\n\n                    <Formik\n                        initialValues={{\n                            \n                            prevision: dataContent.prevision ? new Date(new Date(dataContent.prevision ).setDate(new Date(dataContent.prevision).getDate() + 1)) : '',\n\n                        }}\n\n                        onSubmit={async (values, { resetForm }) => {\n                            values.prevision = moment(values.licensing).format('YYYY-MM-DD')\n\n                            try {\n                                const response = await api.post(`/api/v1/private/order/prevision/${dataContent.id}`, {\n                                    prevision: values.prevision,\n                                })\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalPrevision(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\"mt-4\">\n                                <Row>\n                                    <Col xs={12}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Previsão </div>\n                                           \n                                            <DatePicker\n                                                locale={pt}\n                                                dateFormat=\"dd/MM/yyyy\"\n                                                className=\"form-control\"\n                                                selected={values?.prevision}\n                                                onChange={e => setFieldValue('prevision', e)}\n                                                startDate={values?.prevision}\n                                            />\n                                            {errors.prevision && touched.prevision && <div className=\"d-block invalid-tooltip\">{errors.prevision}</div>}\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                <Row className='mt-2 mb-2'>\n                                    <Col xs={12}>\n                                        <div className='d-flex justify-content-end align-items-end'>\n                                            <Button\n                                                variant=\"info\"\n                                                type=\"submit\"\n                                                disabled={values.loading}\n                                            >\n                                                {values.loading\n                                                    ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                    : <>Atualizar</>\n                                                }\n                                            </Button>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </Form>\n                        )}\n                    </Formik>\n                </Modal.Body>\n            </Modal>\n        </>\n    );\n};\n\nexport default Component;\n","/Users/caio/Projects/Samples/front-vawlog/src/views/orders/type.js",["1226","1227","1228","1229","1230","1231","1232","1233","1234"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport moment from 'moment';\nimport pt from 'date-fns/locale/pt';\nimport DatePicker from 'react-datepicker';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport PaginationTable from 'helpers/pagination';\nimport formatField from 'helpers/formatField';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2'\nimport { SketchPicker } from 'react-color';\nimport ReactSelect from 'react-select';\n\n\nconst Component = () => {\n    const title = 'Tipo';\n    const description = 'Tipo';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'list', text: 'Ordens de coleta' },\n        { to: 'collection_order_type', text: 'Tipo' },\n    ]\n\n    const columns = [\n        { name: 'Id', acessor: 'id', column: 'id' },\n        { name: 'Nome', acessor: 'name', column: 'name' },\n        { name: 'Cor', acessor: 'color', column: 'hint_home', format: 'color' },\n        { name: 'Icon', acessor: 'icon', column: 'fixture', format: 'icon' },\n        { name: 'Padrão', acessor: 'default', column: 'points', format: 'boolean' },\n        { name: 'Data', acessor: 'created_at', column: 'created_at' },\n        { name: '', acessor: 'custom', column: 'custom' },\n    ]\n\n\n    const [modalNewRegister, setModalNewRegister] = useState(false)\n    const [limit, setLimit] = useState(10)\n    const [loading, setLoading] = useState(true)\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [order, setOrder] = useState(false)\n    const [orderBy, setOrderBy] = useState('asc')\n    const [data, setData] = useState(false)\n    const [total, setTotal] = useState(false)\n    const [searchField, setSearchField] = useState('')\n    const [paginationConfig, setPaginationConfig] = useState({\n        page: 1\n    })\n\n    const [modalEditRegister, setModalEditRegister] = useState(false)\n    const [idEdit, setIdEdit] = useState(false)\n    const [loadingIdData, setLoadingIdData] = useState(false)\n    const [idData, setIdData] = useState(false)\n\n    const loadData = async (pageLimit, page) => {\n        document.body.classList.add('spinner')\n\n        pageLimit = limit\n\n        try {\n            let url = `/api/v1/private/collection_order_type?order=${orderBy}&limit=${pageLimit}&page=${page}&search=${searchField}`\n\n            if (startDate && endDate) {\n                url += `&start=${moment(startDate).format('YYYY-MM-DD')}&end=${moment(endDate).format('YYYY-MM-DD')}`\n            }\n\n            if (order) {\n                url += `&order=${orderBy}&order_by=${order}`\n            }\n\n            const response = await api.get(url)\n\n            setData(response.data.data)\n            setTotal(response.data.total)\n\n            setPaginationConfig({\n                previousPage: response.data.data.prev_page_url,\n                page: response.data.data.current_page,\n                nextPage: response.data.data.next_page_url,\n                limit: pageLimit,\n                total: response.data.data.last_page,\n                lastPage: response.data.data.last_page\n            })\n\n        } catch (error) {\n            console.log(error)\n        }\n\n        document.body.classList.remove('spinner')\n\n        setLoading(false)\n    }\n\n    const [icons, setIcons] = useState([])\n\n    const getIcons = async () => {\n        try {\n            const response = await api.get(`/api/v1/private/icons`)\n\n            let array_icons = []\n\n            response.data.map((row) => {\n                array_icons.push({\n                    label: row.name,\n                    value: row.name\n                })\n            })\n\n            setIcons(array_icons)\n        } catch (error) {\n\n        }\n    }\n\n    useEffect(() => {\n        if (icons.length === 0) {\n            getIcons()\n        }\n    }, [])\n\n    const orderTable = (param) => {\n        setOrder(param)\n\n        if (orderBy === 'asc') {\n            setOrderBy('desc')\n        } else {\n            setOrderBy('asc')\n        }\n    }\n\n    const changePaginationConfig = async (param, value) => {\n        await setPaginationConfig({\n            ...paginationConfig, [param]: value\n        })\n    }\n\n    useEffect(() => {\n        if (!data) {\n            loadData(paginationConfig.limit, paginationConfig.page)\n        }\n    }, [paginationConfig.page])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [limit])\n\n    useEffect(() => {\n        if (data) {\n            if (startDate && endDate) {\n                loadData(limit, 1)\n            }\n        }\n    }, [endDate, startDate])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [order, orderBy])\n\n    const handleSearch = (e) => {\n        setSearchField(e.target.value)\n    }\n\n    const callLoadEditRegister = async () => {\n        setLoadingIdData(true)\n        try {\n            const response = await api.get(`/api/v1/private/collection_order_type/${idEdit}`)\n\n            setIdData(response.data)\n        } catch (error) {\n\n        }\n        setLoadingIdData(false)\n    }\n\n    useEffect(() => {\n        if (modalEditRegister) {\n            if (idEdit) {\n                callLoadEditRegister()\n            }\n        }\n    }, [modalEditRegister])\n\n    const callEdit = (id) => {\n        setModalEditRegister(true)\n        setIdEdit(id)\n    }\n\n    const callDelete = async (id) => {\n        Swal.fire({\n            title: 'Tem certeza que deseja excluir este cadastro?',\n            showDenyButton: true,\n            showCancelButton: true,\n            showCancelButton: false,\n            confirmButtonText: 'Sim',\n            confirmButtonColor: '#80D946',\n            denyButtonText: `Não`,\n        }).then(async (result) => {\n            if (result.isConfirmed) {\n                try {\n                    const response = await api.delete(`/api/v1/private/collection_order_type/${id}`)\n                    Swal.fire({\n                        title: response.data.title,\n                        text: response.data.message,\n                        icon: 'success',\n                        confirmButtonText: 'Fechar'\n                    }).then((result) => {\n                        loadData()\n                    })\n                } catch (error) {\n                    Swal.fire({\n                        title: error.response.data.title,\n                        text: error.response.data.message,\n                        icon: 'error',\n                        confirmButtonText: 'Fechar'\n                    })\n                }\n            }\n        })\n    }\n\n    const renderTable = () => {\n        return (\n            <>\n                <Row>\n                    <Col xs={12} xxl={12} className=\" d-flex justify-content-end align-items-end\">\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            disabled={loading}\n                            onClick={() => setModalNewRegister(true)}\n                        >\n                            Novo Cadastro <CsLineIcons icon=\"plus\" />\n                        </Button>\n                    </Col>\n                </Row>\n\n                {/* FILTERS */}\n                <Row>\n                    <Col xs={12} xxl={1} className=\"d-flex d-flex justify-content-end align-items-end\">\n                        <Dropdown\n                            align={{ xs: 'end' }}\n                            className=\"d-inline-block ms-1\"\n                            onSelect={(e) =>\n                                setLimit(e)\n                            }\n                        >\n                            <Dropdown.Toggle variant=\"foreground-alternate\" className=\"shadow\">\n                                {limit} Items\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu\n                                className=\"shadow dropdown-menu-end\"\n                            >\n                                <Dropdown.Item eventKey=\"5\">5 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"10\">10 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"20\">20 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"50\">50 Items</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n\n                    <Col xxl={4}>\n                        <Row className=\"g-2 w-100\">\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">De</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                />\n                            </Col>\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">Até</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={endDate}\n                                    onChange={(date) => setEndDate(date)}\n                                    selectsEnd\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                    minDate={startDate}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xxl={4}>\n                        &nbsp;\n                    </Col>\n                    <Col xs={12} xxl={3} className=\" d-flex justify-content-end align-items-end\">\n                        <InputGroup className=\"mt-2\"\n                            onChange={e => handleSearch(e)}\n                            onKeyDown={e => e.key === 'Enter' ? loadData(paginationConfig.limit, 1) : false}\n                        >\n                            <InputGroup.Text >\n                                <CsLineIcons icon=\"search\" />\n                            </InputGroup.Text>\n                            <FormControl placeholder=\"pesquisar...\" aria-label=\"Pesquisar\" aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                {/* FILTERS */}\n\n                {/* DATA */}\n                <Row className='mt-5'>\n                    <Col xs={12} xxl={12}>\n                        {data.length === 0\n                            ? <>\n                                <Row className=\"g-2 mb-5\">\n                                    <Col sm=\"12\" xxl=\"12\">\n                                        <Card className=\"sh-19\">\n                                            <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                                <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                                <p className=\"heading mb-0\">\n                                                    Ops! Nenhum resultado para essa consulta.\n                                                </p>\n\n                                                <p className=\"text-medium mb-0 text-muted\">\n                                                    Altere os filtros da consulta e tente novamente.\n                                                </p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </>\n                            : <>\n\n                                {total\n                                    ? <>\n                                        <Alert variant=\"info\">\n                                            Total de registros localizados: <strong>{total}</strong>\n                                        </Alert>\n                                    </>\n                                    : <></>\n                                }\n\n                                <table className=\"react-table rows\" >\n                                    <thead>\n                                        <tr>\n                                            {columns.map((row, index) => {\n                                                return (\n                                                    <th\n                                                        key={index}\n                                                        className={`text-muted text-small text-uppercase ${row.column ? 'cursor-pointer' : ''}`}\n                                                        onClick={() => row.column ? orderTable(row.column) : false}\n                                                    >\n                                                        <span className={`${order === row.column ? 'text-primary  font-weight-bold' : ''}`}>\n                                                            {row.name} &nbsp;\n\n                                                            {order === row.column\n                                                                ? <CsLineIcons size={10} icon={orderBy === 'asc' ? 'chevron-top' : 'chevron-bottom'} />\n                                                                : <></>\n                                                            }\n                                                        </span>\n                                                    </th>\n                                                )\n                                            })}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data.length > 0 && data.map((row, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    {columns.map((r, i) => {\n                                                        return (\n                                                            <td key={i}>\n\n                                                                {r.format ?\n                                                                    formatField(r.format, row[r.acessor], row)\n                                                                    : <>\n                                                                        {r.acessor === 'custom'\n                                                                            ? <>\n                                                                                <Button onClick={() => callEdit(row.id)} variant=\"outline-info\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"edit\" />\n                                                                                </Button>\n\n                                                                                &nbsp;\n                                                                                <Button onClick={() => callDelete(row.id)} variant=\"outline-danger\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"bin\" />\n                                                                                </Button>\n\n                                                                            </>\n                                                                            : <>\n                                                                                {row[r.acessor]}\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </td>\n                                                        )\n                                                    })}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n\n                                </table>\n\n\n                                <PaginationTable\n                                    config={paginationConfig}\n                                    gotoPage={(page) => [changePaginationConfig('page', page)]}\n                                />\n\n                            </>\n                        }\n                    </Col>\n                </Row>\n                {/* DATA */}\n            </>\n        )\n    }\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required('Este campo é obrigatório'),\n    })\n\n    const formatOptionLabel = ({ value, label, customAbbreviation }) => (\n        <div style={{ display: \"flex\" }}>\n            <div>{label}</div>\n            <div style={{ marginLeft: \"10px\", color: \"#ccc\" }}>\n                <CsLineIcons icon={`${label}`} className=\"text-info\" size={20} />\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            {loading\n                ? <>\n                    <div className=\"align-items-center\">\n                        <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                        <div>Carregando...</div>\n                    </div>\n                </>\n                : <>\n                    {renderTable()}\n                </>\n            }\n\n            {/* MODAL NEW REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalNewRegister}\n                size='md'\n                centered\n                onHide={() => setModalNewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalNewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Novo cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            name: '',\n                            icon: '',\n                            default: false,\n                            color: ''\n                        }}\n                        validationSchema={validationSchema}\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/collection_order_type`, values)\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalNewRegister(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\"tooltip-end-bottom mt-4\">\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Nome </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                    {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                </div>\n\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Icone </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={icons}\n                                        value={\n                                            icons.filter(option =>\n                                                option.label === values.icon)\n                                        }\n                                        onChange={e => setFieldValue('icon', e.label)}\n                                        formatOptionLabel={formatOptionLabel}\n                                    />\n                                    {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                </div>\n\n                                <div className=\"mb-4  form-group tooltip-end-top\">\n                                    <div className='label'> Cor </div>\n                                    <div className='d-flex justify-content-center align-items-center'>\n                                        <SketchPicker\n                                            color={values.color}\n                                            onChange={(e) => setFieldValue('color', e.hex)}\n                                        />\n                                    </div>\n                                </div>\n\n                                <label>\n                                    Este atributo será padrão? &nbsp;\n                                    <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                </label>\n\n                                <Alert variant='info' className='mt-4 mb-4'>\n                                    Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                </Alert>\n\n                                <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                    <Button\n                                        variant=\"success\"\n                                        type=\"submit\"\n                                        disabled={values.loading}\n                                    >\n                                        {values.loading\n                                            ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                            : <>Cadastrar</>\n                                        }\n                                    </Button>\n                                </div>\n                            </Form>\n                        )}\n                    </Formik>\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL NEW REGISTER */}\n\n            {/* MODAL EDIT REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalEditRegister}\n                size='md'\n                centered\n                onHide={() => setModalEditRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalEditRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Editar</h4>\n\n                    {loadingIdData\n                        ? <>\n                            <div className=\"align-items-center\">\n                                <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                                <div>Carregando...</div>\n                            </div>\n                        </>\n                        : <Formik\n                            initialValues={{\n                                name: idData.name,\n                                icon: idData.icon,\n                                default: idData.default ? idData.default : false,\n                                color: idData.color\n                            }}\n\n                            validationSchema={validationSchema}\n\n                            onSubmit={async (values, { resetForm }) => {\n                                try {\n                                    const response = await api.post(`/api/v1/private/collection_order_type/${idEdit}`, values)\n\n                                    resetForm()\n\n                                    Swal.fire({\n                                        title: response.data.title,\n                                        text: response.data.message,\n                                        icon: 'success',\n                                        confirmButtonText: 'Fechar'\n                                    }).then((result) => {\n                                        setModalEditRegister(false)\n                                        loadData()\n                                    })\n                                } catch (error) {\n                                    Swal.fire({\n                                        title: error.response.data.title,\n                                        text: error.response.data.message,\n                                        icon: 'error',\n                                        confirmButtonText: 'Fechar'\n                                    })\n                                }\n                            }}\n                        >\n                            {({ values, errors, touched, setFieldValue }) => (\n                                <Form className=\"tooltip-end-bottom mt-4\">\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Nome </div>\n                                        <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                        {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                    </div>\n\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Icone </div>\n                                        <ReactSelect\n                                            placeholder=\"\"\n                                            classNamePrefix=\"react-select\"\n                                            options={icons}\n                                            value={\n                                                icons.filter(option =>\n                                                    option.label === values.icon)\n                                            }\n                                            onChange={e => setFieldValue('icon', e.label)}\n                                            formatOptionLabel={formatOptionLabel}\n                                        />\n                                        {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                    </div>\n\n                                    <div className=\"mb-4  form-group tooltip-end-top\">\n                                        <div className='label'> Cor </div>\n                                        <div className='d-flex justify-content-center align-items-center'>\n                                            <SketchPicker\n                                                color={values.color ? values.color : false}\n                                                onChange={(e) => setFieldValue('color', e.hex)}\n                                            />\n                                        </div>\n                                    </div>\n\n                                    <label>\n                                        Este atributo será padrão? &nbsp;\n                                        <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                    </label>\n\n                                    <Alert variant='info' className='mt-4 mb-4'>\n                                        Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                    </Alert>\n\n                                    <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                        <Button\n                                            variant=\"success\"\n                                            type=\"submit\"\n                                            disabled={values.loading}\n                                        >\n                                            {values.loading\n                                                ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                : <>Editar</>\n                                            }\n                                        </Button>\n                                    </div>\n                                </Form>\n                            )}\n                        </Formik>\n                    }\n\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL EDIT REGISTER */}\n        </>\n    );\n};\n\nexport default Component;\n","/Users/caio/Projects/Samples/front-vawlog/src/views/organizations/list.js",["1235","1236","1237","1238","1239","1240","1241","1242","1243","1244","1245","1246","1247","1248"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport moment from 'moment';\nimport pt from 'date-fns/locale/pt';\nimport DatePicker from 'react-datepicker';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport PaginationTable from 'helpers/pagination';\nimport formatField from 'helpers/formatField';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2'\nimport ReactSelect from 'react-select';\nimport axios from 'axios';\n\n\nconst Component = () => {\n    const title = 'Empresas';\n    const description = 'Empresas';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'list', text: 'Empresas' },\n    ]\n\n    const columns = [\n        { name: 'Id', acessor: 'id', column: 'id' },\n        { name: 'Razão social', acessor: 'social_name', column: 'social_name' },\n        { name: 'CPF/CNPJ', acessor: 'taxid', column: 'taxid' },\n        { name: 'Status', acessor: '', column: '', format: 'organization_status' },\n        { name: 'Tipo', acessor: '', column: '', format: 'organization_type' },\n        { name: 'Data', acessor: 'created_at', column: 'created_at' },\n        { name: '', acessor: 'custom', column: 'custom' },\n    ]\n\n    const [modalNewRegister, setModalNewRegister] = useState(false)\n    const [limit, setLimit] = useState(10)\n    const [loading, setLoading] = useState(true)\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [order, setOrder] = useState(false)\n    const [orderBy, setOrderBy] = useState('asc')\n    const [data, setData] = useState(false)\n    const [total, setTotal] = useState(false)\n    const [searchField, setSearchField] = useState('')\n    const [paginationConfig, setPaginationConfig] = useState({\n        page: 1\n    })\n    const [numAddresses, setNumAddresses] = useState(0)\n    const [numContacts, setNumContacts] = useState(0)\n\n    const loadData = async (pageLimit, page) => {\n        document.body.classList.add('spinner')\n\n        pageLimit = limit\n\n        try {\n            let url = `/api/v1/private/organizations?order=${orderBy}&limit=${pageLimit}&page=${page}&search=${searchField}`\n\n            if (startDate && endDate) {\n                url += `&start=${moment(startDate).format('YYYY-MM-DD')}&end=${moment(endDate).format('YYYY-MM-DD')}`\n            }\n\n            if (order) {\n                url += `&order=${orderBy}&order_by=${order}`\n            }\n\n            const response = await api.get(url)\n\n            setData(response.data.data)\n            setTotal(response.data.total)\n\n            setPaginationConfig({\n                previousPage: response.data.data.prev_page_url,\n                page: response.data.data.current_page,\n                nextPage: response.data.data.next_page_url,\n                limit: pageLimit,\n                total: response.data.data.last_page,\n                lastPage: response.data.data.last_page\n            })\n\n        } catch (error) {\n            console.log(error)\n        }\n\n        document.body.classList.remove('spinner')\n\n        setLoading(false)\n    }\n\n    const orderTable = (param) => {\n        setOrder(param)\n\n        if (orderBy === 'asc') {\n            setOrderBy('desc')\n        } else {\n            setOrderBy('asc')\n        }\n    }\n\n    const changePaginationConfig = async (param, value) => {\n        await setPaginationConfig({\n            ...paginationConfig, [param]: value\n        })\n    }\n\n    useEffect(() => {\n        if (!data) {\n            loadData(paginationConfig.limit, paginationConfig.page)\n        }\n    }, [paginationConfig.page])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [limit])\n\n    useEffect(() => {\n        if (data) {\n            if (startDate && endDate) {\n                loadData(limit, 1)\n            }\n        }\n    }, [endDate, startDate])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [order, orderBy])\n\n    const handleSearch = (e) => {\n        setSearchField(e.target.value)\n    }\n\n    const [status, setStatus] = useState([])\n    const [type, setType] = useState([])\n    const [addressType, setAddressType] = useState([])\n    const [emailType, setEmailType] = useState([])\n    const [contactType, setContactType] = useState([])\n    const [phoneType, setPhoneType] = useState([])\n\n    const [addressesArray, setAddressesArray] = useState([])\n    const [contactArray, setContactArray] = useState([])\n\n    const getParams = async () => {\n        try {\n            const response = await api.get(`/api/v1/private/organization_status?limit=100`)\n            let array_organization_status = []\n            response.data.data.map((row) => {\n                array_organization_status.push({\n                    label: row.name,\n                    value: row.id\n                })\n            })\n            setStatus(array_organization_status)\n        } catch (error) { }\n\n        try {\n            const response = await api.get(`/api/v1/private/organization_type?limit=100`)\n            let array_organization_type = []\n            response.data.data.map((row) => {\n                array_organization_type.push({\n                    label: row.name,\n                    value: row.id\n                })\n            })\n            setType(array_organization_type)\n        } catch (error) { }\n\n        try {\n            const response = await api.get(`/api/v1/private/address_type?limit=100`)\n            let array_address_type = []\n            response.data.data.map((row) => {\n                array_address_type.push({\n                    label: row.name,\n                    value: row.id\n                })\n            })\n            setAddressType(array_address_type)\n        } catch (error) { }\n\n        try {\n            const response = await api.get(`/api/v1/private/email_type?limit=100`)\n            let array_email_type = []\n            response.data.data.map((row) => {\n                array_email_type.push({\n                    label: row.name,\n                    value: row.id\n                })\n            })\n            setEmailType(array_email_type)\n        } catch (error) { }\n\n        try {\n            const response = await api.get(`/api/v1/private/contact_type?limit=100`)\n            let array_contact_type = []\n            response.data.data.map((row) => {\n                array_contact_type.push({\n                    label: row.name,\n                    value: row.id\n                })\n            })\n            setContactType(array_contact_type)\n        } catch (error) { }\n\n        try {\n            const response = await api.get(`/api/v1/private/phone_type?limit=100`)\n            let array_phone_type = []\n            response.data.data.map((row) => {\n                array_phone_type.push({\n                    label: row.name,\n                    value: row.id\n                })\n            })\n            setPhoneType(array_phone_type)\n        } catch (error) { }\n    }\n\n    useEffect(() => {\n        if (status.length === 0 && type.length === 0) {\n            getParams()\n        }\n    }, [])\n\n    const setAddressesInput = async (i, field, value) => {\n        if (field === 'CEP') {\n            if (value.length >= 8) {\n                axios.get(`https://viacep.com.br/ws/${value}/json/`).then((response) => {\n                    if (response.data.logradouro) {\n                        setAddressesInput(i, 'Endereco', response.data.logradouro)\n                    }\n\n                    let newArr = [...addressesArray]\n\n                    newArr[i] = {\n                        city: response.data.localidade ? response.data.localidade : newArr[i].city,\n                        state: response.data.uf ? response.data.uf : newArr[i].state,\n                        district: response.data.bairro ? response.data.bairro : newArr[i].district,\n                        address: response.data.logradouro ? response.data.logradouro : newArr[i].address,\n                        number: newArr[i].number,\n                        address_type_id: newArr[i].address_type_id,\n                        zip_code: newArr[i].zip_code,\n                        complement: newArr[i].complement,\n                        observations: newArr[i].observations,\n                    }\n\n                    setAddressesArray(newArr)\n                })\n            }\n        }\n\n        if (!addressesArray[i]) {\n            setAddressesArray(oldAddresses => [...oldAddresses, {\n                address_type_id: field === 'Tipo' ? value : '',\n                zip_code: field === 'CEP' ? value : '',\n                address: field === 'Endereco' ? value : '',\n                state: field === 'Estado' ? value : '',\n                city: field === 'Cidade' ? value : '',\n                district: field === 'Bairro' ? value : '',\n                number: field === 'Numero' ? value : '',\n                complement: field === 'Complemento' ? value : '',\n                observations: field === 'Observacoes' ? value : '',\n            }])\n        } else {\n            let newArr = [...addressesArray]\n\n            newArr[i] = {\n                address_type_id: field === 'Tipo' ? value : newArr[i].address_type_id,\n                zip_code: field === 'CEP' ? value : newArr[i].zip_code,\n                address: field === 'Endereco' ? value : newArr[i].address,\n                state: field === 'Estado' ? value : newArr[i].state,\n                city: field === 'Cidade' ? value : newArr[i].city,\n                district: field === 'Bairro' ? value : newArr[i].district,\n                number: field === 'Numero' ? value : newArr[i].number,\n                complement: field === 'Complemento' ? value : newArr[i].complement,\n                observations: field === 'Observacoes' ? value : newArr[i].observations,\n            }\n\n            setAddressesArray(newArr)\n        }\n    }\n\n    const setContactInput = async (i, field, value) => {\n        if (!contactArray[i]) {\n\n            setContactArray(oldContacts => [...oldContacts, {\n                name: field === 'Nome' ? value : '',\n                contact_type_id: field === 'Tipo' ? value : '',\n                phones: [\n                    {\n                        number: field === 'Telefone' ? value : '',\n                        phone_type_id: field === 'Tipo_telefone' ? value : '',\n                    }\n                ],\n                emails: [\n                    {\n                        email: field === 'Email' ? value : '',\n                        email_type_id: field === 'Tipo_email' ? value : '',\n                    }\n                ]\n            }])\n\n        } else {\n            let newArr = [...contactArray]\n\n            newArr[i] = {\n                name: field === 'Nome' ? value : newArr[i].name,\n                contact_type_id: field === 'Tipo' ? value : newArr[i].contact_type_id,\n                phones: [\n                    {\n                        number: field === 'Telefone' ? value : newArr[i].phones[0].number,\n                        phone_type_id: field === 'Tipo_telefone' ? value : newArr[i].phones[0].phone_type_id,\n                    }\n                ],\n                emails: [\n                    {\n                        email: field === 'Email' ? value : newArr[i].emails[0].email,\n                        email_type_id: field === 'Tipo_email' ? value : newArr[i].emails[0].email_type_id,\n                    }\n                ]\n            }\n\n            setContactArray(newArr)\n\n        }\n    }\n\n    const [modalViewOrganization, setModalViewOrganization] = useState(false)\n    const [organizationData, setOrganizationData] = useState(false)\n\n    const callView = async (row) => {\n        setModalViewOrganization(true)\n        setOrganizationData(row)\n    }\n\n    const renderTable = () => {\n        return (\n            <>\n                <Row>\n                    <Col xs={12} xxl={12} className=\" d-flex justify-content-end align-items-end\">\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            disabled={loading}\n                            onClick={() => setModalNewRegister(true)}\n                        >\n                            Novo Cadastro <CsLineIcons icon=\"plus\" />\n                        </Button>\n                    </Col>\n                </Row>\n\n                {/* FILTERS */}\n                <Row>\n                    <Col xs={12} xxl={1} className=\"d-flex d-flex justify-content-end align-items-end\">\n                        <Dropdown\n                            align={{ xs: 'end' }}\n                            className=\"d-inline-block ms-1\"\n                            onSelect={(e) =>\n                                setLimit(e)\n                            }\n                        >\n                            <Dropdown.Toggle variant=\"foreground-alternate\" className=\"shadow\">\n                                {limit} Items\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu\n                                className=\"shadow dropdown-menu-end\"\n                            >\n                                <Dropdown.Item eventKey=\"5\">5 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"10\">10 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"20\">20 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"50\">50 Items</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n\n                    <Col xxl={4}>\n                        <Row className=\"g-2 w-100\">\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">De</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                />\n                            </Col>\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">Até</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={endDate}\n                                    onChange={(date) => setEndDate(date)}\n                                    selectsEnd\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                    minDate={startDate}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xxl={4}>\n                        &nbsp;\n                    </Col>\n                    <Col xs={12} xxl={3} className=\" d-flex justify-content-end align-items-end\">\n                        <InputGroup className=\"mt-2\"\n                            onChange={e => handleSearch(e)}\n                            onKeyDown={e => e.key === 'Enter' ? loadData(paginationConfig.limit, 1) : false}\n                        >\n                            <InputGroup.Text >\n                                <CsLineIcons icon=\"search\" />\n                            </InputGroup.Text>\n                            <FormControl placeholder=\"pesquisar...\" aria-label=\"Pesquisar\" aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                {/* FILTERS */}\n\n                {/* DATA */}\n                <Row className='mt-5'>\n                    <Col xs={12} xxl={12}>\n                        {data.length === 0\n                            ? <>\n                                <Row className=\"g-2 mb-5\">\n                                    <Col sm=\"12\" xxl=\"12\">\n                                        <Card className=\"sh-19\">\n                                            <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                                <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                                <p className=\"heading mb-0\">\n                                                    Ops! Nenhum resultado para essa consulta.\n                                                </p>\n\n                                                <p className=\"text-medium mb-0 text-muted\">\n                                                    Altere os filtros da consulta e tente novamente.\n                                                </p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </>\n                            : <>\n\n                                {total\n                                    ? <>\n                                        <Alert variant=\"info\">\n                                            Total de registros localizados: <strong>{total}</strong>\n                                        </Alert>\n                                    </>\n                                    : <></>\n                                }\n\n                                <table className=\"react-table rows\" >\n                                    <thead>\n                                        <tr>\n                                            {columns.map((row, index) => {\n                                                return (\n                                                    <th\n                                                        key={index}\n                                                        className={`text-muted text-small text-uppercase ${row.column ? 'cursor-pointer' : ''}`}\n                                                        onClick={() => row.column ? orderTable(row.column) : false}\n                                                    >\n                                                        <span className={`${order === row.column ? 'text-primary  font-weight-bold' : ''}`}>\n                                                            {row.name} &nbsp;\n\n                                                            {order === row.column\n                                                                ? <CsLineIcons size={10} icon={orderBy === 'asc' ? 'chevron-top' : 'chevron-bottom'} />\n                                                                : <></>\n                                                            }\n                                                        </span>\n                                                    </th>\n                                                )\n                                            })}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data.length > 0 && data.map((row, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    {columns.map((r, i) => {\n                                                        return (\n                                                            <td key={i}>\n\n                                                                {r.format ?\n                                                                    formatField(r.format, row[r.acessor], row)\n                                                                    : <>\n                                                                        {r.acessor === 'custom'\n                                                                            ? <>\n                                                                                <Button onClick={() => callView(row)} variant=\"outline-success\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"eye\" />\n                                                                                </Button>\n                                                                            </>\n                                                                            : <>\n                                                                                {row[r.acessor]}\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </td>\n                                                        )\n                                                    })}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n\n                                </table>\n\n\n                                <PaginationTable\n                                    config={paginationConfig}\n                                    gotoPage={(page) => [changePaginationConfig('page', page)]}\n                                />\n\n                            </>\n                        }\n                    </Col>\n                </Row>\n                {/* DATA */}\n            </>\n        )\n    }\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            {loading\n                ? <>\n                    <div className=\"align-items-center\">\n                        <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                        <div>Carregando...</div>\n                    </div>\n                </>\n                : <>\n                    {renderTable()}\n                </>\n            }\n\n            {/* MODAL NEW REGISTER */}\n            <Modal\n                show={modalNewRegister}\n                size='lg'\n                centered\n                onHide={() => setModalNewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalNewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Novo cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            social_name: '',\n                            surname: '',\n                            taxid: '',\n                            ie: '',\n                            im: '',\n                            site: '',\n                            organization_type_id: '',\n                            organization_status_id: '',\n                            addresses: [],\n                            contacts: [],\n                            phones: [],\n                            emails: []\n                        }}\n\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/organizations`, {\n                                    social_name: values.social_name,\n                                    surname: values.surname,\n                                    taxid: values.taxid,\n                                    ie: values.ie,\n                                    im: values.im,\n                                    site: values.site,\n                                    organization_type_id: values.organization_type_id,\n                                    organization_status_id: values.organization_status_id,\n                                    addresses: addressesArray,\n                                    contacts: contactArray\n                                })\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalNewRegister(false)\n                                    loadData()\n\n                                    setContactArray([])\n                                    setAddressesArray([])\n                                    setNumAddresses(0)\n                                    setNumContacts(0)\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\"tooltip-end-bottom mt-4\">\n                                <Row>\n                                    <Col xs={6}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Tipo </div>\n                                            <ReactSelect\n                                                placeholder=\"\"\n                                                classNamePrefix=\"react-select\"\n                                                options={type}\n                                                value={type.filter(option => option.value === values.organization_type_id)}\n                                                onChange={e => setFieldValue('organization_type_id', e.value)}\n                                            />\n                                            {errors.organization_type_id && touched.organization_type_id && <div className=\"d-block invalid-tooltip\">{errors.organization_type_id}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={6}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Status </div>\n                                            <ReactSelect\n                                                placeholder=\"\"\n                                                classNamePrefix=\"react-select\"\n                                                options={status}\n                                                value={status.filter(option => option.value === values.organization_status_id)}\n                                                onChange={e => setFieldValue('organization_status_id', e.value)}\n                                            />\n                                            {errors.organization_status_id && touched.organization_status_id && <div className=\"d-block invalid-tooltip\">{errors.organization_status_id}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={12}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Razão Social </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"social_name\" value={values.social_name} />\n                                            {errors.social_name && touched.social_name && <div className=\"d-block invalid-tooltip\">{errors.social_name}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={12}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Nome fantasia </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"surname\" value={values.surname} />\n                                            {errors.surname && touched.surname && <div className=\"d-block invalid-tooltip\">{errors.surname}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={4}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> CPF/CNPJ </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"taxid\" value={values.taxid} />\n                                            {errors.taxid && touched.taxid && <div className=\"d-block invalid-tooltip\">{errors.taxid}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={4}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Inscrição estadual </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"ie\" value={values.ie} />\n                                            {errors.ie && touched.ie && <div className=\"d-block invalid-tooltip\">{errors.ie}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={4}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Inscrição municipal </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"im\" value={values.im} />\n                                            {errors.im && touched.im && <div className=\"d-block invalid-tooltip\">{errors.im}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={12}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Site </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"site\" value={values.site} />\n                                            {errors.site && touched.site && <div className=\"d-block invalid-tooltip\">{errors.site}</div>}\n                                        </div>\n                                    </Col>\n                                </Row>\n\n\n                                <Row className='mb-2 mt-2'>\n                                    <Col xs={6}>\n                                        <div className='d-flex align-items-center h-100 mt-1'>\n                                            <h5>Endereço(s)</h5>\n                                        </div>\n                                    </Col>\n                                    <Col xs={6}>\n                                        <div className='d-flex justify-content-end align-items-end h-100'>\n                                            <Button\n                                                variant=\"info\"\n                                                onClick={() => setNumAddresses(numAddresses + 1)}\n                                            >\n                                                Adicionar endereço\n                                            </Button>\n                                        </div>\n                                    </Col>\n                                </Row>\n\n\n                                {new Array(numAddresses).fill(0).map((_, index) => (\n                                    <Row key={index} style={{ border: '1px solid #616161', padding: 5, margin: 5, borderRadius: '6px' }}>\n                                        <Col xs={6}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Tipo de endereço </div>\n                                                <ReactSelect\n                                                    placeholder=\"\"\n                                                    classNamePrefix=\"react-select\"\n                                                    options={addressType}\n                                                    value={addressType.filter(option => option.value === addressesArray[index]?.address_type_id)}\n                                                    onChange={e => setAddressesInput(index, 'Tipo', e.value)}\n                                                />\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={6}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> CEP </div>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    disabled={values.loading}\n                                                    type=\"text\"\n                                                    value={addressesArray[index]?.zip_code}\n                                                    onChange={e => [setAddressesInput(index, 'CEP', e.target.value)]}\n                                                />\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={12}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Endereço </div>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    disabled={values.loading}\n                                                    type=\"text\"\n                                                    value={addressesArray[index]?.address}\n                                                    onChange={e => setAddressesInput(index, 'Endereco', e.target.value)}\n                                                />\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={4}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Bairro </div>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    disabled={values.loading}\n                                                    type=\"text\"\n                                                    value={addressesArray[index]?.district}\n                                                    onChange={e => setAddressesInput(index, 'Bairro', e.target.value)}\n                                                />\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={4}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Cidade </div>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    disabled={values.loading}\n                                                    type=\"text\"\n                                                    value={addressesArray[index]?.city}\n                                                    onChange={e => setAddressesInput(index, 'Cidade', e.target.value)}\n                                                />\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={4}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Estado </div>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    disabled={values.loading}\n                                                    type=\"text\"\n                                                    value={addressesArray[index]?.state}\n                                                    onChange={e => setAddressesInput(index, 'Estado', e.target.value)}\n                                                />\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={3}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Número </div>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    disabled={values.loading}\n                                                    type=\"text\"\n                                                    value={addressesArray[index]?.number}\n                                                    onChange={e => setAddressesInput(index, 'Numero', e.target.value)}\n                                                />\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={9}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Complemento </div>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    disabled={values.loading}\n                                                    type=\"text\"\n                                                    value={addressesArray[index]?.complement}\n                                                    onChange={e => setAddressesInput(index, 'Complemento', e.target.value)}\n                                                />\n                                            </div>{ }\n                                        </Col>\n                                    </Row>\n                                ))}\n\n                                <Row className='mb-2 mt-2'>\n                                    <Col xs={6}>\n                                        <div className='d-flex align-items-center h-100 mt-1'>\n                                            <h5>Contato(s)</h5>\n                                        </div>\n                                    </Col>\n                                    <Col xs={6}>\n                                        <div className='d-flex justify-content-end align-items-end h-100'>\n                                            <Button\n                                                variant=\"info\"\n                                                onClick={() => setNumContacts(numContacts + 1)}\n                                            >\n                                                Adicionar contatos\n                                            </Button>\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                {new Array(numContacts).fill(0).map((_, index) => (\n                                    <Row key={index} style={{ border: '1px solid #616161', padding: 5, margin: 5, borderRadius: '6px' }}>\n                                        <Col xs={4}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Tipo de contato </div>\n                                                <ReactSelect\n                                                    placeholder=\"\"\n                                                    classNamePrefix=\"react-select\"\n                                                    options={contactType}\n                                                    value={contactType.filter(option => option.value === contactArray[index]?.contact_type_id)}\n                                                    onChange={e => setContactInput(index, 'Tipo', e.value)}\n                                                />\n                                            </div>\n                                        </Col>\n\n\n                                        <Col xs={8}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Nome </div>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    disabled={values.loading}\n                                                    type=\"text\"\n                                                    value={contactArray[index]?.name}\n                                                    onChange={e => setContactInput(index, 'Nome', e.target.value)}\n                                                />\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={4}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Tipo de telefone </div>\n                                                <ReactSelect\n                                                    placeholder=\"\"\n                                                    classNamePrefix=\"react-select\"\n                                                    options={phoneType}\n                                                    value={phoneType.filter(option => option.value === contactArray[index]?.phones[0].phone_type_id)}\n                                                    onChange={e => setContactInput(index, 'Tipo_telefone', e.value)}\n                                                />\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={8}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Telefone </div>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    disabled={values.loading}\n                                                    type=\"text\"\n                                                    value={contactArray[index]?.phones[0].phone}\n                                                    onChange={e => setContactInput(index, 'Telefone', e.target.value)}\n                                                />\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={4}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Tipo de email </div>\n                                                <ReactSelect\n                                                    placeholder=\"\"\n                                                    classNamePrefix=\"react-select\"\n                                                    options={emailType}\n                                                    value={emailType.filter(option => option.value === contactArray[index]?.emails[0].email_type_id)}\n                                                    onChange={e => setContactInput(index, 'Tipo_email', e.value)}\n                                                />\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={8}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Email </div>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    disabled={values.loading}\n                                                    type=\"text\"\n                                                    value={contactArray[index]?.emails[0].email}\n                                                    onChange={e => setContactInput(index, 'Email', e.target.value)}\n                                                />\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                ))}\n\n                                <Row className='mt-2 mb-2'>\n                                    <Col xs={12}>\n                                        <div className='d-flex justify-content-end align-items-end'>\n                                            <Button\n                                                variant=\"success\"\n                                                type=\"submit\"\n                                                disabled={values.loading}\n                                            >\n                                                {values.loading\n                                                    ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                    : <>Cadastrar</>\n                                                }\n                                            </Button>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </Form>\n                        )}\n                    </Formik>\n                </Modal.Body>\n            </Modal>\n            {/* MODAL NEW REGISTER */}\n\n\n            {organizationData\n                ? <>\n                    <Modal\n                        // className=\"scroll-out\"\n                        show={modalViewOrganization}\n                        size='lg'\n                        centered\n                        onHide={() => setModalViewOrganization(false)}\n                    >\n                        <Modal.Body>\n                            <Row>\n                                <Col xs={11}>\n                                    &nbsp;\n                                </Col>\n                                <Col xs={1}>\n                                    <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalViewOrganization(false)}>\n                                        <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                                    </div>\n                                </Col>\n                            </Row>\n\n\n                            <Row>\n                                <Col xs={12}>\n                                    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', }}>\n                                        <div style={{\n                                            textTransform: 'uppercase', width: 100, height: 100, borderRadius: '50%', backgroundColor: '#0C5DAF', display: 'flex', justifyContent: 'center', alignItems: 'center', fontSize: 40, fontWeight: 'bold', color: 'white'\n                                        }}>\n                                            {organizationData?.social_name[0]}{organizationData?.social_name[1]}\n                                        </div>\n                                    </div>\n                                </Col>\n                            </Row>\n\n                            <Row className='mt-3 mb-3'>\n                                <Col xs={12} className=\"mt-4\">\n                                    <span className='text-primary'><b>Razão social:</b> </span>  {organizationData?.social_name}\n                                </Col>\n\n                                <Col xs={12} className=\"mt-4\">\n                                    <span className='text-primary'><b>Nome fantasia:</b> </span>  {organizationData?.surname}\n                                </Col>\n\n                                <Col xs={4} className=\"mt-4\">\n                                    <span className='text-primary'><b>CPF/CNPF:</b> </span>  {organizationData?.taxid}\n                                </Col>\n\n                                <Col xs={4} className=\"mt-4\">\n                                    <span className='text-primary'><b>Inscrição estadual:</b> </span>  {organizationData?.ie}\n                                </Col>\n\n                                <Col xs={4} className=\"mt-4\">\n                                    <span className='text-primary'><b>Inscrição municipal:</b> </span>  {organizationData?.im}\n                                </Col>\n\n                                <Col xs={6} className=\"mt-4\">\n                                    <span className='text-primary'><b>Tipo:</b> </span>  {organizationData?.organization_type?.name}\n                                </Col>\n\n                                <Col xs={6} className=\"mt-4\">\n                                    <span className='text-primary'><b>Status:</b> </span>  {organizationData?.organization_status?.name}\n                                </Col>\n\n                                <Col xs={12} className=\"mt-4\">\n                                    <span className='text-primary'><b>Site:</b> </span>  <a href={`${organizationData?.site}`} target=\"_blank\">{organizationData?.site}</a>\n                                </Col>\n                            </Row>\n\n\n                            <h5>Endereço(s)</h5>\n\n                            {organizationData.address_list\n                                ? <Row className='mb-3 mt-3' style={{ border: '1px solid #898989', padding: 3, margin: 3, borderRadius: '6px' }}>\n                                    {organizationData.address_list.map((row, index) => {\n                                        return (\n                                            <Col xs={12} key={index}>\n                                                <Row>\n                                                    <Col xs={3} className=\"mt-4\">\n                                                        <span className='text-primary'><b>CEP:</b> </span>  {row?.address?.zip_code}\n                                                    </Col>\n\n                                                    <Col xs={9} className=\"mt-4\">\n                                                        <span className='text-primary'><b>Endereco:</b> </span>  {row?.address?.address}\n                                                    </Col>\n\n                                                    <Col xs={6} className=\"mt-4\">\n                                                        <span className='text-primary'><b>Estado:</b> </span>  {row?.address?.state}\n                                                    </Col>\n\n                                                    <Col xs={6} className=\"mt-4\">\n                                                        <span className='text-primary'><b>Cidade:</b> </span>  {row?.address?.city}\n                                                    </Col>\n\n                                                    <Col xs={6} className=\"mt-4\">\n                                                        <span className='text-primary'><b>Bairro:</b> </span>  {row?.address?.district}\n                                                    </Col>\n\n                                                    <Col xs={6} className=\"mt-4\">\n                                                        <span className='text-primary'><b>Número:</b> </span>  {row?.address?.number}\n                                                    </Col>\n\n                                                    <Col xs={12} className=\"mt-4 mb-4\">\n                                                        <span className='text-primary'><b>Complemento:</b> </span>  {row?.address?.complement}\n                                                    </Col>\n                                                </Row>\n                                            </Col>\n                                        )\n                                    })}\n                                </Row>\n                                : <></>\n                            }\n\n                            <h5>Contato(s)</h5>\n\n                            {organizationData.contact_list\n                                ? <Row className='mb-3 mt-3' style={{ border: '1px solid #898989', padding: 3, margin: 3, borderRadius: '6px' }}>\n                                    {organizationData.contact_list.contacts.map((row, index) => {\n                                        return (\n                                            <Col xs={12} key={index}>\n                                                <Row>\n                                                    <Col xs={12} className=\"mt-4\">\n                                                        <span className='text-primary'><b>Nome:</b> </span>  {row?.name}\n                                                    </Col>\n                                                    <Col xs={12} className=\"mt-4\">\n                                                        <span className='text-primary'><b>Telefone:</b> </span>  {row?.phone_list?.phones[0]?.number}\n                                                    </Col>\n                                                    <Col xs={12} className=\"mt-4 mb-4\">\n                                                        <span className='text-primary'><b>Email:</b> </span>  {row?.emails_list?.emails[0]?.email}\n                                                    </Col>\n                                                </Row>\n                                            </Col>\n                                        )\n                                    })}\n                                </Row>\n                                : <></>\n                            }\n\n\n\n                        </Modal.Body>\n                    </Modal>\n                </>\n                : <></>\n            }\n\n\n        </>\n    )\n}\n\nexport default Component\n","/Users/caio/Projects/Samples/front-vawlog/src/views/users/list.js",["1249","1250","1251","1252","1253","1254"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport moment from 'moment';\nimport pt from 'date-fns/locale/pt';\nimport DatePicker from 'react-datepicker';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport PaginationTable from 'helpers/pagination';\nimport formatField from 'helpers/formatField';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2'\nimport ReactSelect from 'react-select';\nimport axios from 'axios';\n\n\nconst Component = () => {\n    const title = 'Usuários';\n    const description = 'Usuários';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'users', text: 'Usuários' },\n        { to: 'list', text: 'Listar' },\n    ]\n\n    const columns = [\n        { name: 'Id', acessor: 'id', column: 'id' },\n        { name: 'Nome', acessor: 'name', column: 'name', format: 'username' },\n        { name: 'Email', acessor: 'email', column: 'email' },\n        { name: 'Status', acessor: 'status', column: 'status' },\n        { name: 'Nível', acessor: 'role', column: 'role' },\n        { name: 'Data', acessor: 'created_at', column: 'created_at' },\n        { name: '', acessor: 'custom', column: 'custom' },\n    ]\n\n    const [limit, setLimit] = useState(10)\n    const [loading, setLoading] = useState(true)\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [order, setOrder] = useState(false)\n    const [orderBy, setOrderBy] = useState('asc')\n    const [data, setData] = useState(false)\n    const [total, setTotal] = useState(false)\n    const [searchField, setSearchField] = useState('')\n    const [paginationConfig, setPaginationConfig] = useState({\n        page: 1\n    })\n\n    const loadData = async (pageLimit, page) => {\n\n        document.body.classList.add('spinner')\n\n        pageLimit = limit\n\n        try {\n            let url = `/api/v1/private/user/list?order=${orderBy}&limit=${pageLimit}&page=${page}&search=${searchField}`\n\n            if (startDate && endDate) {\n                url += `&start=${moment(startDate).format('YYYY-MM-DD')}&end=${moment(endDate).format('YYYY-MM-DD')}`\n            }\n\n            if (order) {\n                url += `&order=${orderBy}&order_by=${order}`\n            }\n\n            const response = await api.get(url)\n\n            setData(response.data.data)\n            setTotal(response.data.total)\n\n            setPaginationConfig({\n                previousPage: response.data.data.prev_page_url,\n                page: response.data.data.current_page,\n                nextPage: response.data.data.next_page_url,\n                limit: pageLimit,\n                total: response.data.data.last_page,\n                lastPage: response.data.data.last_page\n            })\n\n        } catch (error) {\n            console.log(error)\n        }\n\n        document.body.classList.remove('spinner')\n\n        setLoading(false)\n    }\n\n    const orderTable = (param) => {\n        setOrder(param)\n\n        if (orderBy === 'asc') {\n            setOrderBy('desc')\n        } else {\n            setOrderBy('asc')\n        }\n    }\n\n    const changePaginationConfig = async (param, value) => {\n        await setPaginationConfig({\n            ...paginationConfig, [param]: value\n        })\n    }\n\n    useEffect(() => {\n        if (!data) {\n            loadData(paginationConfig.limit, paginationConfig.page)\n        }\n    }, [paginationConfig.page])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [limit])\n\n    useEffect(() => {\n        if (data) {\n            if (startDate && endDate) {\n                loadData(limit, 1)\n            }\n        }\n    }, [endDate, startDate])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [order, orderBy])\n\n    const handleSearch = (e) => {\n        setSearchField(e.target.value)\n    }\n\n\n    const [modalView, setModalView] = useState(false)\n    const [modalEdit, setModalEdit] = useState(false)\n    const [modalChangePass, setModalChangePass] = useState(false)\n    const [userData, setUserData] = useState(false)\n    const [modalNewRegister, setModalNewRegister] = useState(false)\n\n    const [status] = useState([\n        { label: 'Approved', value: 'Approved' },\n        { label: 'Disapproved', value: 'Disapproved' },\n        { label: 'Suspended', value: 'Suspended' },\n        { label: 'Pending', value: 'Pending' },\n    ])\n\n    const [role] = useState([\n        { label: 'Master', value: 'Master' },\n        { label: 'Admin', value: 'Admin' },\n        { label: 'Customer', value: 'Customer' },\n        { label: 'Client', value: 'Client' },\n        { label: 'Tester', value: 'Tester' },\n    ])\n\n    const callView = (data) => {\n        setUserData(data)\n        setModalView(true)\n    }\n\n    const callEdit = (data) => {\n        setUserData(data)\n        setModalEdit(true)\n    }\n\n    const callChangePass = (data) => {\n        setUserData(data)\n        setModalChangePass(true)\n    }\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required('Este campo é obrigatório'),\n        password: Yup.string().required('Este campo é obrigatório'),\n        email: Yup.string().required('Este campo é obrigatório'),\n        role: Yup.string().required('Este campo é obrigatório'),\n        status: Yup.string().required('Este campo é obrigatório'),\n    })\n\n    const renderTable = () => {\n        return (\n            <>\n                <Row>\n                    <Col xs={12} xxl={12} className=\" d-flex justify-content-end align-items-end\">\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            disabled={loading}\n                            onClick={() => setModalNewRegister(true)}\n                        >\n                            Novo Usuário <CsLineIcons icon=\"user\" />\n                        </Button>\n                    </Col>\n                </Row>\n\n                {/* FILTERS */}\n                <Row>\n                    <Col xs={12} xxl={1} className=\"d-flex d-flex justify-content-end align-items-end\">\n                        <Dropdown\n                            align={{ xs: 'end' }}\n                            className=\"d-inline-block ms-1\"\n                            onSelect={(e) =>\n                                setLimit(e)\n                            }\n                        >\n                            <Dropdown.Toggle variant=\"foreground-alternate\" className=\"shadow\">\n                                {limit} Items\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu\n                                className=\"shadow dropdown-menu-end\"\n                            >\n                                <Dropdown.Item eventKey=\"5\">5 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"10\">10 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"20\">20 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"50\">50 Items</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n\n                    <Col xxl={4}>\n                        <Row className=\"g-2 w-100\">\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">De</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                />\n                            </Col>\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">Até</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={endDate}\n                                    onChange={(date) => setEndDate(date)}\n                                    selectsEnd\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                    minDate={startDate}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xxl={4}>\n                        &nbsp;\n                    </Col>\n                    <Col xs={12} xxl={3} className=\" d-flex justify-content-end align-items-end\">\n                        <InputGroup className=\"mt-2\"\n                            onChange={e => handleSearch(e)}\n                            onKeyDown={e => e.key === 'Enter' ? loadData(paginationConfig.limit, 1) : false}\n                        >\n                            <InputGroup.Text >\n                                <CsLineIcons icon=\"search\" />\n                            </InputGroup.Text>\n                            <FormControl placeholder=\"pesquisar...\" aria-label=\"Pesquisar\" aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                {/* FILTERS */}\n\n                {/* DATA */}\n                <Row className='mt-5'>\n                    <Col xs={12} xxl={12}>\n                        {data.length === 0\n                            ? <>\n                                <Row className=\"g-2 mb-5\">\n                                    <Col sm=\"12\" xxl=\"12\">\n                                        <Card className=\"sh-19\">\n                                            <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                                <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                                <p className=\"heading mb-0\">\n                                                    Ops! Nenhum resultado para essa consulta.\n                                                </p>\n\n                                                <p className=\"text-medium mb-0 text-muted\">\n                                                    Altere os filtros da consulta e tente novamente.\n                                                </p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </>\n                            : <>\n\n                                {total\n                                    ? <>\n                                        <Alert variant=\"info\">\n                                            Total de registros localizados: <strong>{total}</strong>\n                                        </Alert>\n                                    </>\n                                    : <></>\n                                }\n\n                                <table className=\"react-table rows\" >\n                                    <thead>\n                                        <tr>\n                                            {columns.map((row, index) => {\n                                                return (\n                                                    <th\n                                                        key={index}\n                                                        className={`text-muted text-small text-uppercase ${row.column ? 'cursor-pointer' : ''}`}\n                                                        onClick={() => row.column ? orderTable(row.column) : false}\n                                                    >\n                                                        <span className={`${order === row.column ? 'text-primary  font-weight-bold' : ''}`}>\n                                                            {row.name} &nbsp;\n\n                                                            {order === row.column\n                                                                ? <CsLineIcons size={10} icon={orderBy === 'asc' ? 'chevron-top' : 'chevron-bottom'} />\n                                                                : <></>\n                                                            }\n                                                        </span>\n                                                    </th>\n                                                )\n                                            })}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data.length > 0 && data.map((row, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    {columns.map((r, i) => {\n                                                        return (\n                                                            <td key={i}>\n\n                                                                {r.format ?\n                                                                    formatField(r.format, row[r.acessor], row)\n                                                                    : <>\n                                                                        {r.acessor === 'custom'\n                                                                            ? <>\n                                                                                <Button onClick={() => callView(row)} variant=\"outline-success\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"eye\" />\n                                                                                </Button> &nbsp;&nbsp;\n                                                                                <Button onClick={() => callEdit(row)} variant=\"outline-info\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"edit\" />\n                                                                                </Button>&nbsp;&nbsp;\n                                                                                <Button onClick={() => callChangePass(row)} variant=\"outline-warning\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"lock-off\" />\n                                                                                </Button>\n                                                                            </>\n                                                                            : <>\n                                                                                {row[r.acessor]}\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </td>\n                                                        )\n                                                    })}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n\n                                </table>\n\n\n                                <PaginationTable\n                                    config={paginationConfig}\n                                    gotoPage={(page) => [changePaginationConfig('page', page)]}\n                                />\n\n                            </>\n                        }\n                    </Col>\n                </Row>\n                {/* DATA */}\n            </>\n        )\n    }\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            {loading\n                ? <>\n                    <div className=\"align-items-center\">\n                        <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                        <div>Carregando...</div>\n                    </div>\n                </>\n                : <>\n                    {renderTable()}\n                </>\n            }\n\n            {/* MODAL REGISTER */}\n            <Modal\n                show={modalNewRegister}\n                size='lg'\n                centered\n                onHide={() => setModalNewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalNewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n\n                    <h4>Novo cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            name: '',\n                            email: '',\n                            password: '',\n                            status: '',\n                            role: ''\n                        }}\n\n                        validationSchema={validationSchema}\n\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/user/create`, values)\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalNewRegister(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\" mt-4\">\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Nome </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                    {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                </div>\n\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Email </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"email\" value={values.email} />\n                                    {errors.email && touched.email && <div className=\"d-block invalid-tooltip\">{errors.email}</div>}\n                                </div>\n\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Senha </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"password\" name=\"password\" value={values.password} />\n                                    {errors.password && touched.password && <div className=\"d-block invalid-tooltip\">{errors.password}</div>}\n                                </div>\n\n                                <div className=\"mb-3 form-group tooltip-end-top\">\n                                    <div className='label'> Status </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={status}\n                                        value={status.filter(option => option.value === values.status)}\n                                        onChange={e => setFieldValue('status', e.value)}\n                                    />\n                                    {errors.status && touched.status && <div className=\"d-block invalid-tooltip\">{errors.status}</div>}\n                                </div>\n\n                                <div className=\"mb-3 form-group tooltip-end-top\">\n                                    <div className='label'> Nível </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={role}\n                                        value={role.filter(option => option.value === values.role)}\n                                        onChange={e => setFieldValue('role', e.value)}\n                                    />\n                                    {errors.role && touched.role && <div className=\"d-block invalid-tooltip\">{errors.role}</div>}\n                                </div>\n\n                                <Row className='mt-2 mb-2'>\n                                    <Col xs={12}>\n                                        <div className='d-flex justify-content-end align-items-end'>\n                                            <Button\n                                                variant=\"success\"\n                                                type=\"submit\"\n                                                disabled={values.loading}\n                                            >\n                                                {values.loading\n                                                    ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                    : <>Cadastrar</>\n                                                }\n                                            </Button>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </Form>\n                        )}\n                    </Formik>\n                </Modal.Body>\n            </Modal>\n            {/* MODAL REGISTER */}\n\n            {userData\n                ? <>\n                    <Modal\n                        show={modalView}\n                        size='lg'\n                        centered\n                        onHide={() => setModalView(false)}\n                    >\n                        <Modal.Body>\n                            <Row>\n                                <Col xs={11}>\n                                    &nbsp;\n                                </Col>\n                                <Col xs={1}>\n                                    <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalView(false)}>\n                                        <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                                    </div>\n                                </Col>\n                            </Row>\n\n\n                            <Row>\n                                <Col xs={12}>\n                                    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', }}>\n                                        <div style={{\n                                            textTransform: 'uppercase', width: 100, height: 100, borderRadius: '50%', backgroundColor: '#0C5DAF', display: 'flex', justifyContent: 'center', alignItems: 'center', fontSize: 40, fontWeight: 'bold', color: 'white'\n                                        }}>\n                                            {userData?.name[0]}{userData?.name[1]}\n                                        </div>\n                                    </div>\n                                </Col>\n                            </Row>\n\n                            <Row className='mt-3 mb-3'>\n                                <Col xs={12} className=\"mt-4\">\n                                    <span className='text-primary'><b>Nome:</b> </span>  {userData?.name}\n                                </Col>\n\n                                <Col xs={12} className=\"mt-4\">\n                                    <span className='text-primary'><b>E-mail:</b> </span>  {userData?.email}\n                                </Col>\n\n                                <Col xs={12} className=\"mt-4\">\n                                    <span className='text-primary'><b>Status:</b> </span>  {userData?.status}\n                                </Col>\n\n                                <Col xs={12} className=\"mt-4\">\n                                    <span className='text-primary'><b>Nível:</b> </span>  {userData?.role}\n                                </Col>\n\n                                <Col xs={12} className=\"mt-4\">\n                                    <span className='text-primary'><b>Criação:</b> </span>  {userData?.created_at}\n                                </Col>\n                            </Row>\n\n                        </Modal.Body>\n                    </Modal>\n                </>\n                : <></>\n            }\n\n            {/* MODAL EDIT */}\n            <Modal\n                show={modalEdit}\n                size='lg'\n                centered\n                onHide={() => setModalEdit(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalEdit(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n\n                    <h4>Editar cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            name: userData?.name,\n                            email: userData?.email,\n                            status: userData?.status,\n                            role: userData?.role,\n                        }}\n\n\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/user/update/${userData?.id}`, values)\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalEdit(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\" mt-4\">\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Nome </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                    {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                </div>\n\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Email </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"email\" value={values.email} />\n                                    {errors.email && touched.email && <div className=\"d-block invalid-tooltip\">{errors.email}</div>}\n                                </div>\n\n                                <div className=\"mb-3 form-group tooltip-end-top\">\n                                    <div className='label'> Status </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={status}\n                                        value={status.filter(option => option.value === values.status)}\n                                        onChange={e => setFieldValue('status', e.value)}\n                                    />\n                                    {errors.status && touched.status && <div className=\"d-block invalid-tooltip\">{errors.status}</div>}\n                                </div>\n\n                                <div className=\"mb-3 form-group tooltip-end-top\">\n                                    <div className='label'> Nível </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={role}\n                                        value={role.filter(option => option.value === values.role)}\n                                        onChange={e => setFieldValue('role', e.value)}\n                                    />\n                                    {errors.role && touched.role && <div className=\"d-block invalid-tooltip\">{errors.role}</div>}\n                                </div>\n\n                                <Row className='mt-2 mb-2'>\n                                    <Col xs={12}>\n                                        <div className='d-flex justify-content-end align-items-end'>\n                                            <Button\n                                                variant=\"success\"\n                                                type=\"submit\"\n                                                disabled={values.loading}\n                                            >\n                                                {values.loading\n                                                    ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                    : <>Atualizar</>\n                                                }\n                                            </Button>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </Form>\n                        )}\n                    </Formik>\n                </Modal.Body>\n            </Modal>\n            {/* MODAL EDIT */}\n\n            {/* CHANGE PASS */}\n\n            <Modal\n                show={modalChangePass}\n                size='lg'\n                centered\n                onHide={() => setModalChangePass(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalChangePass(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n\n                    <h4>Alterar senha</h4>\n\n                    <Formik\n                        initialValues={{\n                            password: '',\n                        }}\n\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/user/update_password/${userData?.id}`, values)\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalChangePass(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\" mt-4\">\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Nova senha </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"password\" name=\"password\" value={values.password} />\n                                    {errors.password && touched.password && <div className=\"d-block invalid-tooltip\">{errors.password}</div>}\n                                </div>\n\n                                <Row className='mt-2 mb-2'>\n                                    <Col xs={12}>\n                                        <div className='d-flex justify-content-end align-items-end'>\n                                            <Button\n                                                variant=\"info\"\n                                                type=\"submit\"\n                                                disabled={values.loading}\n                                            >\n                                                {values.loading\n                                                    ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                    : <>Atualizar senha</>\n                                                }\n                                            </Button>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </Form>\n                        )}\n                    </Formik>\n                </Modal.Body>\n            </Modal>\n            {/* CHANGE PASS */}\n        </>\n    )\n}\n\nexport default Component\n","/Users/caio/Projects/Samples/front-vawlog/src/views/drivers/status.js",["1255","1256","1257","1258","1259","1260","1261","1262","1263"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport moment from 'moment';\nimport pt from 'date-fns/locale/pt';\nimport DatePicker from 'react-datepicker';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport PaginationTable from 'helpers/pagination';\nimport formatField from 'helpers/formatField';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2'\nimport { SketchPicker } from 'react-color';\nimport ReactSelect from 'react-select';\n\n\nconst Component = () => {\n    const title = 'Status do motorista';\n    const description = 'Status do motorista';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'config', text: 'Configurações' },\n        { to: 'driver_status', text: 'Status do motorista' },\n    ]\n\n    const columns = [\n        { name: 'Id', acessor: 'id', column: 'id' },\n        { name: 'Nome', acessor: 'name', column: 'name' },\n        { name: 'Cor', acessor: 'color', column: 'hint_home', format: 'color' },\n        { name: 'Icon', acessor: 'icon', column: 'fixture', format: 'icon' },\n        { name: 'Padrão', acessor: 'default', column: 'points', format: 'boolean' },\n        { name: 'Data', acessor: 'created_at', column: 'created_at' },\n        { name: '', acessor: 'custom', column: 'custom' },\n    ]\n\n\n    const [modalNewRegister, setModalNewRegister] = useState(false)\n    const [limit, setLimit] = useState(10)\n    const [loading, setLoading] = useState(true)\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [order, setOrder] = useState(false)\n    const [orderBy, setOrderBy] = useState('asc')\n    const [data, setData] = useState(false)\n    const [total, setTotal] = useState(false)\n    const [searchField, setSearchField] = useState('')\n    const [paginationConfig, setPaginationConfig] = useState({\n        page: 1\n    })\n\n    const [modalEditRegister, setModalEditRegister] = useState(false)\n    const [idEdit, setIdEdit] = useState(false)\n    const [loadingIdData, setLoadingIdData] = useState(false)\n    const [idData, setIdData] = useState(false)\n\n    const loadData = async (pageLimit, page) => {\n        document.body.classList.add('spinner')\n\n        pageLimit = limit\n\n        try {\n            let url = `/api/v1/private/driver_status?order=${orderBy}&limit=${pageLimit}&page=${page}&search=${searchField}`\n\n            if (startDate && endDate) {\n                url += `&start=${moment(startDate).format('YYYY-MM-DD')}&end=${moment(endDate).format('YYYY-MM-DD')}`\n            }\n\n            if (order) {\n                url += `&order=${orderBy}&order_by=${order}`\n            }\n\n            const response = await api.get(url)\n\n            setData(response.data.data)\n            setTotal(response.data.total)\n\n            setPaginationConfig({\n                previousPage: response.data.data.prev_page_url,\n                page: response.data.data.current_page,\n                nextPage: response.data.data.next_page_url,\n                limit: pageLimit,\n                total: response.data.data.last_page,\n                lastPage: response.data.data.last_page\n            })\n\n        } catch (error) {\n            console.log(error)\n        }\n\n        document.body.classList.remove('spinner')\n\n        setLoading(false)\n    }\n\n    const [icons, setIcons] = useState([])\n\n    const getIcons = async () => {\n        try {\n            const response = await api.get(`/api/v1/private/icons`)\n\n            let array_icons = []\n\n            response.data.map((row) => {\n                array_icons.push({\n                    label: row.name,\n                    value: row.name\n                })\n            })\n\n            setIcons(array_icons)\n        } catch (error) {\n\n        }\n    }\n\n    useEffect(() => {\n        if (icons.length === 0) {\n            getIcons()\n        }\n    }, [])\n\n    const orderTable = (param) => {\n        setOrder(param)\n\n        if (orderBy === 'asc') {\n            setOrderBy('desc')\n        } else {\n            setOrderBy('asc')\n        }\n    }\n\n    const changePaginationConfig = async (param, value) => {\n        await setPaginationConfig({\n            ...paginationConfig, [param]: value\n        })\n    }\n\n    useEffect(() => {\n        if (!data) {\n            loadData(paginationConfig.limit, paginationConfig.page)\n        }\n    }, [paginationConfig.page])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [limit])\n\n    useEffect(() => {\n        if (data) {\n            if (startDate && endDate) {\n                loadData(limit, 1)\n            }\n        }\n    }, [endDate, startDate])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [order, orderBy])\n\n    const handleSearch = (e) => {\n        setSearchField(e.target.value)\n    }\n\n    const callLoadEditRegister = async () => {\n        setLoadingIdData(true)\n        try {\n            const response = await api.get(`/api/v1/private/driver_status/${idEdit}`)\n\n            setIdData(response.data)\n        } catch (error) {\n\n        }\n        setLoadingIdData(false)\n    }\n\n    useEffect(() => {\n        if (modalEditRegister) {\n            if (idEdit) {\n                callLoadEditRegister()\n            }\n        }\n    }, [modalEditRegister])\n\n    const callEdit = (id) => {\n        setModalEditRegister(true)\n        setIdEdit(id)\n    }\n\n    const callDelete = async (id) => {\n        Swal.fire({\n            title: 'Tem certeza que deseja excluir este cadastro?',\n            showDenyButton: true,\n            showCancelButton: true,\n            showCancelButton: false,\n            confirmButtonText: 'Sim',\n            confirmButtonColor: '#80D946',\n            denyButtonText: `Não`,\n        }).then(async (result) => {\n            if (result.isConfirmed) {\n                try {\n                    const response = await api.delete(`/api/v1/private/driver_status/${id}`)\n                    Swal.fire({\n                        title: response.data.title,\n                        text: response.data.message,\n                        icon: 'success',\n                        confirmButtonText: 'Fechar'\n                    }).then((result) => {\n                        loadData()\n                    })\n                } catch (error) {\n                    Swal.fire({\n                        title: error.response.data.title,\n                        text: error.response.data.message,\n                        icon: 'error',\n                        confirmButtonText: 'Fechar'\n                    })\n                }\n            }\n        })\n    }\n\n    const renderTable = () => {\n        return (\n            <>\n                <Row>\n                    <Col xs={12} xxl={12} className=\" d-flex justify-content-end align-items-end\">\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            disabled={loading}\n                            onClick={() => setModalNewRegister(true)}\n                        >\n                            Novo Cadastro <CsLineIcons icon=\"plus\" />\n                        </Button>\n                    </Col>\n                </Row>\n\n                {/* FILTERS */}\n                <Row>\n                    <Col xs={12} xxl={1} className=\"d-flex d-flex justify-content-end align-items-end\">\n                        <Dropdown\n                            align={{ xs: 'end' }}\n                            className=\"d-inline-block ms-1\"\n                            onSelect={(e) =>\n                                setLimit(e)\n                            }\n                        >\n                            <Dropdown.Toggle variant=\"foreground-alternate\" className=\"shadow\">\n                                {limit} Items\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu\n                                className=\"shadow dropdown-menu-end\"\n                            >\n                                <Dropdown.Item eventKey=\"5\">5 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"10\">10 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"20\">20 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"50\">50 Items</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n\n                    <Col xxl={4}>\n                        <Row className=\"g-2 w-100\">\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">De</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                />\n                            </Col>\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">Até</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={endDate}\n                                    onChange={(date) => setEndDate(date)}\n                                    selectsEnd\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                    minDate={startDate}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xxl={4}>\n                        &nbsp;\n                    </Col>\n                    <Col xs={12} xxl={3} className=\" d-flex justify-content-end align-items-end\">\n                        <InputGroup className=\"mt-2\"\n                            onChange={e => handleSearch(e)}\n                            onKeyDown={e => e.key === 'Enter' ? loadData(paginationConfig.limit, 1) : false}\n                        >\n                            <InputGroup.Text >\n                                <CsLineIcons icon=\"search\" />\n                            </InputGroup.Text>\n                            <FormControl placeholder=\"pesquisar...\" aria-label=\"Pesquisar\" aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                {/* FILTERS */}\n\n                {/* DATA */}\n                <Row className='mt-5'>\n                    <Col xs={12} xxl={12}>\n                        {data.length === 0\n                            ? <>\n                                <Row className=\"g-2 mb-5\">\n                                    <Col sm=\"12\" xxl=\"12\">\n                                        <Card className=\"sh-19\">\n                                            <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                                <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                                <p className=\"heading mb-0\">\n                                                    Ops! Nenhum resultado para essa consulta.\n                                                </p>\n\n                                                <p className=\"text-medium mb-0 text-muted\">\n                                                    Altere os filtros da consulta e tente novamente.\n                                                </p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </>\n                            : <>\n\n                                {total\n                                    ? <>\n                                        <Alert variant=\"info\">\n                                            Total de registros localizados: <strong>{total}</strong>\n                                        </Alert>\n                                    </>\n                                    : <></>\n                                }\n\n                                <table className=\"react-table rows\" >\n                                    <thead>\n                                        <tr>\n                                            {columns.map((row, index) => {\n                                                return (\n                                                    <th\n                                                        key={index}\n                                                        className={`text-muted text-small text-uppercase ${row.column ? 'cursor-pointer' : ''}`}\n                                                        onClick={() => row.column ? orderTable(row.column) : false}\n                                                    >\n                                                        <span className={`${order === row.column ? 'text-primary  font-weight-bold' : ''}`}>\n                                                            {row.name} &nbsp;\n\n                                                            {order === row.column\n                                                                ? <CsLineIcons size={10} icon={orderBy === 'asc' ? 'chevron-top' : 'chevron-bottom'} />\n                                                                : <></>\n                                                            }\n                                                        </span>\n                                                    </th>\n                                                )\n                                            })}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data.length > 0 && data.map((row, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    {columns.map((r, i) => {\n                                                        return (\n                                                            <td key={i}>\n\n                                                                {r.format ?\n                                                                    formatField(r.format, row[r.acessor], row)\n                                                                    : <>\n                                                                        {r.acessor === 'custom'\n                                                                            ? <>\n                                                                                <Button onClick={() => callEdit(row.id)} variant=\"outline-info\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"edit\" />\n                                                                                </Button>\n\n                                                                                &nbsp;\n                                                                                <Button onClick={() => callDelete(row.id)} variant=\"outline-danger\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"bin\" />\n                                                                                </Button>\n\n                                                                            </>\n                                                                            : <>\n                                                                                {row[r.acessor]}\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </td>\n                                                        )\n                                                    })}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n\n                                </table>\n\n\n                                <PaginationTable\n                                    config={paginationConfig}\n                                    gotoPage={(page) => [changePaginationConfig('page', page)]}\n                                />\n\n                            </>\n                        }\n                    </Col>\n                </Row>\n                {/* DATA */}\n            </>\n        )\n    }\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required('Este campo é obrigatório'),\n    })\n\n    const formatOptionLabel = ({ value, label, customAbbreviation }) => (\n        <div style={{ display: \"flex\" }}>\n            <div>{label}</div>\n            <div style={{ marginLeft: \"10px\", color: \"#ccc\" }}>\n                <CsLineIcons icon={`${label}`} className=\"text-info\" size={20} />\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            {loading\n                ? <>\n                    <div className=\"align-items-center\">\n                        <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                        <div>Carregando...</div>\n                    </div>\n                </>\n                : <>\n                    {renderTable()}\n                </>\n            }\n\n            {/* MODAL NEW REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalNewRegister}\n                size='md'\n                centered\n                onHide={() => setModalNewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalNewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Novo cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            name: '',\n                            icon: '',\n                            default: false,\n                            color: ''\n                        }}\n                        validationSchema={validationSchema}\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/driver_status`, values)\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalNewRegister(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\"tooltip-end-bottom mt-4\">\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Nome </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                    {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                </div>\n\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Icone </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={icons}\n                                        value={\n                                            icons.filter(option =>\n                                                option.label === values.icon)\n                                        }\n                                        onChange={e => setFieldValue('icon', e.label)}\n                                        formatOptionLabel={formatOptionLabel}\n                                    />\n                                    {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                </div>\n\n                                <div className=\"mb-4  form-group tooltip-end-top\">\n                                    <div className='label'> Cor </div>\n                                    <div className='d-flex justify-content-center align-items-center'>\n                                        <SketchPicker\n                                            color={values.color}\n                                            onChange={(e) => setFieldValue('color', e.hex)}\n                                        />\n                                    </div>\n                                </div>\n\n                                <label>\n                                    Este atributo será padrão? &nbsp;\n                                    <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                </label>\n\n                                <Alert variant='info' className='mt-4 mb-4'>\n                                    Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                </Alert>\n\n                                <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                    <Button\n                                        variant=\"success\"\n                                        type=\"submit\"\n                                        disabled={values.loading}\n                                    >\n                                        {values.loading\n                                            ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                            : <>Cadastrar</>\n                                        }\n                                    </Button>\n                                </div>\n                            </Form>\n                        )}\n                    </Formik>\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL NEW REGISTER */}\n\n            {/* MODAL EDIT REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalEditRegister}\n                size='md'\n                centered\n                onHide={() => setModalEditRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalEditRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Editar</h4>\n\n                    {loadingIdData\n                        ? <>\n                            <div className=\"align-items-center\">\n                                <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                                <div>Carregando...</div>\n                            </div>\n                        </>\n                        : <Formik\n                            initialValues={{\n                                name: idData.name,\n                                icon: idData.icon,\n                                default: idData.default ? idData.default : false,\n                                color: idData.color\n                            }}\n\n                            validationSchema={validationSchema}\n\n                            onSubmit={async (values, { resetForm }) => {\n                                try {\n                                    const response = await api.post(`/api/v1/private/driver_status/${idEdit}`, values)\n\n                                    resetForm()\n\n                                    Swal.fire({\n                                        title: response.data.title,\n                                        text: response.data.message,\n                                        icon: 'success',\n                                        confirmButtonText: 'Fechar'\n                                    }).then((result) => {\n                                        setModalEditRegister(false)\n                                        loadData()\n                                    })\n                                } catch (error) {\n                                    Swal.fire({\n                                        title: error.response.data.title,\n                                        text: error.response.data.message,\n                                        icon: 'error',\n                                        confirmButtonText: 'Fechar'\n                                    })\n                                }\n                            }}\n                        >\n                            {({ values, errors, touched, setFieldValue }) => (\n                                <Form className=\"tooltip-end-bottom mt-4\">\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Nome </div>\n                                        <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                        {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                    </div>\n\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Icone </div>\n                                        <ReactSelect\n                                            placeholder=\"\"\n                                            classNamePrefix=\"react-select\"\n                                            options={icons}\n                                            value={\n                                                icons.filter(option =>\n                                                    option.label === values.icon)\n                                            }\n                                            onChange={e => setFieldValue('icon', e.label)}\n                                            formatOptionLabel={formatOptionLabel}\n                                        />\n                                        {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                    </div>\n\n                                    <div className=\"mb-4  form-group tooltip-end-top\">\n                                        <div className='label'> Cor </div>\n                                        <div className='d-flex justify-content-center align-items-center'>\n                                            <SketchPicker\n                                                color={values.color ? values.color : false}\n                                                onChange={(e) => setFieldValue('color', e.hex)}\n                                            />\n                                        </div>\n                                    </div>\n\n                                    <label>\n                                        Este atributo será padrão? &nbsp;\n                                        <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                    </label>\n\n                                    <Alert variant='info' className='mt-4 mb-4'>\n                                        Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                    </Alert>\n\n                                    <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                        <Button\n                                            variant=\"success\"\n                                            type=\"submit\"\n                                            disabled={values.loading}\n                                        >\n                                            {values.loading\n                                                ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                : <>Editar</>\n                                            }\n                                        </Button>\n                                    </div>\n                                </Form>\n                            )}\n                        </Formik>\n                    }\n\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL EDIT REGISTER */}\n        </>\n    );\n};\n\nexport default Component;\n","/Users/caio/Projects/Samples/front-vawlog/src/views/config/organization_status.js",["1264","1265","1266","1267","1268","1269","1270","1271","1272"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport moment from 'moment';\nimport pt from 'date-fns/locale/pt';\nimport DatePicker from 'react-datepicker';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport PaginationTable from 'helpers/pagination';\nimport formatField from 'helpers/formatField';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2'\nimport { SketchPicker } from 'react-color';\nimport ReactSelect from 'react-select';\n\n\nconst Component = () => {\n    const title = 'Status dos clientes';\n    const description = 'Status dos clientes';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'config', text: 'Configurações' },\n        { to: 'organization_status', text: 'Status dos clientes' },\n    ]\n\n    const columns = [\n        { name: 'Id', acessor: 'id', column: 'id' },\n        { name: 'Nome', acessor: 'name', column: 'name' },\n        { name: 'Cor', acessor: 'color', column: 'hint_home', format: 'color' },\n        { name: 'Icon', acessor: 'icon', column: 'fixture', format: 'icon' },\n        { name: 'Padrão', acessor: 'default', column: 'points', format: 'boolean' },\n        { name: 'Data', acessor: 'created_at', column: 'created_at' },\n        { name: '', acessor: 'custom', column: 'custom' },\n    ]\n\n\n    const [modalNewRegister, setModalNewRegister] = useState(false)\n    const [limit, setLimit] = useState(10)\n    const [loading, setLoading] = useState(true)\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [order, setOrder] = useState(false)\n    const [orderBy, setOrderBy] = useState('asc')\n    const [data, setData] = useState(false)\n    const [total, setTotal] = useState(false)\n    const [searchField, setSearchField] = useState('')\n    const [paginationConfig, setPaginationConfig] = useState({\n        page: 1\n    })\n\n    const [modalEditRegister, setModalEditRegister] = useState(false)\n    const [idEdit, setIdEdit] = useState(false)\n    const [loadingIdData, setLoadingIdData] = useState(false)\n    const [idData, setIdData] = useState(false)\n\n    const loadData = async (pageLimit, page) => {\n        document.body.classList.add('spinner')\n\n        pageLimit = limit\n\n        try {\n            let url = `/api/v1/private/organization_status?order=${orderBy}&limit=${pageLimit}&page=${page}&search=${searchField}`\n\n            if (startDate && endDate) {\n                url += `&start=${moment(startDate).format('YYYY-MM-DD')}&end=${moment(endDate).format('YYYY-MM-DD')}`\n            }\n\n            if (order) {\n                url += `&order=${orderBy}&order_by=${order}`\n            }\n\n            const response = await api.get(url)\n\n            setData(response.data.data)\n            setTotal(response.data.total)\n\n            setPaginationConfig({\n                previousPage: response.data.data.prev_page_url,\n                page: response.data.data.current_page,\n                nextPage: response.data.data.next_page_url,\n                limit: pageLimit,\n                total: response.data.data.last_page,\n                lastPage: response.data.data.last_page\n            })\n\n        } catch (error) {\n            console.log(error)\n        }\n\n        document.body.classList.remove('spinner')\n\n        setLoading(false)\n    }\n\n    const [icons, setIcons] = useState([])\n\n    const getIcons = async () => {\n        try {\n            const response = await api.get(`/api/v1/private/icons`)\n\n            let array_icons = []\n\n            response.data.map((row) => {\n                array_icons.push({\n                    label: row.name,\n                    value: row.name\n                })\n            })\n\n            setIcons(array_icons)\n        } catch (error) {\n\n        }\n    }\n\n    useEffect(() => {\n        if (icons.length === 0) {\n            getIcons()\n        }\n    }, [])\n\n    const orderTable = (param) => {\n        setOrder(param)\n\n        if (orderBy === 'asc') {\n            setOrderBy('desc')\n        } else {\n            setOrderBy('asc')\n        }\n    }\n\n    const changePaginationConfig = async (param, value) => {\n        await setPaginationConfig({\n            ...paginationConfig, [param]: value\n        })\n    }\n\n    useEffect(() => {\n        if (!data) {\n            loadData(paginationConfig.limit, paginationConfig.page)\n        }\n    }, [paginationConfig.page])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [limit])\n\n    useEffect(() => {\n        if (data) {\n            if (startDate && endDate) {\n                loadData(limit, 1)\n            }\n        }\n    }, [endDate, startDate])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [order, orderBy])\n\n    const handleSearch = (e) => {\n        setSearchField(e.target.value)\n    }\n\n    const callLoadEditRegister = async () => {\n        setLoadingIdData(true)\n        try {\n            const response = await api.get(`/api/v1/private/organization_status/${idEdit}`)\n\n            setIdData(response.data)\n        } catch (error) {\n\n        }\n        setLoadingIdData(false)\n    }\n\n    useEffect(() => {\n        if (modalEditRegister) {\n            if (idEdit) {\n                callLoadEditRegister()\n            }\n        }\n    }, [modalEditRegister])\n\n    const callEdit = (id) => {\n        setModalEditRegister(true)\n        setIdEdit(id)\n    }\n\n    const callDelete = async (id) => {\n        Swal.fire({\n            title: 'Tem certeza que deseja excluir este cadastro?',\n            showDenyButton: true,\n            showCancelButton: true,\n            showCancelButton: false,\n            confirmButtonText: 'Sim',\n            confirmButtonColor: '#80D946',\n            denyButtonText: `Não`,\n        }).then(async (result) => {\n            if (result.isConfirmed) {\n                try {\n                    const response = await api.delete(`/api/v1/private/organization_status/${id}`)\n                    Swal.fire({\n                        title: response.data.title,\n                        text: response.data.message,\n                        icon: 'success',\n                        confirmButtonText: 'Fechar'\n                    }).then((result) => {\n                        loadData()\n                    })\n                } catch (error) {\n                    Swal.fire({\n                        title: error.response.data.title,\n                        text: error.response.data.message,\n                        icon: 'error',\n                        confirmButtonText: 'Fechar'\n                    })\n                }\n            }\n        })\n    }\n\n    const renderTable = () => {\n        return (\n            <>\n                <Row>\n                    <Col xs={12} xxl={12} className=\" d-flex justify-content-end align-items-end\">\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            disabled={loading}\n                            onClick={() => setModalNewRegister(true)}\n                        >\n                            Novo Cadastro <CsLineIcons icon=\"plus\" />\n                        </Button>\n                    </Col>\n                </Row>\n\n                {/* FILTERS */}\n                <Row>\n                    <Col xs={12} xxl={1} className=\"d-flex d-flex justify-content-end align-items-end\">\n                        <Dropdown\n                            align={{ xs: 'end' }}\n                            className=\"d-inline-block ms-1\"\n                            onSelect={(e) =>\n                                setLimit(e)\n                            }\n                        >\n                            <Dropdown.Toggle variant=\"foreground-alternate\" className=\"shadow\">\n                                {limit} Items\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu\n                                className=\"shadow dropdown-menu-end\"\n                            >\n                                <Dropdown.Item eventKey=\"5\">5 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"10\">10 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"20\">20 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"50\">50 Items</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n\n                    <Col xxl={4}>\n                        <Row className=\"g-2 w-100\">\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">De</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                />\n                            </Col>\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">Até</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={endDate}\n                                    onChange={(date) => setEndDate(date)}\n                                    selectsEnd\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                    minDate={startDate}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xxl={4}>\n                        &nbsp;\n                    </Col>\n                    <Col xs={12} xxl={3} className=\" d-flex justify-content-end align-items-end\">\n                        <InputGroup className=\"mt-2\"\n                            onChange={e => handleSearch(e)}\n                            onKeyDown={e => e.key === 'Enter' ? loadData(paginationConfig.limit, 1) : false}\n                        >\n                            <InputGroup.Text >\n                                <CsLineIcons icon=\"search\" />\n                            </InputGroup.Text>\n                            <FormControl placeholder=\"pesquisar...\" aria-label=\"Pesquisar\" aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                {/* FILTERS */}\n\n                {/* DATA */}\n                <Row className='mt-5'>\n                    <Col xs={12} xxl={12}>\n                        {data.length === 0\n                            ? <>\n                                <Row className=\"g-2 mb-5\">\n                                    <Col sm=\"12\" xxl=\"12\">\n                                        <Card className=\"sh-19\">\n                                            <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                                <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                                <p className=\"heading mb-0\">\n                                                    Ops! Nenhum resultado para essa consulta.\n                                                </p>\n\n                                                <p className=\"text-medium mb-0 text-muted\">\n                                                    Altere os filtros da consulta e tente novamente.\n                                                </p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </>\n                            : <>\n\n                                {total\n                                    ? <>\n                                        <Alert variant=\"info\">\n                                            Total de registros localizados: <strong>{total}</strong>\n                                        </Alert>\n                                    </>\n                                    : <></>\n                                }\n\n                                <table className=\"react-table rows\" >\n                                    <thead>\n                                        <tr>\n                                            {columns.map((row, index) => {\n                                                return (\n                                                    <th\n                                                        key={index}\n                                                        className={`text-muted text-small text-uppercase ${row.column ? 'cursor-pointer' : ''}`}\n                                                        onClick={() => row.column ? orderTable(row.column) : false}\n                                                    >\n                                                        <span className={`${order === row.column ? 'text-primary  font-weight-bold' : ''}`}>\n                                                            {row.name} &nbsp;\n\n                                                            {order === row.column\n                                                                ? <CsLineIcons size={10} icon={orderBy === 'asc' ? 'chevron-top' : 'chevron-bottom'} />\n                                                                : <></>\n                                                            }\n                                                        </span>\n                                                    </th>\n                                                )\n                                            })}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data.length > 0 && data.map((row, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    {columns.map((r, i) => {\n                                                        return (\n                                                            <td key={i}>\n\n                                                                {r.format ?\n                                                                    formatField(r.format, row[r.acessor], row)\n                                                                    : <>\n                                                                        {r.acessor === 'custom'\n                                                                            ? <>\n                                                                                <Button onClick={() => callEdit(row.id)} variant=\"outline-info\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"edit\" />\n                                                                                </Button>\n\n                                                                                &nbsp;\n                                                                                <Button onClick={() => callDelete(row.id)} variant=\"outline-danger\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"bin\" />\n                                                                                </Button>\n\n                                                                            </>\n                                                                            : <>\n                                                                                {row[r.acessor]}\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </td>\n                                                        )\n                                                    })}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n\n                                </table>\n\n\n                                <PaginationTable\n                                    config={paginationConfig}\n                                    gotoPage={(page) => [changePaginationConfig('page', page)]}\n                                />\n\n                            </>\n                        }\n                    </Col>\n                </Row>\n                {/* DATA */}\n            </>\n        )\n    }\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required('Este campo é obrigatório'),\n    })\n\n    const formatOptionLabel = ({ value, label, customAbbreviation }) => (\n        <div style={{ display: \"flex\" }}>\n            <div>{label}</div>\n            <div style={{ marginLeft: \"10px\", color: \"#ccc\" }}>\n                <CsLineIcons icon={`${label}`} className=\"text-info\" size={20} />\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            {loading\n                ? <>\n                    <div className=\"align-items-center\">\n                        <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                        <div>Carregando...</div>\n                    </div>\n                </>\n                : <>\n                    {renderTable()}\n                </>\n            }\n\n            {/* MODAL NEW REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalNewRegister}\n                size='md'\n                centered\n                onHide={() => setModalNewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalNewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Novo cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            name: '',\n                            icon: '',\n                            default: false,\n                            color: ''\n                        }}\n                        validationSchema={validationSchema}\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/organization_status`, values)\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalNewRegister(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\"tooltip-end-bottom mt-4\">\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Nome </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                    {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                </div>\n\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Icone </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={icons}\n                                        value={\n                                            icons.filter(option =>\n                                                option.label === values.icon)\n                                        }\n                                        onChange={e => setFieldValue('icon', e.label)}\n                                        formatOptionLabel={formatOptionLabel}\n                                    />\n                                    {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                </div>\n\n                                <div className=\"mb-4  form-group tooltip-end-top\">\n                                    <div className='label'> Cor </div>\n                                    <div className='d-flex justify-content-center align-items-center'>\n                                        <SketchPicker\n                                            color={values.color}\n                                            onChange={(e) => setFieldValue('color', e.hex)}\n                                        />\n                                    </div>\n                                </div>\n\n                                <label>\n                                    Este atributo será padrão? &nbsp;\n                                    <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                </label>\n\n                                <Alert variant='info' className='mt-4 mb-4'>\n                                    Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                </Alert>\n\n                                <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                    <Button\n                                        variant=\"success\"\n                                        type=\"submit\"\n                                        disabled={values.loading}\n                                    >\n                                        {values.loading\n                                            ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                            : <>Cadastrar</>\n                                        }\n                                    </Button>\n                                </div>\n                            </Form>\n                        )}\n                    </Formik>\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL NEW REGISTER */}\n\n            {/* MODAL EDIT REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalEditRegister}\n                size='md'\n                centered\n                onHide={() => setModalEditRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalEditRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Editar</h4>\n\n                    {loadingIdData\n                        ? <>\n                            <div className=\"align-items-center\">\n                                <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                                <div>Carregando...</div>\n                            </div>\n                        </>\n                        : <Formik\n                            initialValues={{\n                                name: idData.name,\n                                icon: idData.icon,\n                                default: idData.default ? idData.default : false,\n                                color: idData.color\n                            }}\n\n                            validationSchema={validationSchema}\n\n                            onSubmit={async (values, { resetForm }) => {\n                                try {\n                                    const response = await api.post(`/api/v1/private/organization_status/${idEdit}`, values)\n\n                                    resetForm()\n\n                                    Swal.fire({\n                                        title: response.data.title,\n                                        text: response.data.message,\n                                        icon: 'success',\n                                        confirmButtonText: 'Fechar'\n                                    }).then((result) => {\n                                        setModalEditRegister(false)\n                                        loadData()\n                                    })\n                                } catch (error) {\n                                    Swal.fire({\n                                        title: error.response.data.title,\n                                        text: error.response.data.message,\n                                        icon: 'error',\n                                        confirmButtonText: 'Fechar'\n                                    })\n                                }\n                            }}\n                        >\n                            {({ values, errors, touched, setFieldValue }) => (\n                                <Form className=\"tooltip-end-bottom mt-4\">\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Nome </div>\n                                        <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                        {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                    </div>\n\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Icone </div>\n                                        <ReactSelect\n                                            placeholder=\"\"\n                                            classNamePrefix=\"react-select\"\n                                            options={icons}\n                                            value={\n                                                icons.filter(option =>\n                                                    option.label === values.icon)\n                                            }\n                                            onChange={e => setFieldValue('icon', e.label)}\n                                            formatOptionLabel={formatOptionLabel}\n                                        />\n                                        {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                    </div>\n\n                                    <div className=\"mb-4  form-group tooltip-end-top\">\n                                        <div className='label'> Cor </div>\n                                        <div className='d-flex justify-content-center align-items-center'>\n                                            <SketchPicker\n                                                color={values.color ? values.color : false}\n                                                onChange={(e) => setFieldValue('color', e.hex)}\n                                            />\n                                        </div>\n                                    </div>\n\n                                    <label>\n                                        Este atributo será padrão? &nbsp;\n                                        <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                    </label>\n\n                                    <Alert variant='info' className='mt-4 mb-4'>\n                                        Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                    </Alert>\n\n                                    <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                        <Button\n                                            variant=\"success\"\n                                            type=\"submit\"\n                                            disabled={values.loading}\n                                        >\n                                            {values.loading\n                                                ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                : <>Editar</>\n                                            }\n                                        </Button>\n                                    </div>\n                                </Form>\n                            )}\n                        </Formik>\n                    }\n\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL EDIT REGISTER */}\n        </>\n    );\n};\n\nexport default Component;\n","/Users/caio/Projects/Samples/front-vawlog/src/views/drivers/type.js",["1273","1274","1275","1276","1277","1278","1279","1280","1281"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport moment from 'moment';\nimport pt from 'date-fns/locale/pt';\nimport DatePicker from 'react-datepicker';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport PaginationTable from 'helpers/pagination';\nimport formatField from 'helpers/formatField';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2'\nimport { SketchPicker } from 'react-color';\nimport ReactSelect from 'react-select';\n\n\nconst Component = () => {\n    const title = 'Tipo de motorista';\n    const description = 'Tipo de motorista';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'config', text: 'Configurações' },\n        { to: 'driver_type', text: 'Tipo de motorista' },\n    ]\n\n    const columns = [\n        { name: 'Id', acessor: 'id', column: 'id' },\n        { name: 'Nome', acessor: 'name', column: 'name' },\n        { name: 'Cor', acessor: 'color', column: 'hint_home', format: 'color' },\n        { name: 'Icon', acessor: 'icon', column: 'fixture', format: 'icon' },\n        { name: 'Padrão', acessor: 'default', column: 'points', format: 'boolean' },\n        { name: 'Data', acessor: 'created_at', column: 'created_at' },\n        { name: '', acessor: 'custom', column: 'custom' },\n    ]\n\n\n    const [modalNewRegister, setModalNewRegister] = useState(false)\n    const [limit, setLimit] = useState(10)\n    const [loading, setLoading] = useState(true)\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [order, setOrder] = useState(false)\n    const [orderBy, setOrderBy] = useState('asc')\n    const [data, setData] = useState(false)\n    const [total, setTotal] = useState(false)\n    const [searchField, setSearchField] = useState('')\n    const [paginationConfig, setPaginationConfig] = useState({\n        page: 1\n    })\n\n    const [modalEditRegister, setModalEditRegister] = useState(false)\n    const [idEdit, setIdEdit] = useState(false)\n    const [loadingIdData, setLoadingIdData] = useState(false)\n    const [idData, setIdData] = useState(false)\n\n    const loadData = async (pageLimit, page) => {\n        document.body.classList.add('spinner')\n\n        pageLimit = limit\n\n        try {\n            let url = `/api/v1/private/driver_type?order=${orderBy}&limit=${pageLimit}&page=${page}&search=${searchField}`\n\n            if (startDate && endDate) {\n                url += `&start=${moment(startDate).format('YYYY-MM-DD')}&end=${moment(endDate).format('YYYY-MM-DD')}`\n            }\n\n            if (order) {\n                url += `&order=${orderBy}&order_by=${order}`\n            }\n\n            const response = await api.get(url)\n\n            setData(response.data.data)\n            setTotal(response.data.total)\n\n            setPaginationConfig({\n                previousPage: response.data.data.prev_page_url,\n                page: response.data.data.current_page,\n                nextPage: response.data.data.next_page_url,\n                limit: pageLimit,\n                total: response.data.data.last_page,\n                lastPage: response.data.data.last_page\n            })\n\n        } catch (error) {\n            console.log(error)\n        }\n\n        document.body.classList.remove('spinner')\n\n        setLoading(false)\n    }\n\n    const [icons, setIcons] = useState([])\n\n    const getIcons = async () => {\n        try {\n            const response = await api.get(`/api/v1/private/icons`)\n\n            let array_icons = []\n\n            response.data.map((row) => {\n                array_icons.push({\n                    label: row.name,\n                    value: row.name\n                })\n            })\n\n            setIcons(array_icons)\n        } catch (error) {\n\n        }\n    }\n\n    useEffect(() => {\n        if (icons.length === 0) {\n            getIcons()\n        }\n    }, [])\n\n    const orderTable = (param) => {\n        setOrder(param)\n\n        if (orderBy === 'asc') {\n            setOrderBy('desc')\n        } else {\n            setOrderBy('asc')\n        }\n    }\n\n    const changePaginationConfig = async (param, value) => {\n        await setPaginationConfig({\n            ...paginationConfig, [param]: value\n        })\n    }\n\n    useEffect(() => {\n        if (!data) {\n            loadData(paginationConfig.limit, paginationConfig.page)\n        }\n    }, [paginationConfig.page])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [limit])\n\n    useEffect(() => {\n        if (data) {\n            if (startDate && endDate) {\n                loadData(limit, 1)\n            }\n        }\n    }, [endDate, startDate])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [order, orderBy])\n\n    const handleSearch = (e) => {\n        setSearchField(e.target.value)\n    }\n\n    const callLoadEditRegister = async () => {\n        setLoadingIdData(true)\n        try {\n            const response = await api.get(`/api/v1/private/driver_type/${idEdit}`)\n\n            setIdData(response.data)\n        } catch (error) {\n\n        }\n        setLoadingIdData(false)\n    }\n\n    useEffect(() => {\n        if (modalEditRegister) {\n            if (idEdit) {\n                callLoadEditRegister()\n            }\n        }\n    }, [modalEditRegister])\n\n    const callEdit = (id) => {\n        setModalEditRegister(true)\n        setIdEdit(id)\n    }\n\n    const callDelete = async (id) => {\n        Swal.fire({\n            title: 'Tem certeza que deseja excluir este cadastro?',\n            showDenyButton: true,\n            showCancelButton: true,\n            showCancelButton: false,\n            confirmButtonText: 'Sim',\n            confirmButtonColor: '#80D946',\n            denyButtonText: `Não`,\n        }).then(async (result) => {\n            if (result.isConfirmed) {\n                try {\n                    const response = await api.delete(`/api/v1/private/driver_type/${id}`)\n                    Swal.fire({\n                        title: response.data.title,\n                        text: response.data.message,\n                        icon: 'success',\n                        confirmButtonText: 'Fechar'\n                    }).then((result) => {\n                        loadData()\n                    })\n                } catch (error) {\n                    Swal.fire({\n                        title: error.response.data.title,\n                        text: error.response.data.message,\n                        icon: 'error',\n                        confirmButtonText: 'Fechar'\n                    })\n                }\n            }\n        })\n    }\n\n    const renderTable = () => {\n        return (\n            <>\n                <Row>\n                    <Col xs={12} xxl={12} className=\" d-flex justify-content-end align-items-end\">\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            disabled={loading}\n                            onClick={() => setModalNewRegister(true)}\n                        >\n                            Novo Cadastro <CsLineIcons icon=\"plus\" />\n                        </Button>\n                    </Col>\n                </Row>\n\n                {/* FILTERS */}\n                <Row>\n                    <Col xs={12} xxl={1} className=\"d-flex d-flex justify-content-end align-items-end\">\n                        <Dropdown\n                            align={{ xs: 'end' }}\n                            className=\"d-inline-block ms-1\"\n                            onSelect={(e) =>\n                                setLimit(e)\n                            }\n                        >\n                            <Dropdown.Toggle variant=\"foreground-alternate\" className=\"shadow\">\n                                {limit} Items\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu\n                                className=\"shadow dropdown-menu-end\"\n                            >\n                                <Dropdown.Item eventKey=\"5\">5 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"10\">10 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"20\">20 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"50\">50 Items</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n\n                    <Col xxl={4}>\n                        <Row className=\"g-2 w-100\">\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">De</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                />\n                            </Col>\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">Até</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={endDate}\n                                    onChange={(date) => setEndDate(date)}\n                                    selectsEnd\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                    minDate={startDate}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xxl={4}>\n                        &nbsp;\n                    </Col>\n                    <Col xs={12} xxl={3} className=\" d-flex justify-content-end align-items-end\">\n                        <InputGroup className=\"mt-2\"\n                            onChange={e => handleSearch(e)}\n                            onKeyDown={e => e.key === 'Enter' ? loadData(paginationConfig.limit, 1) : false}\n                        >\n                            <InputGroup.Text >\n                                <CsLineIcons icon=\"search\" />\n                            </InputGroup.Text>\n                            <FormControl placeholder=\"pesquisar...\" aria-label=\"Pesquisar\" aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                {/* FILTERS */}\n\n                {/* DATA */}\n                <Row className='mt-5'>\n                    <Col xs={12} xxl={12}>\n                        {data.length === 0\n                            ? <>\n                                <Row className=\"g-2 mb-5\">\n                                    <Col sm=\"12\" xxl=\"12\">\n                                        <Card className=\"sh-19\">\n                                            <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                                <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                                <p className=\"heading mb-0\">\n                                                    Ops! Nenhum resultado para essa consulta.\n                                                </p>\n\n                                                <p className=\"text-medium mb-0 text-muted\">\n                                                    Altere os filtros da consulta e tente novamente.\n                                                </p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </>\n                            : <>\n\n                                {total\n                                    ? <>\n                                        <Alert variant=\"info\">\n                                            Total de registros localizados: <strong>{total}</strong>\n                                        </Alert>\n                                    </>\n                                    : <></>\n                                }\n\n                                <table className=\"react-table rows\" >\n                                    <thead>\n                                        <tr>\n                                            {columns.map((row, index) => {\n                                                return (\n                                                    <th\n                                                        key={index}\n                                                        className={`text-muted text-small text-uppercase ${row.column ? 'cursor-pointer' : ''}`}\n                                                        onClick={() => row.column ? orderTable(row.column) : false}\n                                                    >\n                                                        <span className={`${order === row.column ? 'text-primary  font-weight-bold' : ''}`}>\n                                                            {row.name} &nbsp;\n\n                                                            {order === row.column\n                                                                ? <CsLineIcons size={10} icon={orderBy === 'asc' ? 'chevron-top' : 'chevron-bottom'} />\n                                                                : <></>\n                                                            }\n                                                        </span>\n                                                    </th>\n                                                )\n                                            })}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data.length > 0 && data.map((row, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    {columns.map((r, i) => {\n                                                        return (\n                                                            <td key={i}>\n\n                                                                {r.format ?\n                                                                    formatField(r.format, row[r.acessor], row)\n                                                                    : <>\n                                                                        {r.acessor === 'custom'\n                                                                            ? <>\n                                                                                <Button onClick={() => callEdit(row.id)} variant=\"outline-info\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"edit\" />\n                                                                                </Button>\n\n                                                                                &nbsp;\n                                                                                <Button onClick={() => callDelete(row.id)} variant=\"outline-danger\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"bin\" />\n                                                                                </Button>\n\n                                                                            </>\n                                                                            : <>\n                                                                                {row[r.acessor]}\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </td>\n                                                        )\n                                                    })}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n\n                                </table>\n\n\n                                <PaginationTable\n                                    config={paginationConfig}\n                                    gotoPage={(page) => [changePaginationConfig('page', page)]}\n                                />\n\n                            </>\n                        }\n                    </Col>\n                </Row>\n                {/* DATA */}\n            </>\n        )\n    }\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required('Este campo é obrigatório'),\n    })\n\n    const formatOptionLabel = ({ value, label, customAbbreviation }) => (\n        <div style={{ display: \"flex\" }}>\n            <div>{label}</div>\n            <div style={{ marginLeft: \"10px\", color: \"#ccc\" }}>\n                <CsLineIcons icon={`${label}`} className=\"text-info\" size={20} />\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            {loading\n                ? <>\n                    <div className=\"align-items-center\">\n                        <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                        <div>Carregando...</div>\n                    </div>\n                </>\n                : <>\n                    {renderTable()}\n                </>\n            }\n\n            {/* MODAL NEW REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalNewRegister}\n                size='md'\n                centered\n                onHide={() => setModalNewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalNewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Novo cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            name: '',\n                            icon: '',\n                            default: false,\n                            color: ''\n                        }}\n                        validationSchema={validationSchema}\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/driver_type`, values)\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalNewRegister(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\"tooltip-end-bottom mt-4\">\n                                <div className=\"mb-3 driver_type form-group tooltip-end-top\">\n                                    <div className='label'> Nome </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                    {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                </div>\n\n                                <div className=\"mb-3 driver_type form-group tooltip-end-top\">\n                                    <div className='label'> Icone </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={icons}\n                                        value={\n                                            icons.filter(option =>\n                                                option.label === values.icon)\n                                        }\n                                        onChange={e => setFieldValue('icon', e.label)}\n                                        formatOptionLabel={formatOptionLabel}\n                                    />\n                                    {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                </div>\n\n                                <div className=\"mb-4 driver_type form-group tooltip-end-top\">\n                                    <div className='label'> Cor </div>\n                                    <div className='d-flex justify-content-center align-items-center'>\n                                        <SketchPicker\n                                            color={values.color}\n                                            onChange={(e) => setFieldValue('color', e.hex)}\n                                        />\n                                    </div>\n                                </div>\n\n                                <label>\n                                    Este atributo será padrão? &nbsp;\n                                    <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                </label>\n\n                                <Alert variant='info' className='mt-4 mb-4'>\n                                    Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                </Alert>\n\n                                <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                    <Button\n                                        variant=\"success\"\n                                        type=\"submit\"\n                                        disabled={values.loading}\n                                    >\n                                        {values.loading\n                                            ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                            : <>Cadastrar</>\n                                        }\n                                    </Button>\n                                </div>\n                            </Form>\n                        )}\n                    </Formik>\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL NEW REGISTER */}\n\n            {/* MODAL EDIT REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalEditRegister}\n                size='md'\n                centered\n                onHide={() => setModalEditRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalEditRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Editar</h4>\n\n                    {loadingIdData\n                        ? <>\n                            <div className=\"align-items-center\">\n                                <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                                <div>Carregando...</div>\n                            </div>\n                        </>\n                        : <Formik\n                            initialValues={{\n                                name: idData.name,\n                                icon: idData.icon,\n                                default: idData.default ? idData.default : false,\n                                color: idData.color\n                            }}\n\n                            validationSchema={validationSchema}\n\n                            onSubmit={async (values, { resetForm }) => {\n                                try {\n                                    const response = await api.post(`/api/v1/private/driver_type/${idEdit}`, values)\n\n                                    resetForm()\n\n                                    Swal.fire({\n                                        title: response.data.title,\n                                        text: response.data.message,\n                                        icon: 'success',\n                                        confirmButtonText: 'Fechar'\n                                    }).then((result) => {\n                                        setModalEditRegister(false)\n                                        loadData()\n                                    })\n                                } catch (error) {\n                                    Swal.fire({\n                                        title: error.response.data.title,\n                                        text: error.response.data.message,\n                                        icon: 'error',\n                                        confirmButtonText: 'Fechar'\n                                    })\n                                }\n                            }}\n                        >\n                            {({ values, errors, touched, setFieldValue }) => (\n                                <Form className=\"tooltip-end-bottom mt-4\">\n                                    <div className=\"mb-3 driver_type form-group tooltip-end-top\">\n                                        <div className='label'> Nome </div>\n                                        <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                        {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                    </div>\n\n                                    <div className=\"mb-3 driver_type form-group tooltip-end-top\">\n                                        <div className='label'> Icone </div>\n                                        <ReactSelect\n                                            placeholder=\"\"\n                                            classNamePrefix=\"react-select\"\n                                            options={icons}\n                                            value={\n                                                icons.filter(option =>\n                                                    option.label === values.icon)\n                                            }\n                                            onChange={e => setFieldValue('icon', e.label)}\n                                            formatOptionLabel={formatOptionLabel}\n                                        />\n                                        {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                    </div>\n\n                                    <div className=\"mb-4 driver_type form-group tooltip-end-top\">\n                                        <div className='label'> Cor </div>\n                                        <div className='d-flex justify-content-center align-items-center'>\n                                            <SketchPicker\n                                                color={values.color ? values.color : false}\n                                                onChange={(e) => setFieldValue('color', e.hex)}\n                                            />\n                                        </div>\n                                    </div>\n\n                                    <label>\n                                        Este atributo será padrão? &nbsp;\n                                        <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                    </label>\n\n                                    <Alert variant='info' className='mt-4 mb-4'>\n                                        Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                    </Alert>\n\n                                    <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                        <Button\n                                            variant=\"success\"\n                                            type=\"submit\"\n                                            disabled={values.loading}\n                                        >\n                                            {values.loading\n                                                ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                : <>Editar</>\n                                            }\n                                        </Button>\n                                    </div>\n                                </Form>\n                            )}\n                        </Formik>\n                    }\n\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL EDIT REGISTER */}\n        </>\n    );\n};\n\nexport default Component;\n","/Users/caio/Projects/Samples/front-vawlog/src/views/config/organization_type.js",["1282","1283","1284","1285","1286","1287","1288","1289","1290"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport moment from 'moment';\nimport pt from 'date-fns/locale/pt';\nimport DatePicker from 'react-datepicker';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport PaginationTable from 'helpers/pagination';\nimport formatField from 'helpers/formatField';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2'\nimport { SketchPicker } from 'react-color';\nimport ReactSelect from 'react-select';\n\n\nconst Component = () => {\n    const title = 'Tipo de cliente';\n    const description = 'Tipo de cliente';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'config', text: 'Configurações' },\n        { to: 'organization_type', text: 'Tipo de cliente' },\n    ]\n\n    const columns = [\n        { name: 'Id', acessor: 'id', column: 'id' },\n        { name: 'Nome', acessor: 'name', column: 'name' },\n        { name: 'Cor', acessor: 'color', column: 'hint_home', format: 'color' },\n        { name: 'Icon', acessor: 'icon', column: 'fixture', format: 'icon' },\n        { name: 'Padrão', acessor: 'default', column: 'points', format: 'boolean' },\n        { name: 'Data', acessor: 'created_at', column: 'created_at' },\n        { name: '', acessor: 'custom', column: 'custom' },\n    ]\n\n\n    const [modalNewRegister, setModalNewRegister] = useState(false)\n    const [limit, setLimit] = useState(10)\n    const [loading, setLoading] = useState(true)\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [order, setOrder] = useState(false)\n    const [orderBy, setOrderBy] = useState('asc')\n    const [data, setData] = useState(false)\n    const [total, setTotal] = useState(false)\n    const [searchField, setSearchField] = useState('')\n    const [paginationConfig, setPaginationConfig] = useState({\n        page: 1\n    })\n\n    const [modalEditRegister, setModalEditRegister] = useState(false)\n    const [idEdit, setIdEdit] = useState(false)\n    const [loadingIdData, setLoadingIdData] = useState(false)\n    const [idData, setIdData] = useState(false)\n\n    const loadData = async (pageLimit, page) => {\n        document.body.classList.add('spinner')\n\n        pageLimit = limit\n\n        try {\n            let url = `/api/v1/private/organization_type?order=${orderBy}&limit=${pageLimit}&page=${page}&search=${searchField}`\n\n            if (startDate && endDate) {\n                url += `&start=${moment(startDate).format('YYYY-MM-DD')}&end=${moment(endDate).format('YYYY-MM-DD')}`\n            }\n\n            if (order) {\n                url += `&order=${orderBy}&order_by=${order}`\n            }\n\n            const response = await api.get(url)\n\n            setData(response.data.data)\n            setTotal(response.data.total)\n\n            setPaginationConfig({\n                previousPage: response.data.data.prev_page_url,\n                page: response.data.data.current_page,\n                nextPage: response.data.data.next_page_url,\n                limit: pageLimit,\n                total: response.data.data.last_page,\n                lastPage: response.data.data.last_page\n            })\n\n        } catch (error) {\n            console.log(error)\n        }\n\n        document.body.classList.remove('spinner')\n\n        setLoading(false)\n    }\n\n    const [icons, setIcons] = useState([])\n\n    const getIcons = async () => {\n        try {\n            const response = await api.get(`/api/v1/private/icons`)\n\n            let array_icons = []\n\n            response.data.map((row) => {\n                array_icons.push({\n                    label: row.name,\n                    value: row.name\n                })\n            })\n\n            setIcons(array_icons)\n        } catch (error) {\n\n        }\n    }\n\n    useEffect(() => {\n        if (icons.length === 0) {\n            getIcons()\n        }\n    }, [])\n\n    const orderTable = (param) => {\n        setOrder(param)\n\n        if (orderBy === 'asc') {\n            setOrderBy('desc')\n        } else {\n            setOrderBy('asc')\n        }\n    }\n\n    const changePaginationConfig = async (param, value) => {\n        await setPaginationConfig({\n            ...paginationConfig, [param]: value\n        })\n    }\n\n    useEffect(() => {\n        if (!data) {\n            loadData(paginationConfig.limit, paginationConfig.page)\n        }\n    }, [paginationConfig.page])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [limit])\n\n    useEffect(() => {\n        if (data) {\n            if (startDate && endDate) {\n                loadData(limit, 1)\n            }\n        }\n    }, [endDate, startDate])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [order, orderBy])\n\n    const handleSearch = (e) => {\n        setSearchField(e.target.value)\n    }\n\n    const callLoadEditRegister = async () => {\n        setLoadingIdData(true)\n        try {\n            const response = await api.get(`/api/v1/private/organization_type/${idEdit}`)\n\n            setIdData(response.data)\n        } catch (error) {\n\n        }\n        setLoadingIdData(false)\n    }\n\n    useEffect(() => {\n        if (modalEditRegister) {\n            if (idEdit) {\n                callLoadEditRegister()\n            }\n        }\n    }, [modalEditRegister])\n\n    const callEdit = (id) => {\n        setModalEditRegister(true)\n        setIdEdit(id)\n    }\n\n    const callDelete = async (id) => {\n        Swal.fire({\n            title: 'Tem certeza que deseja excluir este cadastro?',\n            showDenyButton: true,\n            showCancelButton: true,\n            showCancelButton: false,\n            confirmButtonText: 'Sim',\n            confirmButtonColor: '#80D946',\n            denyButtonText: `Não`,\n        }).then(async (result) => {\n            if (result.isConfirmed) {\n                try {\n                    const response = await api.delete(`/api/v1/private/organization_type/${id}`)\n                    Swal.fire({\n                        title: response.data.title,\n                        text: response.data.message,\n                        icon: 'success',\n                        confirmButtonText: 'Fechar'\n                    }).then((result) => {\n                        loadData()\n                    })\n                } catch (error) {\n                    Swal.fire({\n                        title: error.response.data.title,\n                        text: error.response.data.message,\n                        icon: 'error',\n                        confirmButtonText: 'Fechar'\n                    })\n                }\n            }\n        })\n    }\n\n    const renderTable = () => {\n        return (\n            <>\n                <Row>\n                    <Col xs={12} xxl={12} className=\" d-flex justify-content-end align-items-end\">\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            disabled={loading}\n                            onClick={() => setModalNewRegister(true)}\n                        >\n                            Novo Cadastro <CsLineIcons icon=\"plus\" />\n                        </Button>\n                    </Col>\n                </Row>\n\n                {/* FILTERS */}\n                <Row>\n                    <Col xs={12} xxl={1} className=\"d-flex d-flex justify-content-end align-items-end\">\n                        <Dropdown\n                            align={{ xs: 'end' }}\n                            className=\"d-inline-block ms-1\"\n                            onSelect={(e) =>\n                                setLimit(e)\n                            }\n                        >\n                            <Dropdown.Toggle variant=\"foreground-alternate\" className=\"shadow\">\n                                {limit} Items\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu\n                                className=\"shadow dropdown-menu-end\"\n                            >\n                                <Dropdown.Item eventKey=\"5\">5 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"10\">10 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"20\">20 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"50\">50 Items</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n\n                    <Col xxl={4}>\n                        <Row className=\"g-2 w-100\">\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">De</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                />\n                            </Col>\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">Até</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={endDate}\n                                    onChange={(date) => setEndDate(date)}\n                                    selectsEnd\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                    minDate={startDate}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xxl={4}>\n                        &nbsp;\n                    </Col>\n                    <Col xs={12} xxl={3} className=\" d-flex justify-content-end align-items-end\">\n                        <InputGroup className=\"mt-2\"\n                            onChange={e => handleSearch(e)}\n                            onKeyDown={e => e.key === 'Enter' ? loadData(paginationConfig.limit, 1) : false}\n                        >\n                            <InputGroup.Text >\n                                <CsLineIcons icon=\"search\" />\n                            </InputGroup.Text>\n                            <FormControl placeholder=\"pesquisar...\" aria-label=\"Pesquisar\" aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                {/* FILTERS */}\n\n                {/* DATA */}\n                <Row className='mt-5'>\n                    <Col xs={12} xxl={12}>\n                        {data.length === 0\n                            ? <>\n                                <Row className=\"g-2 mb-5\">\n                                    <Col sm=\"12\" xxl=\"12\">\n                                        <Card className=\"sh-19\">\n                                            <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                                <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                                <p className=\"heading mb-0\">\n                                                    Ops! Nenhum resultado para essa consulta.\n                                                </p>\n\n                                                <p className=\"text-medium mb-0 text-muted\">\n                                                    Altere os filtros da consulta e tente novamente.\n                                                </p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </>\n                            : <>\n\n                                {total\n                                    ? <>\n                                        <Alert variant=\"info\">\n                                            Total de registros localizados: <strong>{total}</strong>\n                                        </Alert>\n                                    </>\n                                    : <></>\n                                }\n\n                                <table className=\"react-table rows\" >\n                                    <thead>\n                                        <tr>\n                                            {columns.map((row, index) => {\n                                                return (\n                                                    <th\n                                                        key={index}\n                                                        className={`text-muted text-small text-uppercase ${row.column ? 'cursor-pointer' : ''}`}\n                                                        onClick={() => row.column ? orderTable(row.column) : false}\n                                                    >\n                                                        <span className={`${order === row.column ? 'text-primary  font-weight-bold' : ''}`}>\n                                                            {row.name} &nbsp;\n\n                                                            {order === row.column\n                                                                ? <CsLineIcons size={10} icon={orderBy === 'asc' ? 'chevron-top' : 'chevron-bottom'} />\n                                                                : <></>\n                                                            }\n                                                        </span>\n                                                    </th>\n                                                )\n                                            })}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data.length > 0 && data.map((row, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    {columns.map((r, i) => {\n                                                        return (\n                                                            <td key={i}>\n\n                                                                {r.format ?\n                                                                    formatField(r.format, row[r.acessor], row)\n                                                                    : <>\n                                                                        {r.acessor === 'custom'\n                                                                            ? <>\n                                                                                <Button onClick={() => callEdit(row.id)} variant=\"outline-info\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"edit\" />\n                                                                                </Button>\n\n                                                                                &nbsp;\n                                                                                <Button onClick={() => callDelete(row.id)} variant=\"outline-danger\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"bin\" />\n                                                                                </Button>\n\n                                                                            </>\n                                                                            : <>\n                                                                                {row[r.acessor]}\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </td>\n                                                        )\n                                                    })}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n\n                                </table>\n\n\n                                <PaginationTable\n                                    config={paginationConfig}\n                                    gotoPage={(page) => [changePaginationConfig('page', page)]}\n                                />\n\n                            </>\n                        }\n                    </Col>\n                </Row>\n                {/* DATA */}\n            </>\n        )\n    }\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required('Este campo é obrigatório'),\n    })\n\n    const formatOptionLabel = ({ value, label, customAbbreviation }) => (\n        <div style={{ display: \"flex\" }}>\n            <div>{label}</div>\n            <div style={{ marginLeft: \"10px\", color: \"#ccc\" }}>\n                <CsLineIcons icon={`${label}`} className=\"text-info\" size={20} />\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            {loading\n                ? <>\n                    <div className=\"align-items-center\">\n                        <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                        <div>Carregando...</div>\n                    </div>\n                </>\n                : <>\n                    {renderTable()}\n                </>\n            }\n\n            {/* MODAL NEW REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalNewRegister}\n                size='md'\n                centered\n                onHide={() => setModalNewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalNewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Novo cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            name: '',\n                            icon: '',\n                            default: false,\n                            color: ''\n                        }}\n                        validationSchema={validationSchema}\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/organization_type`, values)\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalNewRegister(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\"tooltip-end-bottom mt-4\">\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Nome </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                    {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                </div>\n\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Icone </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={icons}\n                                        value={\n                                            icons.filter(option =>\n                                                option.label === values.icon)\n                                        }\n                                        onChange={e => setFieldValue('icon', e.label)}\n                                        formatOptionLabel={formatOptionLabel}\n                                    />\n                                    {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                </div>\n\n                                <div className=\"mb-4  form-group tooltip-end-top\">\n                                    <div className='label'> Cor </div>\n                                    <div className='d-flex justify-content-center align-items-center'>\n                                        <SketchPicker\n                                            color={values.color}\n                                            onChange={(e) => setFieldValue('color', e.hex)}\n                                        />\n                                    </div>\n                                </div>\n\n                                <label>\n                                    Este atributo será padrão? &nbsp;\n                                    <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                </label>\n\n                                <Alert variant='info' className='mt-4 mb-4'>\n                                    Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                </Alert>\n\n                                <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                    <Button\n                                        variant=\"success\"\n                                        type=\"submit\"\n                                        disabled={values.loading}\n                                    >\n                                        {values.loading\n                                            ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                            : <>Cadastrar</>\n                                        }\n                                    </Button>\n                                </div>\n                            </Form>\n                        )}\n                    </Formik>\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL NEW REGISTER */}\n\n            {/* MODAL EDIT REGISTER */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalEditRegister}\n                size='md'\n                centered\n                onHide={() => setModalEditRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalEditRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Editar</h4>\n\n                    {loadingIdData\n                        ? <>\n                            <div className=\"align-items-center\">\n                                <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                                <div>Carregando...</div>\n                            </div>\n                        </>\n                        : <Formik\n                            initialValues={{\n                                name: idData.name,\n                                icon: idData.icon,\n                                default: idData.default ? idData.default : false,\n                                color: idData.color\n                            }}\n\n                            validationSchema={validationSchema}\n\n                            onSubmit={async (values, { resetForm }) => {\n                                try {\n                                    const response = await api.post(`/api/v1/private/organization_type/${idEdit}`, values)\n\n                                    resetForm()\n\n                                    Swal.fire({\n                                        title: response.data.title,\n                                        text: response.data.message,\n                                        icon: 'success',\n                                        confirmButtonText: 'Fechar'\n                                    }).then((result) => {\n                                        setModalEditRegister(false)\n                                        loadData()\n                                    })\n                                } catch (error) {\n                                    Swal.fire({\n                                        title: error.response.data.title,\n                                        text: error.response.data.message,\n                                        icon: 'error',\n                                        confirmButtonText: 'Fechar'\n                                    })\n                                }\n                            }}\n                        >\n                            {({ values, errors, touched, setFieldValue }) => (\n                                <Form className=\"tooltip-end-bottom mt-4\">\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Nome </div>\n                                        <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                        {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                    </div>\n\n                                    <div className=\"mb-3  form-group tooltip-end-top\">\n                                        <div className='label'> Icone </div>\n                                        <ReactSelect\n                                            placeholder=\"\"\n                                            classNamePrefix=\"react-select\"\n                                            options={icons}\n                                            value={\n                                                icons.filter(option =>\n                                                    option.label === values.icon)\n                                            }\n                                            onChange={e => setFieldValue('icon', e.label)}\n                                            formatOptionLabel={formatOptionLabel}\n                                        />\n                                        {errors.icon && touched.icon && <div className=\"d-block invalid-tooltip\">{errors.icon}</div>}\n                                    </div>\n\n                                    <div className=\"mb-4  form-group tooltip-end-top\">\n                                        <div className='label'> Cor </div>\n                                        <div className='d-flex justify-content-center align-items-center'>\n                                            <SketchPicker\n                                                color={values.color ? values.color : false}\n                                                onChange={(e) => setFieldValue('color', e.hex)}\n                                            />\n                                        </div>\n                                    </div>\n\n                                    <label>\n                                        Este atributo será padrão? &nbsp;\n                                        <Field className=\"form-check-input\" type=\"checkbox\" name=\"default\" />\n                                    </label>\n\n                                    <Alert variant='info' className='mt-4 mb-4'>\n                                        Ao seleciona este campo, caso tenha algum outro campo padrão o anterior será atualizado para um campo <b>Não padrão</b>\n                                    </Alert>\n\n                                    <div className=\"d-grid gap-2 mb-3 mt-4\">\n                                        <Button\n                                            variant=\"success\"\n                                            type=\"submit\"\n                                            disabled={values.loading}\n                                        >\n                                            {values.loading\n                                                ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                : <>Editar</>\n                                            }\n                                        </Button>\n                                    </div>\n                                </Form>\n                            )}\n                        </Formik>\n                    }\n\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL EDIT REGISTER */}\n        </>\n    );\n};\n\nexport default Component;\n","/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/notifications/notificationSlice.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/main-menu/menuSlice.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/@mock-api/api.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/@mock-api/data/apps.events.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/@mock-api/data/apps.contacts.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/@mock-api/data/apps.tasks.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/@mock-api/data/apps.chat.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/@mock-api/data/notifications.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/@mock-api/data/apps.mailbox.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/@mock-api/data/users.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/@mock-api/data/products.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/@mock-api/data/datatable.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/default/NotFound.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/default/ForgotPassword.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/default/Register.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/default/Unauthorized.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/default/Home.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/default/Login.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/default/InvalidAccess.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/default/ResetPassword.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/lang/messages/en.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/lang/messages/de.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/lang/messages/es.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/home/index.js",["1291","1292","1293","1294","1295","1296","1297","1298","1299","1300","1301","1302","1303","1304","1305","1306","1307","1308","1309"],"/Users/caio/Projects/Samples/front-vawlog/src/layout/Layout.js",["1310"],"import React, { useEffect } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { useLocation } from 'react-router-dom';\nimport useLayout from 'hooks/useLayout';\nimport Footer from 'layout/footer/Footer';\nimport Nav from 'layout/nav/Nav';\nimport RightButtons from 'layout/right-buttons/RightButtons';\nimport SidebarMenu from 'layout/nav/sidebar-menu/SidebarMenu';\n\nconst Layout = ({ children }) => {\n\tuseLayout();\n\n\tconst { pathname } = useLocation();\n\n\tuseEffect(() => {\n\t\tdocument.documentElement.click();\n\t\twindow.scrollTo(0, 0);\n\t}, [pathname]);\n\n\treturn (\n\t\t<>\n\t\t\t<Nav />\n\t\t\t<main>\n\t\t\t\t<Container>\n\t\t\t\t\t<Row className=\"h-100\">\n\t\t\t\t\t\t<SidebarMenu />\n\t\t\t\t\t\t<Col className=\"h-100\" id=\"contentArea\">\n\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t</Container>\n\t\t\t</main>\n\t\t\t<Footer />\n\t\t\t{/* <RightButtons /> */}\n\t\t</>\n\t);\n};\n\nexport default React.memo(Layout);\n","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartSmallDoughnutChart6.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/components/html-head/HtmlHead.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/components/breadcrumb-list/BreadcrumbList.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/services/api.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/cs-line-icons/CsLineIcons.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/helpers/pagination.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/helpers/formatField.js",["1311","1312","1313","1314","1315","1316","1317"],"import React from 'react'\r\nimport { Badge, OverlayTrigger, Tooltip } from \"react-bootstrap\"\r\nimport moment from \"moment\"\r\n\r\nimport { APP_PARAMS } from \"../constants\"\r\nimport checkStatusColor from './checkStatusColor'\r\nimport checkStatusLabel from './checkStatusLabel'\r\nimport CsLineIcons from 'cs-line-icons/CsLineIcons'\r\n\r\nexport default function formatField(fieldType, value, row) {\r\n    let formated_value = value\r\n\r\n    switch (fieldType) {\r\n        default:\r\n\r\n            break;\r\n\r\n        case 'boolean':\r\n            if (value) {\r\n                formated_value = <div><CsLineIcons className='text-warning' icon=\"star\" /></div>\r\n            } else {\r\n                formated_value = <div>-</div>\r\n            }\r\n            break;\r\n\r\n        case 'color':\r\n            if (value) {\r\n                formated_value = <div style={{ width: 15, height: 15, backgroundColor: value, borderRadius: '50%' }}></div>\r\n            } else {\r\n                formated_value = <div>-</div>\r\n            }\r\n            break;\r\n\r\n        case 'icon':\r\n            if (value) {\r\n                formated_value = <div><CsLineIcons icon={value} className='text-info' /></div>\r\n            } else {\r\n                formated_value = <div>-</div>\r\n            }\r\n            break;\r\n\r\n        case 'vehicle_status':\r\n            formated_value = <div>\r\n                <CsLineIcons stroke={row.vehicle_status?.color} icon={row.vehicle_status.icon} size={15} /> &nbsp;\r\n                {row.vehicle_status.name}\r\n            </div>\r\n            break;\r\n\r\n        case 'vehicle_type':\r\n            formated_value = <div>\r\n                <CsLineIcons stroke={row.vehicle_type?.color} icon={row.vehicle_type.icon} size={15} /> &nbsp;\r\n                {row.vehicle_type.name}\r\n            </div>\r\n            break;\r\n\r\n        case 'driver_status':\r\n            formated_value = <div>\r\n                <CsLineIcons stroke={row.driver_status?.color} icon={row.driver_status.icon} size={15} /> &nbsp;\r\n                {row.driver_status.name}\r\n            </div>\r\n            break;\r\n\r\n        case 'organization_status':\r\n            formated_value = <div>\r\n                <CsLineIcons stroke={row?.organization_status?.color} icon={row?.organization_status?.icon} size={15} /> &nbsp;\r\n                {row?.organization_status?.name}\r\n            </div>\r\n            break;\r\n\r\n        case 'organization_type':\r\n            formated_value = <div>\r\n                <CsLineIcons stroke={row?.organization_type?.color} icon={row?.organization_type?.icon} size={15} /> &nbsp;\r\n                {row?.organization_type?.name}\r\n            </div>\r\n            break;\r\n\r\n        case 'username':\r\n            formated_value = <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                <div style={{ background: '#0C5DAF', width: 28, height: 28, borderRadius: '50%', display: 'flex', justifyContent: 'center', alignItems: 'center', textTransform: 'uppercase', color: 'white', fontWeight: 'bold' }}>\r\n                    {row?.name[0]}{row?.name[1]}\r\n                </div> &nbsp;&nbsp;\r\n                {row?.name}\r\n            </div>\r\n            break;\r\n\r\n        case 'organization':\r\n            formated_value = <div>\r\n                {row?.organization?.social_name}\r\n            </div>\r\n            break;\r\n\r\n        case 'collection_order_status':\r\n            formated_value = <div>\r\n                <CsLineIcons stroke={row?.collection_order_status?.color} icon={row?.collection_order_status?.icon} size={15} /> &nbsp;\r\n                {row?.collection_order_status?.name}\r\n            </div>\r\n            break;\r\n\r\n        case 'collection_order_type':\r\n            formated_value = <div>\r\n                <CsLineIcons stroke={row?.collection_order_type?.color} icon={row?.collection_order_type?.icon} size={15} /> &nbsp;\r\n                {row?.collection_order_type?.name}\r\n            </div>\r\n            break;\r\n\r\n        case 'user_complete_name':\r\n            formated_value = <div>\r\n                {row?.user?.name}\r\n            </div>\r\n            break;\r\n    }\r\n\r\n    return formated_value\r\n\r\n}","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartSmallDoughnutChart5.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartSmallDoughnutChart4.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartSmallDoughnutChart3.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartSmallDoughnutChart2.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartSmallDoughnutChart1.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartBubble.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartSmallLine4.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartSmallLine3.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartSmallLine2.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartSmallLine1.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/home/chart/ChartCustomHorizontalTooltip.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/layout/LayoutFullpage.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/helpers/checkStatusLabel.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/helpers/checkStatusColor.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/cs-line-icons/svgs.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/Nav.js",["1318"],"import React, { useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\n\nimport { MENU_BEHAVIOUR, MENU_PLACEMENT } from 'constants.js';\nimport NavUserMenu from './NavUserMenu';\nimport NavIconMenu from './NavIconMenu';\nimport MainMenu from './main-menu/MainMenu';\nimport NavLogo from './NavLogo';\nimport NavMobileButtons from './NavMobileButtons';\nimport { menuChangeAttrMenuAnimate, menuChangeCollapseAll } from './main-menu/menuSlice';\nimport NavLanguageSwitcher from './NavLanguageSwitcher';\n\nconst DELAY = 80;\n\nconst Nav = () => {\n  const dispatch = useDispatch();\n  const { navClasses, placementStatus, behaviourStatus, attrMobile, menuPadding } = useSelector((state) => state.menu);\n  const mouseActionTimer = useRef(null);\n\n  // Vertical menu semihidden state showing\n  // Only works when the vertical menu is active and mobile menu closed\n  const onMouseEnterDelay = () => {\n    if (placementStatus.placementHtmlData === MENU_PLACEMENT.Vertical && behaviourStatus.behaviourHtmlData === MENU_BEHAVIOUR.Unpinned && attrMobile !== true) {\n      dispatch(menuChangeCollapseAll(false));\n      dispatch(menuChangeAttrMenuAnimate('show'));\n    }\n  };\n\n  // Delayed one that hides or shows the menu. It's required to prevent collapse animation getting stucked\n  const onMouseEnter = () => {\n    if (mouseActionTimer.current) clearTimeout(mouseActionTimer.current);\n\n    mouseActionTimer.current = setTimeout(() => {\n      onMouseEnterDelay();\n    }, DELAY);\n  };\n\n  // Vertical menu semihidden state hiding\n  // Only works when the vertical menu is active and mobile menu closed\n  const onMouseLeaveDelay = () => {\n    if (placementStatus.placementHtmlData === MENU_PLACEMENT.Vertical && behaviourStatus.behaviourHtmlData === MENU_BEHAVIOUR.Unpinned && attrMobile !== true) {\n      dispatch(menuChangeCollapseAll(true));\n      dispatch(menuChangeAttrMenuAnimate('hidden'));\n    }\n  };\n\n  const onMouseLeave = () => {\n    if (mouseActionTimer.current) clearTimeout(mouseActionTimer.current);\n    mouseActionTimer.current = setTimeout(() => {\n      onMouseLeaveDelay();\n    }, DELAY);\n  };\n\n  return (\n    <div id=\"nav\" className={classNames('nav-container d-flex', navClasses)} onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>\n      <div\n        className=\"nav-content d-flex\"\n        style={placementStatus.placementHtmlData === MENU_PLACEMENT.Horizontal && menuPadding ? { paddingRight: menuPadding } : {}}\n      >\n        <NavLogo />\n        {/* <NavLanguageSwitcher /> */}\n        <NavUserMenu />\n        <NavIconMenu />\n        <MainMenu />\n        <NavMobileButtons />\n      </div>\n      <div className=\"nav-shadow\" />\n    </div>\n  );\n};\nexport default React.memo(Nav);\n","/Users/caio/Projects/Samples/front-vawlog/src/hooks/useLayout.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/sidebar-menu/SidebarMenu.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/layout/right-buttons/RightButtons.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/layout/footer/Footer.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/NavLanguageSwitcher.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/hooks/useModalPaddingFix.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/layout/right-buttons/NichesModal.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/layout/right-buttons/SettingsModal.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/sidebar-menu/SidebarMenuItems.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/main-menu/MainMenu.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/NavMobileButtons.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/NavLogo.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/NavIconMenu.js",["1319"],"import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { MENU_BEHAVIOUR } from 'constants.js';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport { settingsChangeColor } from 'settings/settingsSlice';\nimport IconMenuNotifications from './notifications/Notifications';\nimport SearchModal from './search/SearchModal';\nimport { menuChangeBehaviour } from './main-menu/menuSlice';\n\nconst NavIconMenu = () => {\n  const { pinButtonEnable, behaviour } = useSelector((state) => state.menu);\n  const { color } = useSelector((state) => state.settings);\n  const dispatch = useDispatch();\n\n  const onPinButtonClick = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (pinButtonEnable) {\n      dispatch(menuChangeBehaviour(behaviour === MENU_BEHAVIOUR.Pinned ? MENU_BEHAVIOUR.Unpinned : MENU_BEHAVIOUR.Pinned));\n    }\n    return false;\n  };\n  const onDisabledPinButtonClick = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const onLightDarkModeClick = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    dispatch(settingsChangeColor(color.includes('light') ? color.replace('light', 'dark') : color.replace('dark', 'light')));\n  };\n  const [showSearchModal, setShowSearchModal] = useState(false);\n\n  const onSearchIconClick = (e) => {\n    e.preventDefault();\n    setShowSearchModal(true);\n  };\n\n  return (\n    <>\n      <ul className=\"list-unstyled list-inline text-center menu-icons\">\n        <li className=\"list-inline-item\">\n          <a href=\"#/\" onClick={onSearchIconClick}>\n            <CsLineIcons icon=\"search\" size=\"18\" />\n          </a>\n        </li>\n        <li className=\"list-inline-item\">\n          <a\n            href=\"#/\"\n            id=\"pinButton\"\n            onClick={pinButtonEnable ? onPinButtonClick : onDisabledPinButtonClick}\n            className={classNames('pin-button', { disabled: !pinButtonEnable })}\n          >\n            <CsLineIcons icon=\"lock-on\" size=\"18\" className=\"unpin\" />\n            <CsLineIcons icon=\"lock-off\" size=\"18\" className=\"pin\" />\n          </a>\n        </li>\n        <li className=\"list-inline-item\">\n          <a href=\"#/\" id=\"colorButton\" onClick={onLightDarkModeClick}>\n            <CsLineIcons icon=\"light-on\" size=\"18\" className=\"light\" />\n            <CsLineIcons icon=\"light-off\" size=\"18\" className=\"dark\" />\n          </a>\n        </li>\n        {/* <IconMenuNotifications /> */}\n      </ul>\n      <SearchModal show={showSearchModal} setShow={setShowSearchModal} />\n    </>\n  );\n};\n\nexport default React.memo(NavIconMenu);\n","/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/NavUserMenu.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/hooks/useMutationObservable.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/main-menu/MainMenuItems.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/main-menu/helper.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/notifications/Notifications.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/search/SearchModal.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/components/scrollspy/ScrollspyMobile.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/hooks/useWindowSize.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/hooks/useWindowScroll.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/layout/nav/search/SearchInput.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/components/scrollspy/ScrollspyContent.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/config/logs.js",["1320","1321","1322","1323","1324","1325","1326","1327","1328","1329","1330","1331","1332","1333","1334","1335"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport moment from 'moment';\nimport pt from 'date-fns/locale/pt';\nimport DatePicker from 'react-datepicker';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport PaginationTable from 'helpers/pagination';\nimport formatField from 'helpers/formatField';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2'\nimport { SketchPicker } from 'react-color';\nimport ReactSelect from 'react-select';\n\n\nconst Component = () => {\n    const title = 'Logs de atividades';\n    const description = 'Logs de atividades';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'config', text: 'Configurações' },\n        { to: 'activitylogs', text: 'Logs de atividades' },\n    ]\n\n    const columns = [\n        { name: 'Id', acessor: 'id', column: 'id' },\n        { name: 'Nome', acessor: 'name', column: 'name', format: 'user_complete_name' },\n        { name: 'Ação', acessor: 'action', column: 'action' },\n        { name: 'Browser', acessor: 'browser', column: 'browser' },\n        { name: 'SO', acessor: 'so', column: 'so', format: 'so' },\n        { name: 'Data', acessor: 'created_at', column: 'created_at' },\n        { name: '', acessor: 'custom', column: 'custom' },\n    ]\n\n\n    const [modalViewRegister, setModalViewRegister] = useState(false)\n    const [limit, setLimit] = useState(10)\n    const [loading, setLoading] = useState(true)\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [order, setOrder] = useState(false)\n    const [orderBy, setOrderBy] = useState('asc')\n    const [data, setData] = useState(false)\n    const [total, setTotal] = useState(false)\n    const [searchField, setSearchField] = useState('')\n    const [paginationConfig, setPaginationConfig] = useState({\n        page: 1\n    })\n\n    const [log, setLog] = useState(false)\n\n    const loadData = async (pageLimit, page) => {\n        document.body.classList.add('spinner')\n\n        pageLimit = limit\n\n        try {\n            let url = `/api/v1/private/activitylogs?order=${orderBy}&limit=${pageLimit}&page=${page}&search=${searchField}`\n\n            if (startDate && endDate) {\n                url += `&start=${moment(startDate).format('YYYY-MM-DD')}&end=${moment(endDate).format('YYYY-MM-DD')}`\n            }\n\n            if (order) {\n                url += `&order=${orderBy}&order_by=${order}`\n            }\n\n            const response = await api.get(url)\n\n            setData(response.data.data)\n            setTotal(response.data.total)\n\n            setPaginationConfig({\n                previousPage: response.data.data.prev_page_url,\n                page: response.data.data.current_page,\n                nextPage: response.data.data.next_page_url,\n                limit: pageLimit,\n                total: response.data.data.last_page,\n                lastPage: response.data.data.last_page\n            })\n\n        } catch (error) {\n            console.log(error)\n        }\n\n        document.body.classList.remove('spinner')\n\n        setLoading(false)\n    }\n\n    const orderTable = (param) => {\n        setOrder(param)\n\n        if (orderBy === 'asc') {\n            setOrderBy('desc')\n        } else {\n            setOrderBy('asc')\n        }\n    }\n\n    const changePaginationConfig = async (param, value) => {\n        await setPaginationConfig({\n            ...paginationConfig, [param]: value\n        })\n    }\n\n    useEffect(() => {\n        if (!data) {\n            loadData(paginationConfig.limit, paginationConfig.page)\n        }\n    }, [paginationConfig.page])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [limit])\n\n    useEffect(() => {\n        if (data) {\n            if (startDate && endDate) {\n                loadData(limit, 1)\n            }\n        }\n    }, [endDate, startDate])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [order, orderBy])\n\n    const handleSearch = (e) => {\n        setSearchField(e.target.value)\n    }\n\n    const openLog = async (row) => {\n        setLog(row)\n        setModalViewRegister(true)\n    }\n\n\n    const renderTable = () => {\n        return (\n            <>\n                {/* FILTERS */}\n                <Row>\n                    <Col xs={12} xxl={1} className=\"d-flex d-flex justify-content-end align-items-end\">\n                        <Dropdown\n                            align={{ xs: 'end' }}\n                            className=\"d-inline-block ms-1\"\n                            onSelect={(e) =>\n                                setLimit(e)\n                            }\n                        >\n                            <Dropdown.Toggle variant=\"foreground-alternate\" className=\"shadow\">\n                                {limit} Items\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu\n                                className=\"shadow dropdown-menu-end\"\n                            >\n                                <Dropdown.Item eventKey=\"5\">5 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"10\">10 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"20\">20 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"50\">50 Items</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n\n                    <Col xxl={4}>\n                        <Row className=\"g-2 w-100\">\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">De</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                />\n                            </Col>\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">Até</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={endDate}\n                                    onChange={(date) => setEndDate(date)}\n                                    selectsEnd\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                    minDate={startDate}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xxl={4}>\n                        &nbsp;\n                    </Col>\n                    <Col xs={12} xxl={3} className=\" d-flex justify-content-end align-items-end\">\n                        <InputGroup className=\"mt-2\"\n                            onChange={e => handleSearch(e)}\n                            onKeyDown={e => e.key === 'Enter' ? loadData(paginationConfig.limit, 1) : false}\n                        >\n                            <InputGroup.Text >\n                                <CsLineIcons icon=\"search\" />\n                            </InputGroup.Text>\n                            <FormControl placeholder=\"pesquisar...\" aria-label=\"Pesquisar\" aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                {/* FILTERS */}\n\n                {/* DATA */}\n                <Row className='mt-5'>\n                    <Col xs={12} xxl={12}>\n                        {data.length === 0\n                            ? <>\n                                <Row className=\"g-2 mb-5\">\n                                    <Col sm=\"12\" xxl=\"12\">\n                                        <Card className=\"sh-19\">\n                                            <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                                <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                                <p className=\"heading mb-0\">\n                                                    Ops! Nenhum resultado para essa consulta.\n                                                </p>\n\n                                                <p className=\"text-medium mb-0 text-muted\">\n                                                    Altere os filtros da consulta e tente novamente.\n                                                </p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </>\n                            : <>\n\n                                {total\n                                    ? <>\n                                        <Alert variant=\"info\">\n                                            Total de registros localizados: <strong>{total}</strong>\n                                        </Alert>\n                                    </>\n                                    : <></>\n                                }\n\n                                <table className=\"react-table rows\" >\n                                    <thead>\n                                        <tr>\n                                            {columns.map((row, index) => {\n                                                return (\n                                                    <th\n                                                        key={index}\n                                                        className={`text-muted text-small text-uppercase ${row.column ? 'cursor-pointer' : ''}`}\n                                                        onClick={() => row.column ? orderTable(row.column) : false}\n                                                    >\n                                                        <span className={`${order === row.column ? 'text-primary  font-weight-bold' : ''}`}>\n                                                            {row.name} &nbsp;\n\n                                                            {order === row.column\n                                                                ? <CsLineIcons size={10} icon={orderBy === 'asc' ? 'chevron-top' : 'chevron-bottom'} />\n                                                                : <></>\n                                                            }\n                                                        </span>\n                                                    </th>\n                                                )\n                                            })}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data.length > 0 && data.map((row, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    {columns.map((r, i) => {\n                                                        return (\n                                                            <td key={i}>\n\n                                                                {r.format ?\n                                                                    formatField(r.format, row[r.acessor], row)\n                                                                    : <>\n                                                                        {r.acessor === 'custom'\n                                                                            ? <>\n                                                                                {/* <Button onClick={() => openLog(row.id)} variant=\"outline-success\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"eye\" />\n                                                                                </Button> */}\n\n\n\n                                                                            </>\n                                                                            : <>\n                                                                                {row[r.acessor]}\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </td>\n                                                        )\n                                                    })}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n\n                                </table>\n\n\n                                <PaginationTable\n                                    config={paginationConfig}\n                                    gotoPage={(page) => [changePaginationConfig('page', page)]}\n                                />\n\n                            </>\n                        }\n                    </Col>\n                </Row>\n                {/* DATA */}\n            </>\n        )\n    }\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required('Este campo é obrigatório'),\n    })\n\n    const formatOptionLabel = ({ value, label, customAbbreviation }) => (\n        <div style={{ display: \"flex\" }}>\n            <div>{label}</div>\n            <div style={{ marginLeft: \"10px\", color: \"#ccc\" }}>\n                <CsLineIcons icon={`${label}`} className=\"text-info\" size={20} />\n            </div>\n        </div>\n    );\n\n\n    return (\n\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            {loading\n                ? <>\n                    <div className=\"align-items-center\">\n                        <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                        <div>Carregando...</div>\n                    </div>\n                </>\n                : <>\n                    {renderTable()}\n                </>\n            }\n\n            {/* MODAL VIEW */}\n            <Modal\n                className=\"scroll-out\"\n                show={modalViewRegister}\n                size='md'\n                centered\n                onHide={() => setModalViewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalViewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                </Modal.Body>\n            </Modal>\n            {/* MODAL NEW REGISTER */}\n\n\n        </>\n    );\n};\n\nexport default Component;\n","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chartLogsMonth.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/home/chartLogsDays.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/home/chartOrdersMonth.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/home/chartOrdersDays.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/home/chartNewOrganizationsMonth.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/home/chartNewOrganizationsDays.js",[],"/Users/caio/Projects/Samples/front-vawlog/src/views/home/chartOrdersByStatusMonth.js",["1336","1337","1338","1339"],"import React from 'react';\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport { Card } from 'react-bootstrap';\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default function (props) {\n    const options = {\n        responsive: true,\n        maintainAspectRatio: false,\n        indexAxis: 'x',\n        scales: {\n            x: {\n                stacked: true,\n            },\n            y: {\n                stacked: true,\n            },\n        },\n        elements: {\n            bar: {\n                borderWidth: 2,\n            },\n        },\n        plugins: {\n            legend: {\n                position: 'bottom',\n            },\n            title: {\n                display: true,\n                text: 'Ordens de coleta por mês / por status',\n            },\n        },\n    };\n    const labels = []\n\n    if (props.data) {\n        if (props.data.length > 0) {\n            props.data.map((row, i) => {\n                if (i === 0) {\n                    Object.keys(row.data).map((r) => {\n                        labels.push(r)\n                    })\n                }\n            })\n        }\n    }\n\n    const sets = []\n\n    const colors = [\n        {\n            borderColor: 'rgb(31, 138, 112)',\n            backgroundColor: 'rgba(31, 138, 112, 0.5)'\n        },\n        {\n            borderColor: 'rgb(252, 115, 0)',\n            backgroundColor: 'rgba(252, 115, 0, 0.5)'\n        },\n        {\n            borderColor: 'rgb(191, 219, 56)',\n            backgroundColor: 'rgba(191, 219, 56, 0.5)'\n        },\n        {\n            borderColor: 'rgb(0, 51, 124)',\n            backgroundColor: 'rgba(0, 51, 124, 0.5)'\n        },\n        {\n            borderColor: 'rgb(255, 234, 32)',\n            backgroundColor: 'rgba(255, 234, 32, 0.5)'\n        },\n        {\n            borderColor: 'rgb(252, 41, 71)',\n            backgroundColor: 'rgba(252, 41, 71, 0.5)'\n        },\n        {\n            borderColor: 'rgb(113, 73, 198)',\n            backgroundColor: 'rgba(113, 73, 198, 0.5)'\n        },\n        {\n            borderColor: 'rgb(31, 138, 112)',\n            backgroundColor: 'rgba(31, 138, 112, 0.5)'\n        },\n        {\n            borderColor: 'rgb(252, 115, 0)',\n            backgroundColor: 'rgba(252, 115, 0, 0.5)'\n        },\n        {\n            borderColor: 'rgb(191, 219, 56)',\n            backgroundColor: 'rgba(191, 219, 56, 0.5)'\n        },\n        {\n            borderColor: 'rgb(0, 51, 124)',\n            backgroundColor: 'rgba(0, 51, 124, 0.5)'\n        },\n        {\n            borderColor: 'rgb(255, 234, 32)',\n            backgroundColor: 'rgba(255, 234, 32, 0.5)'\n        },\n        {\n            borderColor: 'rgb(252, 41, 71)',\n            backgroundColor: 'rgba(252, 41, 71, 0.5)'\n        },\n        {\n            borderColor: 'rgb(113, 73, 198)',\n            backgroundColor: 'rgba(113, 73, 198, 0.5)'\n        },\n\n    ]\n\n    if (props.data) {\n        if (props.data.length > 0) {\n            props.data.map((row, i) => {\n                let data = []\n\n                Object.values(row.data).map((r) => {\n                    data.push(r)\n                })\n\n                sets.push({\n                    label: row.name,\n                    data: data,\n                    borderColor: row.color ? row.color : colors[i].borderColor,\n                    backgroundColor: row.color ? row.color : colors[i].backgroundColor,\n                })\n            })\n        }\n    }\n\n    const data = {\n        labels,\n        datasets: sets\n    };\n\n    return <Card>\n        <Card.Body>\n            <Bar height={300} options={options} data={data} />\n        </Card.Body>\n    </Card>\n}\n","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chartOrdersByStatusDays.js",["1340","1341","1342","1343"],"import React from 'react';\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport { Card } from 'react-bootstrap';\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default function (props) {\n    const options = {\n        responsive: true,\n        maintainAspectRatio: false,\n        indexAxis: 'x',\n        elements: {\n            bar: {\n                borderWidth: 2,\n            },\n        },\n        scales: {\n            x: {\n                stacked: true,\n            },\n            y: {\n                stacked: true,\n            },\n        },\n        plugins: {\n            legend: {\n                position: 'bottom',\n            },\n            title: {\n                display: true,\n                text: 'Ordens de coleta por dia / status',\n            },\n        },\n    };\n\n    const labels = []\n\n    if (props.data) {\n        if (props.data.length > 0) {\n            props.data.map((row, i) => {\n                if (i === 0) {\n                    Object.values(row.data).map((r) => {\n                        labels.push(r.day)\n                    })\n\n                }\n            })\n        }\n    }\n\n    const sets = []\n\n    const colors = [\n        {\n            borderColor: 'rgb(31, 138, 112)',\n            backgroundColor: 'rgba(31, 138, 112, 0.5)'\n        },\n        {\n            borderColor: 'rgb(252, 115, 0)',\n            backgroundColor: 'rgba(252, 115, 0, 0.5)'\n        },\n        {\n            borderColor: 'rgb(191, 219, 56)',\n            backgroundColor: 'rgba(191, 219, 56, 0.5)'\n        },\n        {\n            borderColor: 'rgb(0, 51, 124)',\n            backgroundColor: 'rgba(0, 51, 124, 0.5)'\n        },\n        {\n            borderColor: 'rgb(255, 234, 32)',\n            backgroundColor: 'rgba(255, 234, 32, 0.5)'\n        },\n        {\n            borderColor: 'rgb(252, 41, 71)',\n            backgroundColor: 'rgba(252, 41, 71, 0.5)'\n        },\n        {\n            borderColor: 'rgb(113, 73, 198)',\n            backgroundColor: 'rgba(113, 73, 198, 0.5)'\n        },\n        {\n            borderColor: 'rgb(31, 138, 112)',\n            backgroundColor: 'rgba(31, 138, 112, 0.5)'\n        },\n        {\n            borderColor: 'rgb(252, 115, 0)',\n            backgroundColor: 'rgba(252, 115, 0, 0.5)'\n        },\n        {\n            borderColor: 'rgb(191, 219, 56)',\n            backgroundColor: 'rgba(191, 219, 56, 0.5)'\n        },\n        {\n            borderColor: 'rgb(0, 51, 124)',\n            backgroundColor: 'rgba(0, 51, 124, 0.5)'\n        },\n        {\n            borderColor: 'rgb(255, 234, 32)',\n            backgroundColor: 'rgba(255, 234, 32, 0.5)'\n        },\n        {\n            borderColor: 'rgb(252, 41, 71)',\n            backgroundColor: 'rgba(252, 41, 71, 0.5)'\n        },\n        {\n            borderColor: 'rgb(113, 73, 198)',\n            backgroundColor: 'rgba(113, 73, 198, 0.5)'\n        },\n\n    ]\n\n    if (props.data) {\n        if (props.data.length > 0) {\n\n            props.data.map((row, i) => {\n\n                let data = []\n\n                Object.values(row.data).map((r) => {\n                    data.push(r.total)\n                })\n\n                sets.push({\n                    label: row.name,\n                    data: data,\n                    borderColor: row.color ? row.color : colors[i].borderColor,\n                    backgroundColor: row.color ? row.color : colors[i].backgroundColor,\n                })\n            })\n        }\n    }\n\n    const data = {\n        labels,\n        datasets: sets\n    };\n\n    return <Card>\n        <Card.Body>\n            <Bar height={300} options={options} data={data} />\n        </Card.Body>\n    </Card>\n}\n","/Users/caio/Projects/Samples/front-vawlog/src/views/home/chartOrdersByTypeMonth.js",["1344","1345","1346","1347"],"import React from 'react';\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { Card } from 'react-bootstrap';\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default function (props) {\n    const options = {\n        responsive: true,\n        maintainAspectRatio: false,\n        interaction: {\n            mode: 'index',\n            intersect: false,\n        },\n        scales: {\n            y: {\n                type: 'linear',\n                display: true,\n                position: 'left',\n            },\n            y1: {\n                type: 'linear',\n                display: true,\n                position: 'right',\n                grid: {\n                    drawOnChartArea: false,\n                },\n            },\n        },\n        stacked: false,\n        elements: {\n            bar: {\n                borderWidth: 2,\n            },\n        },\n        plugins: {\n            legend: {\n                position: 'bottom',\n            },\n            title: {\n                display: true,\n                text: 'Ordens de coleta por mês / por tipo',\n            },\n        },\n    };\n    const labels = []\n\n    if (props.data) {\n        if (props.data.length > 0) {\n            props.data.map((row, i) => {\n                if (i === 0) {\n                    Object.keys(row.data).map((r) => {\n                        labels.push(r)\n                    })\n                }\n            })\n        }\n    }\n\n    const sets = []\n\n    const colors = [\n        {\n            borderColor: 'rgb(31, 138, 112)',\n            backgroundColor: 'rgba(31, 138, 112, 0.5)'\n        },\n        {\n            borderColor: 'rgb(252, 115, 0)',\n            backgroundColor: 'rgba(252, 115, 0, 0.5)'\n        },\n        {\n            borderColor: 'rgb(191, 219, 56)',\n            backgroundColor: 'rgba(191, 219, 56, 0.5)'\n        },\n        {\n            borderColor: 'rgb(0, 51, 124)',\n            backgroundColor: 'rgba(0, 51, 124, 0.5)'\n        },\n        {\n            borderColor: 'rgb(255, 234, 32)',\n            backgroundColor: 'rgba(255, 234, 32, 0.5)'\n        },\n        {\n            borderColor: 'rgb(252, 41, 71)',\n            backgroundColor: 'rgba(252, 41, 71, 0.5)'\n        },\n        {\n            borderColor: 'rgb(113, 73, 198)',\n            backgroundColor: 'rgba(113, 73, 198, 0.5)'\n        },\n        {\n            borderColor: 'rgb(31, 138, 112)',\n            backgroundColor: 'rgba(31, 138, 112, 0.5)'\n        },\n        {\n            borderColor: 'rgb(252, 115, 0)',\n            backgroundColor: 'rgba(252, 115, 0, 0.5)'\n        },\n        {\n            borderColor: 'rgb(191, 219, 56)',\n            backgroundColor: 'rgba(191, 219, 56, 0.5)'\n        },\n        {\n            borderColor: 'rgb(0, 51, 124)',\n            backgroundColor: 'rgba(0, 51, 124, 0.5)'\n        },\n        {\n            borderColor: 'rgb(255, 234, 32)',\n            backgroundColor: 'rgba(255, 234, 32, 0.5)'\n        },\n        {\n            borderColor: 'rgb(252, 41, 71)',\n            backgroundColor: 'rgba(252, 41, 71, 0.5)'\n        },\n        {\n            borderColor: 'rgb(113, 73, 198)',\n            backgroundColor: 'rgba(113, 73, 198, 0.5)'\n        },\n\n    ]\n\n    if (props.data) {\n        if (props.data.length > 0) {\n            props.data.map((row, i) => {\n                let data = []\n\n                Object.values(row.data).map((r) => {\n                    data.push(r)\n                })\n\n                sets.push({\n                    label: row.name,\n                    data: data,\n                    borderColor: row.color ? row.color : colors[i].borderColor,\n                    backgroundColor: row.color ? row.color : colors[i].backgroundColor,\n                })\n            })\n        }\n    }\n\n    const data = {\n        labels,\n        datasets: sets\n    };\n\n    return <Card>\n        <Card.Body>\n            <Line height={300} options={options} data={data} />\n        </Card.Body>\n    </Card>\n}\n","/Users/caio/Projects/Samples/front-vawlog/src/views/organizations/users.js",["1348","1349","1350","1351","1352","1353","1354","1355","1356","1357","1358","1359","1360","1361","1362","1363"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport moment from 'moment';\nimport pt from 'date-fns/locale/pt';\nimport DatePicker from 'react-datepicker';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport PaginationTable from 'helpers/pagination';\nimport formatField from 'helpers/formatField';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2'\nimport ReactSelect from 'react-select';\nimport axios from 'axios';\nimport { Redirect } from 'react-router-dom';\n\n\nconst Component = () => {\n    const title = 'Empresas';\n    const description = 'Empresas';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'list', text: 'Empresas' },\n    ]\n\n    const columns = [\n        { name: 'Id', acessor: 'id', column: 'id' },\n        { name: 'Razão social', acessor: 'social_name', column: 'social_name' },\n        { name: 'CPF/CNPJ', acessor: 'taxid', column: 'taxid' },\n        { name: 'Status', acessor: '', column: '', format: 'organization_status' },\n        { name: 'Tipo', acessor: '', column: '', format: 'organization_type' },\n        { name: 'Data', acessor: 'created_at', column: 'created_at' },\n        { name: '', acessor: 'custom', column: 'custom' },\n    ]\n\n    const [redirect, setRedirect] = useState(false)\n    const [redirectUrl, setRedirectUrl] = useState('')\n\n    const [modalNewRegister, setModalNewRegister] = useState(false)\n    const [limit, setLimit] = useState(10)\n    const [loading, setLoading] = useState(true)\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [order, setOrder] = useState(false)\n    const [orderBy, setOrderBy] = useState('asc')\n    const [data, setData] = useState(false)\n    const [total, setTotal] = useState(false)\n    const [searchField, setSearchField] = useState('')\n    const [paginationConfig, setPaginationConfig] = useState({\n        page: 1\n    })\n    const [numAddresses, setNumAddresses] = useState(0)\n    const [numContacts, setNumContacts] = useState(0)\n\n    const loadData = async (pageLimit, page) => {\n        document.body.classList.add('spinner')\n\n        pageLimit = limit\n\n        try {\n            let url = `/api/v1/private/organizations?order=${orderBy}&limit=${pageLimit}&page=${page}&search=${searchField}`\n\n            if (startDate && endDate) {\n                url += `&start=${moment(startDate).format('YYYY-MM-DD')}&end=${moment(endDate).format('YYYY-MM-DD')}`\n            }\n\n            if (order) {\n                url += `&order=${orderBy}&order_by=${order}`\n            }\n\n            const response = await api.get(url)\n\n            setData(response.data.data)\n            setTotal(response.data.total)\n\n            setPaginationConfig({\n                previousPage: response.data.data.prev_page_url,\n                page: response.data.data.current_page,\n                nextPage: response.data.data.next_page_url,\n                limit: pageLimit,\n                total: response.data.data.last_page,\n                lastPage: response.data.data.last_page\n            })\n\n        } catch (error) {\n            console.log(error)\n        }\n\n        document.body.classList.remove('spinner')\n\n        setLoading(false)\n    }\n\n    const orderTable = (param) => {\n        setOrder(param)\n\n        if (orderBy === 'asc') {\n            setOrderBy('desc')\n        } else {\n            setOrderBy('asc')\n        }\n    }\n\n    const changePaginationConfig = async (param, value) => {\n        await setPaginationConfig({\n            ...paginationConfig, [param]: value\n        })\n    }\n\n    useEffect(() => {\n        if (!data) {\n            loadData(paginationConfig.limit, paginationConfig.page)\n        }\n    }, [paginationConfig.page])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [limit])\n\n    useEffect(() => {\n        if (data) {\n            if (startDate && endDate) {\n                loadData(limit, 1)\n            }\n        }\n    }, [endDate, startDate])\n\n    useEffect(() => {\n        if (data) {\n            loadData(limit, 1)\n        }\n    }, [order, orderBy])\n\n    const handleSearch = (e) => {\n        setSearchField(e.target.value)\n    }\n\n    const [status, setStatus] = useState([])\n    const [type, setType] = useState([])\n    const [addressType, setAddressType] = useState([])\n    const [emailType, setEmailType] = useState([])\n    const [contactType, setContactType] = useState([])\n    const [phoneType, setPhoneType] = useState([])\n\n    const [addressesArray, setAddressesArray] = useState([])\n    const [contactArray, setContactArray] = useState([])\n\n    const getParams = async () => {\n        try {\n            const response = await api.get(`/api/v1/private/organization_status?limit=100`)\n            let array_organization_status = []\n            response.data.data.map((row) => {\n                array_organization_status.push({\n                    label: row.name,\n                    value: row.id\n                })\n            })\n            setStatus(array_organization_status)\n        } catch (error) { }\n\n        try {\n            const response = await api.get(`/api/v1/private/organization_type?limit=100`)\n            let array_organization_type = []\n            response.data.data.map((row) => {\n                array_organization_type.push({\n                    label: row.name,\n                    value: row.id\n                })\n            })\n            setType(array_organization_type)\n        } catch (error) { }\n\n        try {\n            const response = await api.get(`/api/v1/private/address_type?limit=100`)\n            let array_address_type = []\n            response.data.data.map((row) => {\n                array_address_type.push({\n                    label: row.name,\n                    value: row.id\n                })\n            })\n            setAddressType(array_address_type)\n        } catch (error) { }\n\n        try {\n            const response = await api.get(`/api/v1/private/email_type?limit=100`)\n            let array_email_type = []\n            response.data.data.map((row) => {\n                array_email_type.push({\n                    label: row.name,\n                    value: row.id\n                })\n            })\n            setEmailType(array_email_type)\n        } catch (error) { }\n\n        try {\n            const response = await api.get(`/api/v1/private/contact_type?limit=100`)\n            let array_contact_type = []\n            response.data.data.map((row) => {\n                array_contact_type.push({\n                    label: row.name,\n                    value: row.id\n                })\n            })\n            setContactType(array_contact_type)\n        } catch (error) { }\n\n        try {\n            const response = await api.get(`/api/v1/private/phone_type?limit=100`)\n            let array_phone_type = []\n            response.data.data.map((row) => {\n                array_phone_type.push({\n                    label: row.name,\n                    value: row.id\n                })\n            })\n            setPhoneType(array_phone_type)\n        } catch (error) { }\n    }\n\n    useEffect(() => {\n        if (status.length === 0 && type.length === 0) {\n            // getParams()\n        }\n    }, [])\n\n    const setAddressesInput = async (i, field, value) => {\n        if (field === 'CEP') {\n            if (value.length >= 8) {\n                axios.get(`https://viacep.com.br/ws/${value}/json/`).then((response) => {\n                    if (response.data.logradouro) {\n                        setAddressesInput(i, 'Endereco', response.data.logradouro)\n                    }\n\n                    let newArr = [...addressesArray]\n\n                    newArr[i] = {\n                        city: response.data.localidade ? response.data.localidade : newArr[i].city,\n                        state: response.data.uf ? response.data.uf : newArr[i].state,\n                        district: response.data.bairro ? response.data.bairro : newArr[i].district,\n                        address: response.data.logradouro ? response.data.logradouro : newArr[i].address,\n                        number: newArr[i].number,\n                        address_type_id: newArr[i].address_type_id,\n                        zip_code: newArr[i].zip_code,\n                        complement: newArr[i].complement,\n                        observations: newArr[i].observations,\n                    }\n\n                    setAddressesArray(newArr)\n                })\n            }\n        }\n\n        if (!addressesArray[i]) {\n            setAddressesArray(oldAddresses => [...oldAddresses, {\n                address_type_id: field === 'Tipo' ? value : '',\n                zip_code: field === 'CEP' ? value : '',\n                address: field === 'Endereco' ? value : '',\n                state: field === 'Estado' ? value : '',\n                city: field === 'Cidade' ? value : '',\n                district: field === 'Bairro' ? value : '',\n                number: field === 'Numero' ? value : '',\n                complement: field === 'Complemento' ? value : '',\n                observations: field === 'Observacoes' ? value : '',\n            }])\n        } else {\n            let newArr = [...addressesArray]\n\n            newArr[i] = {\n                address_type_id: field === 'Tipo' ? value : newArr[i].address_type_id,\n                zip_code: field === 'CEP' ? value : newArr[i].zip_code,\n                address: field === 'Endereco' ? value : newArr[i].address,\n                state: field === 'Estado' ? value : newArr[i].state,\n                city: field === 'Cidade' ? value : newArr[i].city,\n                district: field === 'Bairro' ? value : newArr[i].district,\n                number: field === 'Numero' ? value : newArr[i].number,\n                complement: field === 'Complemento' ? value : newArr[i].complement,\n                observations: field === 'Observacoes' ? value : newArr[i].observations,\n            }\n\n            setAddressesArray(newArr)\n        }\n    }\n\n    const setContactInput = async (i, field, value) => {\n        if (!contactArray[i]) {\n\n            setContactArray(oldContacts => [...oldContacts, {\n                name: field === 'Nome' ? value : '',\n                contact_type_id: field === 'Tipo' ? value : '',\n                phones: [\n                    {\n                        number: field === 'Telefone' ? value : '',\n                        phone_type_id: field === 'Tipo_telefone' ? value : '',\n                    }\n                ],\n                emails: [\n                    {\n                        email: field === 'Email' ? value : '',\n                        email_type_id: field === 'Tipo_email' ? value : '',\n                    }\n                ]\n            }])\n\n        } else {\n            let newArr = [...contactArray]\n\n            newArr[i] = {\n                name: field === 'Nome' ? value : newArr[i].name,\n                contact_type_id: field === 'Tipo' ? value : newArr[i].contact_type_id,\n                phones: [\n                    {\n                        number: field === 'Telefone' ? value : newArr[i].phones[0].number,\n                        phone_type_id: field === 'Tipo_telefone' ? value : newArr[i].phones[0].phone_type_id,\n                    }\n                ],\n                emails: [\n                    {\n                        email: field === 'Email' ? value : newArr[i].emails[0].email,\n                        email_type_id: field === 'Tipo_email' ? value : newArr[i].emails[0].email_type_id,\n                    }\n                ]\n            }\n\n            setContactArray(newArr)\n\n        }\n    }\n\n    const [modalViewOrganization, setModalViewOrganization] = useState(false)\n    const [organizationData, setOrganizationData] = useState(false)\n\n    const callUsers = async (row) => {\n        // setModalViewOrganization(true)\n        // setOrganizationData(row)\n\n        setRedirectUrl(`/organizations/users/${row.id}`)\n        setRedirect(true)\n    }\n\n    const renderTable = () => {\n        return (\n            <>\n                {/* FILTERS */}\n                <Row>\n                    <Col xs={12} xxl={1} className=\"d-flex d-flex justify-content-end align-items-end\">\n                        <Dropdown\n                            align={{ xs: 'end' }}\n                            className=\"d-inline-block ms-1\"\n                            onSelect={(e) =>\n                                setLimit(e)\n                            }\n                        >\n                            <Dropdown.Toggle variant=\"foreground-alternate\" className=\"shadow\">\n                                {limit} Items\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu\n                                className=\"shadow dropdown-menu-end\"\n                            >\n                                <Dropdown.Item eventKey=\"5\">5 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"10\">10 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"20\">20 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"50\">50 Items</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n\n                    <Col xxl={4}>\n                        <Row className=\"g-2 w-100\">\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">De</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                />\n                            </Col>\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">Até</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={endDate}\n                                    onChange={(date) => setEndDate(date)}\n                                    selectsEnd\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                    minDate={startDate}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xxl={4}>\n                        &nbsp;\n                    </Col>\n                    <Col xs={12} xxl={3} className=\" d-flex justify-content-end align-items-end\">\n                        <InputGroup className=\"mt-2\"\n                            onChange={e => handleSearch(e)}\n                            onKeyDown={e => e.key === 'Enter' ? loadData(paginationConfig.limit, 1) : false}\n                        >\n                            <InputGroup.Text >\n                                <CsLineIcons icon=\"search\" />\n                            </InputGroup.Text>\n                            <FormControl placeholder=\"pesquisar...\" aria-label=\"Pesquisar\" aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                {/* FILTERS */}\n\n                {/* DATA */}\n                <Row className='mt-5'>\n                    <Col xs={12} xxl={12}>\n                        {data.length === 0\n                            ? <>\n                                <Row className=\"g-2 mb-5\">\n                                    <Col sm=\"12\" xxl=\"12\">\n                                        <Card className=\"sh-19\">\n                                            <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                                <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                                <p className=\"heading mb-0\">\n                                                    Ops! Nenhum resultado para essa consulta.\n                                                </p>\n\n                                                <p className=\"text-medium mb-0 text-muted\">\n                                                    Altere os filtros da consulta e tente novamente.\n                                                </p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </>\n                            : <>\n\n                                {total\n                                    ? <>\n                                        <Alert variant=\"info\">\n                                            Total de registros localizados: <strong>{total}</strong>\n                                        </Alert>\n                                    </>\n                                    : <></>\n                                }\n\n                                <table className=\"react-table rows\" >\n                                    <thead>\n                                        <tr>\n                                            {columns.map((row, index) => {\n                                                return (\n                                                    <th\n                                                        key={index}\n                                                        className={`text-muted text-small text-uppercase ${row.column ? 'cursor-pointer' : ''}`}\n                                                        onClick={() => row.column ? orderTable(row.column) : false}\n                                                    >\n                                                        <span className={`${order === row.column ? 'text-primary  font-weight-bold' : ''}`}>\n                                                            {row.name} &nbsp;\n\n                                                            {order === row.column\n                                                                ? <CsLineIcons size={10} icon={orderBy === 'asc' ? 'chevron-top' : 'chevron-bottom'} />\n                                                                : <></>\n                                                            }\n                                                        </span>\n                                                    </th>\n                                                )\n                                            })}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data.length > 0 && data.map((row, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    {columns.map((r, i) => {\n                                                        return (\n                                                            <td key={i}>\n\n                                                                {r.format ?\n                                                                    formatField(r.format, row[r.acessor], row)\n                                                                    : <>\n                                                                        {r.acessor === 'custom'\n                                                                            ? <>\n                                                                                <Button onClick={() => callUsers(row)} variant=\"info\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"user\" />\n                                                                                </Button>\n                                                                            </>\n                                                                            : <>\n                                                                                {row[r.acessor]}\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </td>\n                                                        )\n                                                    })}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n\n                                </table>\n\n\n                                <PaginationTable\n                                    config={paginationConfig}\n                                    gotoPage={(page) => [changePaginationConfig('page', page)]}\n                                />\n\n                            </>\n                        }\n                    </Col>\n                </Row>\n                {/* DATA */}\n            </>\n        )\n    }\n\n    return (\n        <>\n            {redirect\n                ? <Redirect to={redirectUrl} />\n                : false\n            }\n\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            {loading\n                ? <>\n                    <div className=\"align-items-center\">\n                        <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                        <div>Carregando...</div>\n                    </div>\n                </>\n                : <>\n                    {renderTable()}\n                </>\n            }\n\n            {/* MODAL NEW REGISTER */}\n            <Modal\n                show={modalNewRegister}\n                size='lg'\n                centered\n                onHide={() => setModalNewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalNewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <h4>Novo cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            social_name: '',\n                            surname: '',\n                            taxid: '',\n                            ie: '',\n                            im: '',\n                            site: '',\n                            organization_type_id: '',\n                            organization_status_id: '',\n                            addresses: [],\n                            contacts: [],\n                            phones: [],\n                            emails: []\n                        }}\n\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/organizations`, {\n                                    social_name: values.social_name,\n                                    surname: values.surname,\n                                    taxid: values.taxid,\n                                    ie: values.ie,\n                                    im: values.im,\n                                    site: values.site,\n                                    organization_type_id: values.organization_type_id,\n                                    organization_status_id: values.organization_status_id,\n                                    addresses: addressesArray,\n                                    contacts: contactArray\n                                })\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalNewRegister(false)\n                                    loadData()\n\n                                    setContactArray([])\n                                    setAddressesArray([])\n                                    setNumAddresses(0)\n                                    setNumContacts(0)\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\"tooltip-end-bottom mt-4\">\n                                <Row>\n                                    <Col xs={6}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Tipo </div>\n                                            <ReactSelect\n                                                placeholder=\"\"\n                                                classNamePrefix=\"react-select\"\n                                                options={type}\n                                                value={type.filter(option => option.value === values.organization_type_id)}\n                                                onChange={e => setFieldValue('organization_type_id', e.value)}\n                                            />\n                                            {errors.organization_type_id && touched.organization_type_id && <div className=\"d-block invalid-tooltip\">{errors.organization_type_id}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={6}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Status </div>\n                                            <ReactSelect\n                                                placeholder=\"\"\n                                                classNamePrefix=\"react-select\"\n                                                options={status}\n                                                value={status.filter(option => option.value === values.organization_status_id)}\n                                                onChange={e => setFieldValue('organization_status_id', e.value)}\n                                            />\n                                            {errors.organization_status_id && touched.organization_status_id && <div className=\"d-block invalid-tooltip\">{errors.organization_status_id}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={12}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Razão Social </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"social_name\" value={values.social_name} />\n                                            {errors.social_name && touched.social_name && <div className=\"d-block invalid-tooltip\">{errors.social_name}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={12}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Nome fantasia </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"surname\" value={values.surname} />\n                                            {errors.surname && touched.surname && <div className=\"d-block invalid-tooltip\">{errors.surname}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={4}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> CPF/CNPJ </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"taxid\" value={values.taxid} />\n                                            {errors.taxid && touched.taxid && <div className=\"d-block invalid-tooltip\">{errors.taxid}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={4}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Inscrição estadual </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"ie\" value={values.ie} />\n                                            {errors.ie && touched.ie && <div className=\"d-block invalid-tooltip\">{errors.ie}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={4}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Inscrição municipal </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"im\" value={values.im} />\n                                            {errors.im && touched.im && <div className=\"d-block invalid-tooltip\">{errors.im}</div>}\n                                        </div>\n                                    </Col>\n\n                                    <Col xs={12}>\n                                        <div className=\"mb-3 form-group tooltip-end-top\">\n                                            <div className='label'> Site </div>\n                                            <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"site\" value={values.site} />\n                                            {errors.site && touched.site && <div className=\"d-block invalid-tooltip\">{errors.site}</div>}\n                                        </div>\n                                    </Col>\n                                </Row>\n\n\n                                <Row className='mb-2 mt-2'>\n                                    <Col xs={6}>\n                                        <div className='d-flex align-items-center h-100 mt-1'>\n                                            <h5>Endereço(s)</h5>\n                                        </div>\n                                    </Col>\n                                    <Col xs={6}>\n                                        <div className='d-flex justify-content-end align-items-end h-100'>\n                                            <Button\n                                                variant=\"info\"\n                                                onClick={() => setNumAddresses(numAddresses + 1)}\n                                            >\n                                                Adicionar endereço\n                                            </Button>\n                                        </div>\n                                    </Col>\n                                </Row>\n\n\n                                {new Array(numAddresses).fill(0).map((_, index) => (\n                                    <Row key={index} style={{ border: '1px solid #616161', padding: 5, margin: 5, borderRadius: '6px' }}>\n                                        <Col xs={6}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Tipo de endereço </div>\n                                                <ReactSelect\n                                                    placeholder=\"\"\n                                                    classNamePrefix=\"react-select\"\n                                                    options={addressType}\n                                                    value={addressType.filter(option => option.value === addressesArray[index]?.address_type_id)}\n                                                    onChange={e => setAddressesInput(index, 'Tipo', e.value)}\n                                                />\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={6}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> CEP </div>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    disabled={values.loading}\n                                                    type=\"text\"\n                                                    value={addressesArray[index]?.zip_code}\n                                                    onChange={e => [setAddressesInput(index, 'CEP', e.target.value)]}\n                                                />\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={12}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Endereço </div>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    disabled={values.loading}\n                                                    type=\"text\"\n                                                    value={addressesArray[index]?.address}\n                                                    onChange={e => setAddressesInput(index, 'Endereco', e.target.value)}\n                                                />\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={4}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Bairro </div>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    disabled={values.loading}\n                                                    type=\"text\"\n                                                    value={addressesArray[index]?.district}\n                                                    onChange={e => setAddressesInput(index, 'Bairro', e.target.value)}\n                                                />\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={4}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Cidade </div>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    disabled={values.loading}\n                                                    type=\"text\"\n                                                    value={addressesArray[index]?.city}\n                                                    onChange={e => setAddressesInput(index, 'Cidade', e.target.value)}\n                                                />\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={4}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Estado </div>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    disabled={values.loading}\n                                                    type=\"text\"\n                                                    value={addressesArray[index]?.state}\n                                                    onChange={e => setAddressesInput(index, 'Estado', e.target.value)}\n                                                />\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={3}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Número </div>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    disabled={values.loading}\n                                                    type=\"text\"\n                                                    value={addressesArray[index]?.number}\n                                                    onChange={e => setAddressesInput(index, 'Numero', e.target.value)}\n                                                />\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={9}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Complemento </div>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    disabled={values.loading}\n                                                    type=\"text\"\n                                                    value={addressesArray[index]?.complement}\n                                                    onChange={e => setAddressesInput(index, 'Complemento', e.target.value)}\n                                                />\n                                            </div>{ }\n                                        </Col>\n                                    </Row>\n                                ))}\n\n                                <Row className='mb-2 mt-2'>\n                                    <Col xs={6}>\n                                        <div className='d-flex align-items-center h-100 mt-1'>\n                                            <h5>Contato(s)</h5>\n                                        </div>\n                                    </Col>\n                                    <Col xs={6}>\n                                        <div className='d-flex justify-content-end align-items-end h-100'>\n                                            <Button\n                                                variant=\"info\"\n                                                onClick={() => setNumContacts(numContacts + 1)}\n                                            >\n                                                Adicionar contatos\n                                            </Button>\n                                        </div>\n                                    </Col>\n                                </Row>\n\n                                {new Array(numContacts).fill(0).map((_, index) => (\n                                    <Row key={index} style={{ border: '1px solid #616161', padding: 5, margin: 5, borderRadius: '6px' }}>\n                                        <Col xs={4}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Tipo de contato </div>\n                                                <ReactSelect\n                                                    placeholder=\"\"\n                                                    classNamePrefix=\"react-select\"\n                                                    options={contactType}\n                                                    value={contactType.filter(option => option.value === contactArray[index]?.contact_type_id)}\n                                                    onChange={e => setContactInput(index, 'Tipo', e.value)}\n                                                />\n                                            </div>\n                                        </Col>\n\n\n                                        <Col xs={8}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Nome </div>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    disabled={values.loading}\n                                                    type=\"text\"\n                                                    value={contactArray[index]?.name}\n                                                    onChange={e => setContactInput(index, 'Nome', e.target.value)}\n                                                />\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={4}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Tipo de telefone </div>\n                                                <ReactSelect\n                                                    placeholder=\"\"\n                                                    classNamePrefix=\"react-select\"\n                                                    options={phoneType}\n                                                    value={phoneType.filter(option => option.value === contactArray[index]?.phones[0].phone_type_id)}\n                                                    onChange={e => setContactInput(index, 'Tipo_telefone', e.value)}\n                                                />\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={8}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Telefone </div>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    disabled={values.loading}\n                                                    type=\"text\"\n                                                    value={contactArray[index]?.phones[0].phone}\n                                                    onChange={e => setContactInput(index, 'Telefone', e.target.value)}\n                                                />\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={4}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Tipo de email </div>\n                                                <ReactSelect\n                                                    placeholder=\"\"\n                                                    classNamePrefix=\"react-select\"\n                                                    options={emailType}\n                                                    value={emailType.filter(option => option.value === contactArray[index]?.emails[0].email_type_id)}\n                                                    onChange={e => setContactInput(index, 'Tipo_email', e.value)}\n                                                />\n                                            </div>\n                                        </Col>\n\n                                        <Col xs={8}>\n                                            <div className=\"mb-3 form-group tooltip-end-top\">\n                                                <div className='label'> Email </div>\n                                                <Field\n                                                    className=\"form-control\"\n                                                    disabled={values.loading}\n                                                    type=\"text\"\n                                                    value={contactArray[index]?.emails[0].email}\n                                                    onChange={e => setContactInput(index, 'Email', e.target.value)}\n                                                />\n                                            </div>\n                                        </Col>\n                                    </Row>\n                                ))}\n\n                                <Row className='mt-2 mb-2'>\n                                    <Col xs={12}>\n                                        <div className='d-flex justify-content-end align-items-end'>\n                                            <Button\n                                                variant=\"success\"\n                                                type=\"submit\"\n                                                disabled={values.loading}\n                                            >\n                                                {values.loading\n                                                    ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                    : <>Cadastrar</>\n                                                }\n                                            </Button>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </Form>\n                        )}\n                    </Formik>\n                </Modal.Body>\n            </Modal>\n            {/* MODAL NEW REGISTER */}\n\n\n            {organizationData\n                ? <>\n                    <Modal\n                        // className=\"scroll-out\"\n                        show={modalViewOrganization}\n                        size='lg'\n                        centered\n                        onHide={() => setModalViewOrganization(false)}\n                    >\n                        <Modal.Body>\n                            <Row>\n                                <Col xs={11}>\n                                    &nbsp;\n                                </Col>\n                                <Col xs={1}>\n                                    <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalViewOrganization(false)}>\n                                        <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                                    </div>\n                                </Col>\n                            </Row>\n\n\n                            <Row>\n                                <Col xs={12}>\n                                    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', }}>\n                                        <div style={{\n                                            textTransform: 'uppercase', width: 100, height: 100, borderRadius: '50%', backgroundColor: '#0C5DAF', display: 'flex', justifyContent: 'center', alignItems: 'center', fontSize: 40, fontWeight: 'bold', color: 'white'\n                                        }}>\n                                            {organizationData?.social_name[0]}{organizationData?.social_name[1]}\n                                        </div>\n                                    </div>\n                                </Col>\n                            </Row>\n\n                            <Row className='mt-3 mb-3'>\n                                <Col xs={12} className=\"mt-4\">\n                                    <span className='text-primary'><b>Razão social:</b> </span>  {organizationData?.social_name}\n                                </Col>\n\n                                <Col xs={12} className=\"mt-4\">\n                                    <span className='text-primary'><b>Nome fantasia:</b> </span>  {organizationData?.surname}\n                                </Col>\n\n                                <Col xs={4} className=\"mt-4\">\n                                    <span className='text-primary'><b>CPF/CNPF:</b> </span>  {organizationData?.taxid}\n                                </Col>\n\n                                <Col xs={4} className=\"mt-4\">\n                                    <span className='text-primary'><b>Inscrição estadual:</b> </span>  {organizationData?.ie}\n                                </Col>\n\n                                <Col xs={4} className=\"mt-4\">\n                                    <span className='text-primary'><b>Inscrição municipal:</b> </span>  {organizationData?.im}\n                                </Col>\n\n                                <Col xs={6} className=\"mt-4\">\n                                    <span className='text-primary'><b>Tipo:</b> </span>  {organizationData?.organization_type?.name}\n                                </Col>\n\n                                <Col xs={6} className=\"mt-4\">\n                                    <span className='text-primary'><b>Status:</b> </span>  {organizationData?.organization_status?.name}\n                                </Col>\n\n                                <Col xs={12} className=\"mt-4\">\n                                    <span className='text-primary'><b>Site:</b> </span>  <a href={`${organizationData?.site}`} target=\"_blank\">{organizationData?.site}</a>\n                                </Col>\n                            </Row>\n\n\n                            <h5>Endereço(s)</h5>\n\n                            {organizationData.address_list\n                                ? <Row className='mb-3 mt-3' style={{ border: '1px solid #898989', padding: 3, margin: 3, borderRadius: '6px' }}>\n                                    {organizationData.address_list.map((row, index) => {\n                                        return (\n                                            <Col xs={12} key={index}>\n                                                <Row>\n                                                    <Col xs={3} className=\"mt-4\">\n                                                        <span className='text-primary'><b>CEP:</b> </span>  {row?.address?.zip_code}\n                                                    </Col>\n\n                                                    <Col xs={9} className=\"mt-4\">\n                                                        <span className='text-primary'><b>Endereco:</b> </span>  {row?.address?.address}\n                                                    </Col>\n\n                                                    <Col xs={6} className=\"mt-4\">\n                                                        <span className='text-primary'><b>Estado:</b> </span>  {row?.address?.state}\n                                                    </Col>\n\n                                                    <Col xs={6} className=\"mt-4\">\n                                                        <span className='text-primary'><b>Cidade:</b> </span>  {row?.address?.city}\n                                                    </Col>\n\n                                                    <Col xs={6} className=\"mt-4\">\n                                                        <span className='text-primary'><b>Bairro:</b> </span>  {row?.address?.district}\n                                                    </Col>\n\n                                                    <Col xs={6} className=\"mt-4\">\n                                                        <span className='text-primary'><b>Número:</b> </span>  {row?.address?.number}\n                                                    </Col>\n\n                                                    <Col xs={12} className=\"mt-4 mb-4\">\n                                                        <span className='text-primary'><b>Complemento:</b> </span>  {row?.address?.complement}\n                                                    </Col>\n                                                </Row>\n                                            </Col>\n                                        )\n                                    })}\n                                </Row>\n                                : <></>\n                            }\n\n                            <h5>Contato(s)</h5>\n\n                            {organizationData.contact_list\n                                ? <Row className='mb-3 mt-3' style={{ border: '1px solid #898989', padding: 3, margin: 3, borderRadius: '6px' }}>\n                                    {organizationData.contact_list.contacts.map((row, index) => {\n                                        return (\n                                            <Col xs={12} key={index}>\n                                                <Row>\n                                                    <Col xs={12} className=\"mt-4\">\n                                                        <span className='text-primary'><b>Nome:</b> </span>  {row?.name}\n                                                    </Col>\n                                                    <Col xs={12} className=\"mt-4\">\n                                                        <span className='text-primary'><b>Telefone:</b> </span>  {row?.phone_list?.phones[0]?.number}\n                                                    </Col>\n                                                    <Col xs={12} className=\"mt-4 mb-4\">\n                                                        <span className='text-primary'><b>Email:</b> </span>  {row?.emails_list?.emails[0]?.email}\n                                                    </Col>\n                                                </Row>\n                                            </Col>\n                                        )\n                                    })}\n                                </Row>\n                                : <></>\n                            }\n\n\n\n                        </Modal.Body>\n                    </Modal>\n                </>\n                : <></>\n            }\n\n\n        </>\n    )\n}\n\nexport default Component\n","/Users/caio/Projects/Samples/front-vawlog/src/views/organizations/user_list.js",["1364"],"/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react';\nimport { Row, Col, Spinner, Dropdown, InputGroup, FormControl, Card, Alert, Button, Modal, Form as FormBootstrap } from 'react-bootstrap';\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport moment from 'moment';\nimport pt from 'date-fns/locale/pt';\nimport DatePicker from 'react-datepicker';\nimport api from 'services/api';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\nimport PaginationTable from 'helpers/pagination';\nimport formatField from 'helpers/formatField';\nimport { Field, Form, Formik } from 'formik';\nimport * as Yup from 'yup'\nimport Swal from 'sweetalert2'\nimport ReactSelect from 'react-select';\n\nconst Component = (props) => {\n    useEffect(() => {\n\n        if (props.match.params.slug) {\n            setOrganization(props.match.params.slug)\n        }\n        // getParams()\n    }, [])\n\n    const title = 'Usuários';\n    const description = 'Usuários';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'users', text: 'Usuários' },\n        { to: 'list', text: 'Listar' },\n    ]\n\n    const columns = [\n        { name: 'Id', acessor: 'id', column: 'id' },\n        { name: 'Nome', acessor: 'name', column: 'name', format: 'username' },\n        { name: 'Email', acessor: 'email', column: 'email' },\n        { name: 'Status', acessor: 'status', column: 'status' },\n        { name: 'Nível', acessor: 'role', column: 'role' },\n        { name: 'Data', acessor: 'created_at', column: 'created_at' },\n        { name: '', acessor: 'custom', column: 'custom' },\n    ]\n\n    const [organization, setOrganization] = useState(false)\n    const [limit, setLimit] = useState(10)\n    const [loading, setLoading] = useState(true)\n    const [startDate, setStartDate] = useState()\n    const [endDate, setEndDate] = useState()\n    const [order, setOrder] = useState(false)\n    const [orderBy, setOrderBy] = useState('asc')\n    const [data, setData] = useState(false)\n    const [total, setTotal] = useState(false)\n    const [searchField, setSearchField] = useState('')\n    const [paginationConfig, setPaginationConfig] = useState({\n        page: 1\n    })\n\n    const loadData = async (pageLimit, page) => {\n\n        document.body.classList.add('spinner')\n\n        pageLimit = limit\n\n        try {\n            let url = `/api/v1/private/user/list?order=${orderBy}&limit=${pageLimit}&page=${page}&search=${searchField}&organization_id=${organization}`\n\n            if (startDate && endDate) {\n                url += `&start=${moment(startDate).format('YYYY-MM-DD')}&end=${moment(endDate).format('YYYY-MM-DD')}`\n            }\n\n            if (order) {\n                url += `&order=${orderBy}&order_by=${order}`\n            }\n\n            const response = await api.get(url)\n\n            setData(response.data.data)\n            setTotal(response.data.total)\n\n            setPaginationConfig({\n                previousPage: response.data.data.prev_page_url,\n                page: response.data.data.current_page,\n                nextPage: response.data.data.next_page_url,\n                limit: pageLimit,\n                total: response.data.data.last_page,\n                lastPage: response.data.data.last_page\n            })\n\n        } catch (error) {\n            console.log(error)\n        }\n\n        document.body.classList.remove('spinner')\n\n        setLoading(false)\n    }\n\n    const orderTable = (param) => {\n        setOrder(param)\n\n        if (orderBy === 'asc') {\n            setOrderBy('desc')\n        } else {\n            setOrderBy('asc')\n        }\n    }\n\n    const changePaginationConfig = async (param, value) => {\n        await setPaginationConfig({\n            ...paginationConfig, [param]: value\n        })\n    }\n\n    useEffect(() => { if (!data) { loadData(paginationConfig.limit, paginationConfig.page) } }, [paginationConfig.page, organization])\n    useEffect(() => { if (data) { loadData(limit, 1) } }, [limit])\n\n    useEffect(() => { if (data) { if (startDate && endDate) { loadData(limit, 1) } } }, [endDate, startDate])\n\n    useEffect(() => { if (data) { loadData(limit, 1) }     }, [order, orderBy])\n\n\n    const handleSearch = (e) => {\n        setSearchField(e.target.value)\n    }\n\n\n    const [modalView, setModalView] = useState(false)\n    const [modalEdit, setModalEdit] = useState(false)\n    const [modalChangePass, setModalChangePass] = useState(false)\n    const [userData, setUserData] = useState(false)\n    const [modalNewRegister, setModalNewRegister] = useState(false)\n\n    const [status] = useState([\n        { label: 'Approved', value: 'Approved' },\n        { label: 'Disapproved', value: 'Disapproved' },\n        { label: 'Suspended', value: 'Suspended' },\n        { label: 'Pending', value: 'Pending' },\n    ])\n\n    const [role] = useState([\n        { label: 'Master', value: 'Master' },\n        { label: 'Admin', value: 'Admin' },\n        { label: 'Customer', value: 'Customer' },\n        { label: 'Client', value: 'Client' },\n        { label: 'Tester', value: 'Tester' },\n    ])\n\n    const callView = (data) => {\n        setUserData(data)\n        setModalView(true)\n    }\n\n    const callEdit = (data) => {\n        setUserData(data)\n        setModalEdit(true)\n    }\n\n    const callChangePass = (data) => {\n        setUserData(data)\n        setModalChangePass(true)\n    }\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required('Este campo é obrigatório'),\n        password: Yup.string().required('Este campo é obrigatório'),\n        email: Yup.string().required('Este campo é obrigatório'),\n        role: Yup.string().required('Este campo é obrigatório'),\n        status: Yup.string().required('Este campo é obrigatório'),\n    })\n\n    const renderTable = () => {\n        return (\n            <>\n                <Row>\n                    <Col xs={12} xxl={12} className=\" d-flex justify-content-end align-items-end\">\n                        <Button\n                            variant=\"primary\"\n                            type=\"submit\"\n                            disabled={loading}\n                            onClick={() => setModalNewRegister(true)}\n                        >\n                            Novo Usuário <CsLineIcons icon=\"user\" />\n                        </Button>\n                    </Col>\n                </Row>\n\n                {/* FILTERS */}\n                <Row>\n                    <Col xs={12} xxl={1} className=\"d-flex d-flex justify-content-end align-items-end\">\n                        <Dropdown\n                            align={{ xs: 'end' }}\n                            className=\"d-inline-block ms-1\"\n                            onSelect={(e) =>\n                                setLimit(e)\n                            }\n                        >\n                            <Dropdown.Toggle variant=\"foreground-alternate\" className=\"shadow\">\n                                {limit} Items\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu\n                                className=\"shadow dropdown-menu-end\"\n                            >\n                                <Dropdown.Item eventKey=\"5\">5 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"10\">10 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"20\">20 Items</Dropdown.Item>\n                                <Dropdown.Item eventKey=\"50\">50 Items</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n\n                    <Col xxl={4}>\n                        <Row className=\"g-2 w-100\">\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">De</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={startDate}\n                                    onChange={(date) => setStartDate(date)}\n                                    selectsStart\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                />\n                            </Col>\n                            <Col>\n                                <h2 className=\"heading title mb-1 text-muted\">Até</h2>\n                                <DatePicker\n                                    locale={pt}\n                                    dateFormat=\"dd/MM/yyyy\"\n                                    className=\"form-control\"\n                                    selected={endDate}\n                                    onChange={(date) => setEndDate(date)}\n                                    selectsEnd\n                                    startDate={startDate}\n                                    endDate={endDate}\n                                    minDate={startDate}\n                                />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col xxl={4}>\n                        &nbsp;\n                    </Col>\n                    <Col xs={12} xxl={3} className=\" d-flex justify-content-end align-items-end\">\n                        <InputGroup className=\"mt-2\"\n                            onChange={e => handleSearch(e)}\n                            onKeyDown={e => e.key === 'Enter' ? loadData(paginationConfig.limit, 1) : false}\n                        >\n                            <InputGroup.Text >\n                                <CsLineIcons icon=\"search\" />\n                            </InputGroup.Text>\n                            <FormControl placeholder=\"pesquisar...\" aria-label=\"Pesquisar\" aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                </Row>\n                {/* FILTERS */}\n\n                {/* DATA */}\n                <Row className='mt-5'>\n                    <Col xs={12} xxl={12}>\n                        {data.length === 0\n                            ? <>\n                                <Row className=\"g-2 mb-5\">\n                                    <Col sm=\"12\" xxl=\"12\">\n                                        <Card className=\"sh-19\">\n                                            <Card.Body className=\"text-center d-flex flex-column justify-content-center align-items-center\">\n                                                <CsLineIcons icon=\"warning-hexagon\" className=\"text-warning\" size={50} />\n                                                <p className=\"heading mb-0\">\n                                                    Ops! Nenhum resultado para essa consulta.\n                                                </p>\n\n                                                <p className=\"text-medium mb-0 text-muted\">\n                                                    Altere os filtros da consulta e tente novamente.\n                                                </p>\n                                            </Card.Body>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </>\n                            : <>\n\n                                {total\n                                    ? <>\n                                        <Alert variant=\"info\">\n                                            Total de registros localizados: <strong>{total}</strong>\n                                        </Alert>\n                                    </>\n                                    : <></>\n                                }\n\n                                <table className=\"react-table rows\" >\n                                    <thead>\n                                        <tr>\n                                            {columns.map((row, index) => {\n                                                return (\n                                                    <th\n                                                        key={index}\n                                                        className={`text-muted text-small text-uppercase ${row.column ? 'cursor-pointer' : ''}`}\n                                                        onClick={() => row.column ? orderTable(row.column) : false}\n                                                    >\n                                                        <span className={`${order === row.column ? 'text-primary  font-weight-bold' : ''}`}>\n                                                            {row.name} &nbsp;\n\n                                                            {order === row.column\n                                                                ? <CsLineIcons size={10} icon={orderBy === 'asc' ? 'chevron-top' : 'chevron-bottom'} />\n                                                                : <></>\n                                                            }\n                                                        </span>\n                                                    </th>\n                                                )\n                                            })}\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {data.length > 0 && data.map((row, index) => {\n                                            return (\n                                                <tr key={index}>\n                                                    {columns.map((r, i) => {\n                                                        return (\n                                                            <td key={i}>\n\n                                                                {r.format ?\n                                                                    formatField(r.format, row[r.acessor], row)\n                                                                    : <>\n                                                                        {r.acessor === 'custom'\n                                                                            ? <>\n                                                                                <Button onClick={() => callView(row)} variant=\"outline-success\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"eye\" />\n                                                                                </Button> &nbsp;&nbsp;\n                                                                                <Button onClick={() => callEdit(row)} variant=\"outline-info\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"edit\" />\n                                                                                </Button>&nbsp;&nbsp;\n                                                                                <Button onClick={() => callChangePass(row)} variant=\"outline-warning\" className=\"btn-icon btn-icon-only mb-1\">\n                                                                                    <CsLineIcons icon=\"lock-off\" />\n                                                                                </Button>\n                                                                            </>\n                                                                            : <>\n                                                                                {row[r.acessor]}\n                                                                            </>\n                                                                        }\n                                                                    </>\n                                                                }\n                                                            </td>\n                                                        )\n                                                    })}\n                                                </tr>\n                                            )\n                                        })}\n                                    </tbody>\n\n                                </table>\n\n\n                                <PaginationTable\n                                    config={paginationConfig}\n                                    gotoPage={(page) => [changePaginationConfig('page', page)]}\n                                />\n\n                            </>\n                        }\n                    </Col>\n                </Row>\n                {/* DATA */}\n            </>\n        )\n    }\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n            {loading\n                ? <>\n                    <div className=\"align-items-center\">\n                        <Spinner as=\"span\" animation=\"border\" size=\"md\" />\n\n                        <div>Carregando...</div>\n                    </div>\n                </>\n                : <>\n                    {renderTable()}\n                </>\n            }\n\n            {/* MODAL REGISTER */}\n            <Modal\n                show={modalNewRegister}\n                size='lg'\n                centered\n                onHide={() => setModalNewRegister(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalNewRegister(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n\n                    <h4>Novo cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            name: '',\n                            email: '',\n                            password: '',\n                            status: '',\n                            role: '',\n                            organization_id: organization\n                        }}\n\n                        validationSchema={validationSchema}\n\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/user/create`, values)\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalNewRegister(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\" mt-4\">\n                                 <div className=\"mb-3  form-group tooltip-end-top\" style={{display: 'none'}}>\n                                    <div className='label'> Nome </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.organization_id} />\n                                    {errors.organization_id && touched.organization_id && <div className=\"d-block invalid-tooltip\">{errors.organization_id}</div>}\n                                </div>\n\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Nome </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                    {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                </div>\n\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Email </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"email\" value={values.email} />\n                                    {errors.email && touched.email && <div className=\"d-block invalid-tooltip\">{errors.email}</div>}\n                                </div>\n\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Senha </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"password\" name=\"password\" value={values.password} />\n                                    {errors.password && touched.password && <div className=\"d-block invalid-tooltip\">{errors.password}</div>}\n                                </div>\n\n                                <div className=\"mb-3 form-group tooltip-end-top\">\n                                    <div className='label'> Status </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={status}\n                                        value={status.filter(option => option.value === values.status)}\n                                        onChange={e => setFieldValue('status', e.value)}\n                                    />\n                                    {errors.status && touched.status && <div className=\"d-block invalid-tooltip\">{errors.status}</div>}\n                                </div>\n\n                                <div className=\"mb-3 form-group tooltip-end-top\">\n                                    <div className='label'> Nível </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={role}\n                                        value={role.filter(option => option.value === values.role)}\n                                        onChange={e => setFieldValue('role', e.value)}\n                                    />\n                                    {errors.role && touched.role && <div className=\"d-block invalid-tooltip\">{errors.role}</div>}\n                                </div>\n\n                                <Row className='mt-2 mb-2'>\n                                    <Col xs={12}>\n                                        <div className='d-flex justify-content-end align-items-end'>\n                                            <Button\n                                                variant=\"success\"\n                                                type=\"submit\"\n                                                disabled={values.loading}\n                                            >\n                                                {values.loading\n                                                    ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                    : <>Cadastrar</>\n                                                }\n                                            </Button>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </Form>\n                        )}\n                    </Formik>\n                </Modal.Body>\n            </Modal>\n            {/* MODAL REGISTER */}\n\n            {userData\n                ? <>\n                    <Modal\n                        show={modalView}\n                        size='lg'\n                        centered\n                        onHide={() => setModalView(false)}\n                    >\n                        <Modal.Body>\n                            <Row>\n                                <Col xs={11}>\n                                    &nbsp;\n                                </Col>\n                                <Col xs={1}>\n                                    <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalView(false)}>\n                                        <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                                    </div>\n                                </Col>\n                            </Row>\n\n\n                            <Row>\n                                <Col xs={12}>\n                                    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', }}>\n                                        <div style={{\n                                            textTransform: 'uppercase', width: 100, height: 100, borderRadius: '50%', backgroundColor: '#0C5DAF', display: 'flex', justifyContent: 'center', alignItems: 'center', fontSize: 40, fontWeight: 'bold', color: 'white'\n                                        }}>\n                                            {userData?.name[0]}{userData?.name[1]}\n                                        </div>\n                                    </div>\n                                </Col>\n                            </Row>\n\n                            <Row className='mt-3 mb-3'>\n                                <Col xs={12} className=\"mt-4\">\n                                    <span className='text-primary'><b>Nome:</b> </span>  {userData?.name}\n                                </Col>\n\n                                <Col xs={12} className=\"mt-4\">\n                                    <span className='text-primary'><b>E-mail:</b> </span>  {userData?.email}\n                                </Col>\n\n                                <Col xs={12} className=\"mt-4\">\n                                    <span className='text-primary'><b>Status:</b> </span>  {userData?.status}\n                                </Col>\n\n                                <Col xs={12} className=\"mt-4\">\n                                    <span className='text-primary'><b>Nível:</b> </span>  {userData?.role}\n                                </Col>\n\n                                <Col xs={12} className=\"mt-4\">\n                                    <span className='text-primary'><b>Criação:</b> </span>  {userData?.created_at}\n                                </Col>\n                            </Row>\n\n                        </Modal.Body>\n                    </Modal>\n                </>\n                : <></>\n            }\n\n            {/* MODAL EDIT */}\n            <Modal\n                show={modalEdit}\n                size='lg'\n                centered\n                onHide={() => setModalEdit(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalEdit(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n\n                    <h4>Editar cadastro</h4>\n\n                    <Formik\n                        initialValues={{\n                            name: userData?.name,\n                            email: userData?.email,\n                            status: userData?.status,\n                            role: userData?.role,\n                        }}\n\n\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/user/update/${userData?.id}`, values)\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalEdit(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\" mt-4\">\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Nome </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"name\" value={values.name} />\n                                    {errors.name && touched.name && <div className=\"d-block invalid-tooltip\">{errors.name}</div>}\n                                </div>\n\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Email </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"text\" name=\"email\" value={values.email} />\n                                    {errors.email && touched.email && <div className=\"d-block invalid-tooltip\">{errors.email}</div>}\n                                </div>\n\n                                <div className=\"mb-3 form-group tooltip-end-top\">\n                                    <div className='label'> Status </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={status}\n                                        value={status.filter(option => option.value === values.status)}\n                                        onChange={e => setFieldValue('status', e.value)}\n                                    />\n                                    {errors.status && touched.status && <div className=\"d-block invalid-tooltip\">{errors.status}</div>}\n                                </div>\n\n                                <div className=\"mb-3 form-group tooltip-end-top\">\n                                    <div className='label'> Nível </div>\n                                    <ReactSelect\n                                        placeholder=\"\"\n                                        classNamePrefix=\"react-select\"\n                                        options={role}\n                                        value={role.filter(option => option.value === values.role)}\n                                        onChange={e => setFieldValue('role', e.value)}\n                                    />\n                                    {errors.role && touched.role && <div className=\"d-block invalid-tooltip\">{errors.role}</div>}\n                                </div>\n\n                                <Row className='mt-2 mb-2'>\n                                    <Col xs={12}>\n                                        <div className='d-flex justify-content-end align-items-end'>\n                                            <Button\n                                                variant=\"success\"\n                                                type=\"submit\"\n                                                disabled={values.loading}\n                                            >\n                                                {values.loading\n                                                    ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                    : <>Atualizar</>\n                                                }\n                                            </Button>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </Form>\n                        )}\n                    </Formik>\n                </Modal.Body>\n            </Modal>\n            {/* MODAL EDIT */}\n\n            {/* CHANGE PASS */}\n\n            <Modal\n                show={modalChangePass}\n                size='lg'\n                centered\n                onHide={() => setModalChangePass(false)}\n            >\n                <Modal.Body>\n                    <Row>\n                        <Col xs={11}>\n                            &nbsp;\n                        </Col>\n                        <Col xs={1}>\n                            <div className='d-flex justify-content-end cursor-pointer' onClick={() => setModalChangePass(false)}>\n                                <CsLineIcons icon=\"close\" className=\"text-primary\" size={20} />\n                            </div>\n                        </Col>\n                    </Row>\n\n\n                    <h4>Alterar senha</h4>\n\n                    <Formik\n                        initialValues={{\n                            password: '',\n                        }}\n\n                        onSubmit={async (values, { resetForm }) => {\n                            try {\n                                const response = await api.post(`/api/v1/private/user/update_password/${userData?.id}`, values)\n\n                                resetForm()\n\n                                Swal.fire({\n                                    title: response.data.title,\n                                    text: response.data.message,\n                                    icon: 'success',\n                                    confirmButtonText: 'Fechar'\n                                }).then((result) => {\n                                    setModalChangePass(false)\n                                    loadData()\n                                })\n\n                            } catch (error) {\n                                Swal.fire({\n                                    title: error.response.data.title,\n                                    text: error.response.data.message,\n                                    icon: 'error',\n                                    confirmButtonText: 'Fechar'\n                                })\n                            }\n                        }}\n                    >\n                        {({ values, errors, touched, setFieldValue }) => (\n                            <Form className=\" mt-4\">\n                                <div className=\"mb-3  form-group tooltip-end-top\">\n                                    <div className='label'> Nova senha </div>\n                                    <Field className=\"form-control\" disabled={values.loading} type=\"password\" name=\"password\" value={values.password} />\n                                    {errors.password && touched.password && <div className=\"d-block invalid-tooltip\">{errors.password}</div>}\n                                </div>\n\n                                <Row className='mt-2 mb-2'>\n                                    <Col xs={12}>\n                                        <div className='d-flex justify-content-end align-items-end'>\n                                            <Button\n                                                variant=\"info\"\n                                                type=\"submit\"\n                                                disabled={values.loading}\n                                            >\n                                                {values.loading\n                                                    ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                                                    : <>Atualizar senha</>\n                                                }\n                                            </Button>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </Form>\n                        )}\n                    </Formik>\n                </Modal.Body>\n            </Modal>\n            {/* CHANGE PASS */}\n        </>\n    )\n}\n\nexport default Component\n","/Users/caio/Projects/Samples/app-vawlog/src/index.js",[],["1365","1366"],"/Users/caio/Projects/Samples/app-vawlog/src/store.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/config.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/routes.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/lang/LangProvider.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/routing/helper.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/routing/default-routes.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/routing/components/RouteIdentifier.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/components/loading/Loading.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/@mock-api/index.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/constants.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/routing/components/RouteItem.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/lang/messages/messages.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/lang/langSlice.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/settings/settingsSlice.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/auth/authSlice.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/components/scrollspy/scrollspySlice.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/layout/layoutSlice.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/App.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/config/email_type.js",["1367","1368","1369","1370","1371","1372","1373","1374","1375"],"/Users/caio/Projects/Samples/app-vawlog/src/views/config/address_type.js",["1376","1377","1378","1379","1380","1381","1382","1383","1384"],"/Users/caio/Projects/Samples/app-vawlog/src/views/config/logs.js",["1385","1386","1387","1388","1389","1390","1391","1392","1393","1394","1395","1396","1397","1398","1399","1400"],"/Users/caio/Projects/Samples/app-vawlog/src/views/config/phone_type.js",["1401","1402","1403","1404","1405","1406","1407","1408","1409"],"/Users/caio/Projects/Samples/app-vawlog/src/views/config/contact_type.js",["1410","1411","1412","1413","1414","1415","1416","1417","1418"],"/Users/caio/Projects/Samples/app-vawlog/src/views/config/document_type.js",["1419","1420","1421","1422","1423","1424","1425","1426","1427"],"/Users/caio/Projects/Samples/app-vawlog/src/views/config/user_type.js",["1428","1429","1430","1431","1432","1433","1434","1435","1436"],"/Users/caio/Projects/Samples/app-vawlog/src/views/vehicles/status.js",["1437","1438","1439","1440","1441","1442","1443","1444","1445"],"/Users/caio/Projects/Samples/app-vawlog/src/views/vehicles/type.js",["1446","1447","1448","1449","1450","1451","1452","1453","1454"],"/Users/caio/Projects/Samples/app-vawlog/src/views/drivers/list.js",["1455","1456","1457","1458","1459","1460","1461","1462","1463","1464","1465"],"/Users/caio/Projects/Samples/app-vawlog/src/views/drivers/type.js",["1466","1467","1468","1469","1470","1471","1472","1473","1474"],"/Users/caio/Projects/Samples/app-vawlog/src/views/organizations/list.js",["1475","1476","1477","1478","1479","1480","1481","1482","1483","1484","1485","1486","1487","1488"],"/Users/caio/Projects/Samples/app-vawlog/src/views/drivers/status.js",["1489","1490","1491","1492","1493","1494","1495","1496","1497"],"/Users/caio/Projects/Samples/app-vawlog/src/views/organizations/denied.js",["1498","1499","1500","1501","1502","1503","1504","1505","1506","1507","1508","1509","1510"],"/Users/caio/Projects/Samples/app-vawlog/src/views/organizations/user_list.js",["1511"],"/Users/caio/Projects/Samples/app-vawlog/src/views/organizations/users.js",["1512","1513","1514","1515","1516","1517","1518","1519","1520","1521","1522","1523","1524","1525","1526","1527"],"/Users/caio/Projects/Samples/app-vawlog/src/views/vehicles/list.js",["1528","1529","1530","1531","1532","1533","1534","1535","1536","1537","1538","1539"],"/Users/caio/Projects/Samples/app-vawlog/src/views/orders/list.js",["1540","1541","1542","1543","1544","1545","1546","1547","1548"],"/Users/caio/Projects/Samples/app-vawlog/src/views/users/list.js",["1549","1550","1551","1552","1553","1554","1555","1556"],"/Users/caio/Projects/Samples/app-vawlog/src/views/orders/status.js",["1557","1558","1559","1560","1561","1562","1563","1564","1565"],"/Users/caio/Projects/Samples/app-vawlog/src/views/config/organization_status.js",["1566","1567","1568","1569","1570","1571","1572","1573","1574"],"/Users/caio/Projects/Samples/app-vawlog/src/views/config/file_type.js",["1575","1576","1577","1578","1579","1580","1581","1582","1583"],"/Users/caio/Projects/Samples/app-vawlog/src/views/config/organization_type.js",["1584","1585","1586","1587","1588","1589","1590","1591","1592"],"/Users/caio/Projects/Samples/app-vawlog/src/views/orders/type.js",["1593","1594","1595","1596","1597","1598","1599","1600","1601"],"/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/main-menu/menuSlice.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/notifications/notificationSlice.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/@mock-api/api.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/@mock-api/data/apps.chat.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/@mock-api/data/notifications.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/@mock-api/data/products.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/@mock-api/data/apps.events.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/@mock-api/data/apps.tasks.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/@mock-api/data/users.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/@mock-api/data/datatable.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/@mock-api/data/apps.mailbox.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/@mock-api/data/apps.contacts.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/default/NotFound.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/default/Unauthorized.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/default/ForgotPassword.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/default/ResetPassword.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/default/Register.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/default/InvalidAccess.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/default/Home.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/default/Login.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/lang/messages/es.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/lang/messages/en.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/lang/messages/de.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/home/index.js",["1602","1603","1604","1605","1606","1607","1608","1609","1610","1611","1612","1613"],"/Users/caio/Projects/Samples/app-vawlog/src/layout/Layout.js",["1614"],"/Users/caio/Projects/Samples/app-vawlog/src/views/home/chartOrdersByTypeMonth.js",["1615","1616","1617","1618"],"/Users/caio/Projects/Samples/app-vawlog/src/components/html-head/HtmlHead.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/components/breadcrumb-list/BreadcrumbList.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/services/api.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/cs-line-icons/CsLineIcons.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/helpers/pagination.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/helpers/formatField.js",["1619","1620","1621","1622","1623","1624","1625"],"/Users/caio/Projects/Samples/app-vawlog/src/views/home/chartOrdersByStatusDays.js",["1626","1627","1628","1629"],"/Users/caio/Projects/Samples/app-vawlog/src/views/home/chartOrdersByStatusMonth.js",["1630","1631","1632","1633"],"/Users/caio/Projects/Samples/app-vawlog/src/views/home/chartNewOrganizationsDays.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/home/chartNewOrganizationsMonth.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/home/chartOrdersDays.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/home/chartOrdersMonth.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/home/chartLogsDays.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/home/chartLogsMonth.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/layout/LayoutFullpage.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartSmallDoughnutChart6.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartBubble.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartSmallDoughnutChart1.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartSmallDoughnutChart2.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartSmallLine3.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartSmallLine4.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartSmallLine2.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartSmallDoughnutChart4.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartSmallDoughnutChart5.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartSmallDoughnutChart3.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartSmallLine1.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/home/chart/ChartCustomHorizontalTooltip.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/helpers/checkStatusLabel.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/helpers/checkStatusColor.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/cs-line-icons/svgs.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/Nav.js",["1634"],"/Users/caio/Projects/Samples/app-vawlog/src/hooks/useLayout.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/layout/footer/Footer.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/layout/right-buttons/RightButtons.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/sidebar-menu/SidebarMenu.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/NavLanguageSwitcher.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/NavMobileButtons.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/NavLogo.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/NavIconMenu.js",["1635"],"/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/main-menu/MainMenu.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/hooks/useModalPaddingFix.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/NavUserMenu.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/sidebar-menu/SidebarMenuItems.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/layout/right-buttons/NichesModal.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/layout/right-buttons/SettingsModal.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/main-menu/helper.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/main-menu/MainMenuItems.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/hooks/useMutationObservable.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/search/SearchModal.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/notifications/Notifications.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/components/scrollspy/ScrollspyMobile.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/hooks/useWindowScroll.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/hooks/useWindowSize.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/layout/nav/search/SearchInput.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/components/scrollspy/ScrollspyContent.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/policies/cookies.js",["1636","1637","1638"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Card, Spinner } from 'react-bootstrap';\n\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\n\n\n\nconst Cookies = () => {\n    const title = 'Políticas de Cookies';\n    const description = 'Políticas de Cookies';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'policies', text: 'Políticas' },\n        { to: 'cookies', text: 'Cookies' },\n    ]\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n\n\n            <Card className=\"\">\n                <Card.Body className=\" \">\n                    <div className='d-flex'>\n                        <div>\n                            <CsLineIcons icon=\"triangle\" className=\"text-primary\" size={22} />\n                        </div>\n                        <div>\n                            <p className=\"heading text-primary\" style={{ marginTop: 1, marginLeft: 5 }}>\n                                Política de Cookies do Portal Vawlog\n                            </p>\n                        </div>\n                    </div>\n\n                    <p className=\"text-medium mb-0 mt-4\">A Política de Cookies do Portal Vawlog (\"Política\") descreve como a Vawlog utiliza cookies em seu portal (\"Portal\"). Ao utilizar o Portal, você concorda com o uso de cookies conforme descrito nesta Política.</p>\n\n                    <h2 className=\"text-medium mb-0 mt-4 text-primary\">O que são Cookies?</h2>\n                    <p className=\"text-medium mb-0 mt-4\">Cookies são pequenos arquivos de texto que são armazenados no seu dispositivo quando você visita um site. Eles são usados para lembrar suas preferências de navegação e melhorar sua experiência no site.</p>\n\n                    <h2 className=\"text-medium mb-0 mt-4 text-primary\">Tipos de Cookies Utilizados</h2>\n                    <p className=\"text-medium mb-0 mt-4\">A Vawlog utiliza os seguintes tipos de cookies em seu Portal:</p>\n                    <ul className=\"text-medium mb-0 mt-4\">\n                        <li>Cookies Necessários: são essenciais para o funcionamento do Portal e permitem que você navegue pelo site e use seus recursos.</li>\n                        <li>Cookies de Desempenho: coletam informações sobre como os usuários usam o Portal, como quais páginas são visitadas com mais frequência, para melhorar o desempenho do site.</li>\n                        <li>Cookies de Funcionalidade: lembram suas preferências de navegação e permitem que o site forneça recursos personalizados.</li>\n                        <li>Cookies de Publicidade: são usados para exibir anúncios relevantes para você com base em suas preferências de navegação.</li>\n                    </ul>\n\n                    <h2 className=\"text-medium mb-0 mt-4 text-primary\">Gerenciando Cookies</h2>\n                    <p className=\"text-medium mb-0 mt-4\">Você pode gerenciar ou desativar os cookies nas configurações do seu navegador. No entanto, isso pode afetar a funcionalidade do Portal.</p>\n\n                    <h2 className=\"text-medium mb-0 mt-4 text-primary\">Alterações na Política</h2>\n                    <p className=\"text-medium mb-0 mt-4\">A Vawlog pode atualizar esta Política a qualquer momento. O uso contínuo do Portal após quaisquer alterações nesta Política constitui a aceitação dessas alterações.</p>\n\n                    <h2 className=\"text-medium mb-0 mt-4 text-primary\">Contato</h2>\n                    <p className=\"text-medium mb-0 mt-4\">Se você tiver dúvidas ou comentários sobre esta Política, entre em contato conosco através do e-mail: contato@vawlog.com.</p>\n                </Card.Body>\n            </Card>\n\n\n\n        </>\n    );\n};\n\nexport default Cookies;\n","/Users/caio/Projects/Samples/app-vawlog/src/views/policies/privacy.js",["1639","1640"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Card, Spinner } from 'react-bootstrap';\n\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\n\n\n\nconst Privacy = () => {\n    const title = 'Políticas de Uso';\n    const description = 'Políticas de Uso';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'policies', text: 'Políticas' },\n        { to: 'usage', text: 'Uso' },\n    ]\n\n\n\n\n\n    useEffect(() => {\n        // loadDashboard()\n    }, [])\n\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n\n\n            <Card className=\"\">\n                <Card.Body className=\" \">\n                    <div className='d-flex'>\n                        <div>\n                            <CsLineIcons icon=\"triangle\" className=\"text-primary\" size={22} />\n                        </div>\n                        <div>\n                            <p className=\"heading text-primary\" style={{ marginTop: 1, marginLeft: 5 }}>\n\n                               Política de Uso do Portal Vawlog\n                            </p>\n                        </div>\n                    </div>\n\n                    <p className=\"text-medium mb-0 mt-4 \"> A Política de Uso do Portal Vawlog (\"Política\") descreve os termos e condições sob os quais você pode acessar e utilizar o portal Vawlog (\"Portal\"). Ao utilizar o Portal, você concorda em cumprir esta Política. Se você não concorda com os termos desta Política, por favor, não utilize o Portal.</p>\n\n                    <h2 className=\"text-medium mb-0 mt-4 text-primary\">Conteúdo</h2>\n                    <p className=\"text-medium mb-0 mt-4\">Todo o conteúdo disponibilizado no Portal é de propriedade exclusiva da Vawlog. Nenhum conteúdo do Portal pode ser copiado, reproduzido, distribuído ou modificado sem autorização expressa da Vawlog.</p>\n\n                    <h2 className=\"text-medium mb-0 mt-4 text-primary\">Privacidade</h2>\n                    <p className=\"text-medium mb-0 mt-4\">A Vawlog coleta informações pessoais dos usuários do Portal apenas quando estas informações são fornecidas voluntariamente pelo usuário. As informações coletadas serão utilizadas apenas para a finalidade específica para a qual foram fornecidas.</p>\n\n                    <h2 className=\"text-medium mb-0 mt-4 text-primary\">Responsabilidade do Usuário</h2>\n                    <p className=\"text-medium mb-0 mt-4\">O usuário é responsável por todas as ações realizadas em sua conta no Portal, incluindo o conteúdo publicado. O usuário deve cumprir todas as leis e regulamentos aplicáveis ao utilizar o Portal.</p>\n\n                    <h2 className=\"text-medium mb-0 mt-4 text-primary\">Limitação de Responsabilidade</h2>\n                    <p className=\"text-medium mb-0 mt-4\">A Vawlog não se responsabiliza por quaisquer danos diretos ou indiretos decorrentes do uso ou incapacidade de uso do Portal, incluindo danos causados por vírus ou outros componentes prejudiciais.</p>\n\n                    <h2 className=\"text-medium mb-0 mt-4 text-primary\">Alterações na Política</h2>\n                    <p className=\"text-medium mb-0 mt-4\">A Vawlog pode atualizar esta Política a qualquer momento. O uso contínuo do Portal após quaisquer alterações nesta Política constitui a aceitação dessas alterações.</p>\n\n                    <h2 className=\"text-medium mb-0 mt-4 text-primary\">Contato</h2>\n                    <p className=\"text-medium mb-0 mt-4\">Se você tiver dúvidas ou comentários sobre esta Política, entre em contato conosco através do e-mail: contato@vawlog.com.</p>\n                </Card.Body>\n            </Card>\n\n\n\n        </>\n    );\n};\n\nexport default Privacy;\n","/Users/caio/Projects/Samples/app-vawlog/src/views/policies/data.js",["1641","1642"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Card, Spinner } from 'react-bootstrap';\n\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\n\n\n\nconst Data = () => {\n    const title = 'Privacidade de dados';\n    const description = 'Privacidade de dados';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'policies', text: 'Políticas' },\n        { to: 'privacity', text: 'Dados' },\n    ]\n\n\n\n\n\n    useEffect(() => {\n        // loadDashboard()\n    }, [])\n\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n\n\n            <Card className=\"\">\n                <Card.Body className=\" \">\n                    <div className='d-flex'>\n                        <div>\n                            <CsLineIcons icon=\"triangle\" className=\"text-primary\" size={22} />\n                        </div>\n                        <div>\n                            <p className=\"heading text-primary\" style={{ marginTop: 1, marginLeft: 5 }}>\n                                Política de Privacidade de Dados do Portal Vawlog\n                            </p>\n                        </div>\n                    </div>\n\n                   \n                    \n                    <p className=\"text-medium mb-0 mt-4 \">A Política de Privacidade de Dados do Portal Vawlog (\"Política\") descreve como a Vawlog coleta, utiliza e protege as informações pessoais dos usuários do portal Vawlog (\"Portal\"). Ao utilizar o Portal, você concorda com a coleta, utilização e proteção de suas informações pessoais conforme descrito nesta Política.</p>\n\n                    <h2 className=\"text-medium mb-0 mt-4 text-primary\">Coleta de Informações Pessoais</h2>\n                    <p className=\"text-medium mb-0 mt-4 \">A Vawlog coleta informações pessoais dos usuários do Portal, como nome, endereço de e-mail, número de telefone e outras informações relevantes para a utilização do Portal. Estas informações são coletadas apenas quando fornecidas voluntariamente pelo usuário.</p>\n\n                    <h2 className=\"text-medium mb-0 mt-4 text-primary\">Utilização de Informações Pessoais</h2>\n                    <p className=\"text-medium mb-0 mt-4 \">A Vawlog utiliza as informações pessoais coletadas para fornecer serviços e suporte aos usuários do Portal. As informações também podem ser utilizadas para melhorar os serviços e produtos da Vawlog, bem como para comunicações de marketing relacionadas aos serviços e produtos da empresa. A Vawlog não compartilha informações pessoais dos usuários com terceiros, exceto quando exigido por lei.</p>\n\n                    <h2 className=\"text-medium mb-0 mt-4 text-primary\">Proteção de Informações Pessoais</h2>\n                    <p className=\"text-medium mb-0 mt-4 \">A Vawlog toma medidas técnicas e organizacionais adequadas para proteger as informações pessoais dos usuários do Portal contra perda, uso indevido, acesso não autorizado ou divulgação. A Vawlog utiliza medidas de segurança, como criptografia e controles de acesso, para proteger as informações pessoais dos usuários.</p>\n\n                    <h2 className=\"text-medium mb-0 mt-4 text-primary\">Cookies</h2>\n                    <p className=\"text-medium mb-0 mt-4 \">O Portal pode utilizar cookies para melhorar a experiência do usuário. Cookies são arquivos de texto que são armazenados no computador do usuário para facilitar a navegação e personalização do Portal. O usuário pode optar por desativar os cookies nas configurações do seu navegador.</p>\n\n                    <h2 className=\"text-medium mb-0 mt-4 text-primary\">Alterações na Política</h2>\n                    <p className=\"text-medium mb-0 mt-4 \">A Vawlog pode atualizar esta Política a qualquer momento. O uso contínuo do Portal após quaisquer alterações nesta Política constitui a aceitação dessas alterações.</p>\n\n                    <h2 className=\"text-medium mb-0 mt-4 text-primary\">Contato</h2>\n                    <p className=\"text-medium mb-0 mt-4 \">Se você tiver dúvidas ou comentários sobre esta Política, entre em contato conosco através do e-mail: contato@vawlog.com.</p>\n                </Card.Body>\n            </Card>\n\n\n\n        </>\n    );\n};\n\nexport default Data;\n","/Users/caio/Projects/Samples/app-vawlog/src/views/policies/regulation.js",["1643","1644","1645"],"import React, { useEffect, useState } from 'react';\nimport { Row, Col, Card, Spinner } from 'react-bootstrap';\n\nimport HtmlHead from 'components/html-head/HtmlHead';\nimport BreadcrumbList from 'components/breadcrumb-list/BreadcrumbList';\nimport CsLineIcons from 'cs-line-icons/CsLineIcons';\n\n\n\nconst Regulation = () => {\n    const title = 'Regulamento';\n    const description = 'Regulamento';\n\n    const breadcrumbs = [\n        { to: '', text: 'Home' },\n        { to: 'policies', text: 'Políticas' },\n        { to: 'regulation', text: 'Regulamento' },\n    ]\n\n    return (\n        <>\n            <HtmlHead title={title} description={description} />\n            {/* Title and Top Buttons Start */}\n            <div className=\"page-title-container\">\n                <Row>\n                    {/* Title Start */}\n                    <Col md=\"7\">\n                        <h1 className=\"mb-0 pb-0 display-4\">{title}</h1>\n                        <BreadcrumbList items={breadcrumbs} />\n                    </Col>\n                    {/* Title End */}\n                </Row>\n            </div>\n            {/* Title and Top Buttons End */}\n\n\n\n            <Card className=\"\">\n                <Card.Body className=\" \">\n                    <div className='d-flex'>\n                        <div>\n                            <CsLineIcons icon=\"triangle\" className=\"text-primary\" size={22} />\n                        </div>\n                        <div>\n                            <p className=\"heading text-primary\" style={{ marginTop: 1, marginLeft: 5 }}>\n                                Regulamento da Empresa Vawlog\n                            </p>\n                        </div>\n                    </div>\n\n                    <p className=\"text-medium mb-0 mt-4\">O Regulamento da Empresa Vawlog (\"Regulamento\") estabelece as regras e diretrizes para todos os funcionários, contratados e prestadores de serviço da empresa (\"Funcionários\") e é aplicável a todas as operações e atividades da Vawlog.</p>\n\n                    <h2 className=\"text-medium mb-0 mt-4 text-primary\">Conduta Profissional</h2>\n                    <p className=\"text-medium mb-0 mt-4\">Todos os Funcionários devem seguir os mais altos padrões de ética e conduta profissional em todas as interações relacionadas à Vawlog. Isso inclui:</p>\n                    <ul className=\"text-medium mb-0 mt-4\">\n                        <li>Respeitar os direitos e dignidade de todos os indivíduos, incluindo clientes, colegas de trabalho e concorrentes;</li>\n                        <li>Não divulgar informações confidenciais da empresa, clientes ou parceiros de negócios;</li>\n                        <li>Evitar conflitos de interesse;</li>\n                        <li>Seguir todas as leis e regulamentações aplicáveis.</li>\n                    </ul>\n\n                    <h2 className=\"text-medium mb-0 mt-4 text-primary\">Uso de Recursos da Empresa</h2>\n                    <p className=\"text-medium mb-0 mt-4\">Todos os Funcionários devem usar os recursos da empresa, como equipamentos de escritório, sistemas de informação e outros ativos, apenas para fins comerciais legítimos e em conformidade com as políticas e procedimentos da empresa. O uso não autorizado desses recursos é proibido.</p>\n\n                    <h2 className=\"text-medium mb-0 mt-4 text-primary\">Assédio e Discriminação</h2>\n                    <p className=\"text-medium mb-0 mt-4\">A Vawlog não tolera assédio ou discriminação de qualquer tipo. Isso inclui, mas não se limita a, assédio sexual, comentários ofensivos sobre raça, gênero, orientação sexual, religião ou deficiência. Todos os Funcionários devem tratar os outros com respeito e dignidade.</p>\n\n                    <h2 className=\"text-medium mb-0 mt-4 text-primary\">Consequências de Violações</h2>\n                    <p className=\"text-medium mb-0 mt-4\">A violação deste Regulamento pode resultar em medidas disciplinares, incluindo advertências, suspensão ou demissão, conforme determinado pela empresa.</p>\n\n                    <h2 className=\"text-medium mb-0 mt-4 text-primary\">Alterações no Regulamento</h2>\n                    <p className=\"text-medium mb-0 mt-4\">A Vawlog pode atualizar este Regulamento a qualquer momento. A continuação do emprego ou prestação de serviços após quaisquer alterações neste Regulamento constitui a aceitação dessas alterações.</p>\n\n                    <h2 className=\"text-medium mb-0 mt-4 text-primary\">Contato</h2>\n                    <p className=\"text-medium mb-0 mt-4\">Se você tiver dúvidas ou comentários sobre este Regulamento, entre em contato conosco através do e-mail: contato@vawlog.com.</p>\n                </Card.Body>\n            </Card>\n\n\n\n        </>\n    );\n};\n\nexport default Regulation;\n","/Users/caio/Projects/Samples/app-vawlog/src/views/contact/index.js",["1646","1647","1648","1649","1650","1651"],"/Users/caio/Projects/Samples/app-vawlog/src/views/faq/index.js",["1652","1653","1654"],"/Users/caio/Projects/Samples/app-vawlog/src/views/users/index.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/users/components/ControlsEdit.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/users/components/ControlsAdd.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/users/components/ControlsDelete.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/users/components/ControlsPageSize.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/users/components/TablePagination.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/users/components/ControlsSearch.js",[],"/Users/caio/Projects/Samples/app-vawlog/src/views/users/components/Table.js",[],{"ruleId":"1655","replacedBy":"1656"},{"ruleId":"1657","replacedBy":"1658"},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1670"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1672"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1674"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1676"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1677"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1679"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1684"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1685"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1686"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1687"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1688"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1689"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1690"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1691"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1692"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1693"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1694"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1695"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1696"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1697"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1698"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1699"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1700"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1701"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1702"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1703"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1704"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1705"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1706"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1707"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1708"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1709"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1710"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1711"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1712"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1713"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1714"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1715"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1716"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1717"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1718"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1719"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1720"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1721"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1722"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1723"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1724"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1725"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1726"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1727"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1728"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1729"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1730"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1731"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1659","severity":1,"message":"1732","line":13,"column":13,"nodeType":"1661","messageId":"1662","endLine":13,"endColumn":16},{"ruleId":"1667","severity":1,"message":"1671","line":118,"column":8,"nodeType":"1669","endLine":118,"endColumn":31,"suggestions":"1733"},{"ruleId":"1667","severity":1,"message":"1673","line":124,"column":8,"nodeType":"1669","endLine":124,"endColumn":15,"suggestions":"1734"},{"ruleId":"1667","severity":1,"message":"1675","line":132,"column":8,"nodeType":"1669","endLine":132,"endColumn":28,"suggestions":"1735"},{"ruleId":"1667","severity":1,"message":"1675","line":138,"column":8,"nodeType":"1669","endLine":138,"endColumn":24,"suggestions":"1736"},{"ruleId":"1667","severity":1,"message":"1678","line":162,"column":8,"nodeType":"1669","endLine":162,"endColumn":27,"suggestions":"1737"},{"ruleId":"1667","severity":1,"message":"1678","line":170,"column":8,"nodeType":"1669","endLine":170,"endColumn":27,"suggestions":"1738"},{"ruleId":"1680","severity":1,"message":"1681","line":187,"column":13,"nodeType":"1682","messageId":"1683","endLine":187,"endColumn":29},{"ruleId":"1663","severity":1,"message":"1664","line":224,"column":42,"nodeType":"1665","messageId":"1666","endLine":224,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":241,"column":42,"nodeType":"1665","messageId":"1666","endLine":241,"endColumn":44},{"ruleId":"1667","severity":1,"message":"1739","line":258,"column":8,"nodeType":"1669","endLine":258,"endColumn":10,"suggestions":"1740"},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1667","severity":1,"message":"1671","line":118,"column":8,"nodeType":"1669","endLine":118,"endColumn":31,"suggestions":"1741"},{"ruleId":"1667","severity":1,"message":"1673","line":124,"column":8,"nodeType":"1669","endLine":124,"endColumn":15,"suggestions":"1742"},{"ruleId":"1667","severity":1,"message":"1675","line":132,"column":8,"nodeType":"1669","endLine":132,"endColumn":28,"suggestions":"1743"},{"ruleId":"1667","severity":1,"message":"1675","line":138,"column":8,"nodeType":"1669","endLine":138,"endColumn":24,"suggestions":"1744"},{"ruleId":"1667","severity":1,"message":"1678","line":162,"column":8,"nodeType":"1669","endLine":162,"endColumn":27,"suggestions":"1745"},{"ruleId":"1667","severity":1,"message":"1678","line":170,"column":8,"nodeType":"1669","endLine":170,"endColumn":27,"suggestions":"1746"},{"ruleId":"1663","severity":1,"message":"1664","line":192,"column":42,"nodeType":"1665","messageId":"1666","endLine":192,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":209,"column":42,"nodeType":"1665","messageId":"1666","endLine":209,"endColumn":44},{"ruleId":"1667","severity":1,"message":"1739","line":226,"column":8,"nodeType":"1669","endLine":226,"endColumn":10,"suggestions":"1747"},{"ruleId":"1680","severity":1,"message":"1681","line":234,"column":13,"nodeType":"1682","messageId":"1683","endLine":234,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1748","line":2,"column":20,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":27},{"ruleId":"1659","severity":1,"message":"1749","line":2,"column":29,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":37},{"ruleId":"1659","severity":1,"message":"1750","line":2,"column":39,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":49},{"ruleId":"1659","severity":1,"message":"1751","line":2,"column":51,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":62},{"ruleId":"1659","severity":1,"message":"1752","line":2,"column":70,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":75},{"ruleId":"1659","severity":1,"message":"1753","line":2,"column":77,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":83},{"ruleId":"1659","severity":1,"message":"1754","line":2,"column":85,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":90},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1659","severity":1,"message":"1755","line":5,"column":8,"nodeType":"1661","messageId":"1662","endLine":5,"endColumn":11},{"ruleId":"1659","severity":1,"message":"1756","line":7,"column":10,"nodeType":"1661","messageId":"1662","endLine":7,"endColumn":15},{"ruleId":"1659","severity":1,"message":"1757","line":7,"column":17,"nodeType":"1661","messageId":"1662","endLine":7,"endColumn":21},{"ruleId":"1659","severity":1,"message":"1758","line":7,"column":23,"nodeType":"1661","messageId":"1662","endLine":7,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1759","line":8,"column":8,"nodeType":"1661","messageId":"1662","endLine":8,"endColumn":12},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":105,"column":37,"nodeType":"1665","messageId":"1666","endLine":105,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":122,"column":8,"nodeType":"1669","endLine":122,"endColumn":10,"suggestions":"1760"},{"ruleId":"1667","severity":1,"message":"1671","line":144,"column":8,"nodeType":"1669","endLine":144,"endColumn":31,"suggestions":"1761"},{"ruleId":"1667","severity":1,"message":"1673","line":150,"column":8,"nodeType":"1669","endLine":150,"endColumn":15,"suggestions":"1762"},{"ruleId":"1667","severity":1,"message":"1675","line":158,"column":8,"nodeType":"1669","endLine":158,"endColumn":28,"suggestions":"1763"},{"ruleId":"1667","severity":1,"message":"1675","line":164,"column":8,"nodeType":"1669","endLine":164,"endColumn":24,"suggestions":"1764"},{"ruleId":"1667","severity":1,"message":"1678","line":188,"column":8,"nodeType":"1669","endLine":188,"endColumn":27,"suggestions":"1765"},{"ruleId":"1680","severity":1,"message":"1681","line":200,"column":13,"nodeType":"1682","messageId":"1683","endLine":200,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":3,"column":100,"nodeType":"1661","messageId":"1662","endLine":3,"endColumn":113},{"ruleId":"1659","severity":1,"message":"1732","line":14,"column":13,"nodeType":"1661","messageId":"1662","endLine":14,"endColumn":16},{"ruleId":"1659","severity":1,"message":"1766","line":16,"column":10,"nodeType":"1661","messageId":"1662","endLine":16,"endColumn":22},{"ruleId":"1663","severity":1,"message":"1664","line":71,"column":42,"nodeType":"1665","messageId":"1666","endLine":71,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":84,"column":42,"nodeType":"1665","messageId":"1666","endLine":84,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":97,"column":42,"nodeType":"1665","messageId":"1666","endLine":97,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":110,"column":42,"nodeType":"1665","messageId":"1666","endLine":110,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":123,"column":42,"nodeType":"1665","messageId":"1666","endLine":123,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":136,"column":42,"nodeType":"1665","messageId":"1666","endLine":136,"endColumn":44},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1767"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1768"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1769"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1770"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1771"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1772"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1659","severity":1,"message":"1732","line":13,"column":13,"nodeType":"1661","messageId":"1662","endLine":13,"endColumn":16},{"ruleId":"1667","severity":1,"message":"1671","line":113,"column":8,"nodeType":"1669","endLine":113,"endColumn":31,"suggestions":"1773"},{"ruleId":"1667","severity":1,"message":"1673","line":119,"column":8,"nodeType":"1669","endLine":119,"endColumn":15,"suggestions":"1774"},{"ruleId":"1667","severity":1,"message":"1675","line":127,"column":8,"nodeType":"1669","endLine":127,"endColumn":28,"suggestions":"1775"},{"ruleId":"1667","severity":1,"message":"1675","line":133,"column":8,"nodeType":"1669","endLine":133,"endColumn":24,"suggestions":"1776"},{"ruleId":"1663","severity":1,"message":"1664","line":153,"column":42,"nodeType":"1665","messageId":"1666","endLine":153,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":165,"column":42,"nodeType":"1665","messageId":"1666","endLine":165,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":177,"column":42,"nodeType":"1665","messageId":"1666","endLine":177,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":189,"column":42,"nodeType":"1665","messageId":"1666","endLine":189,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":201,"column":42,"nodeType":"1665","messageId":"1666","endLine":201,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":213,"column":42,"nodeType":"1665","messageId":"1666","endLine":213,"endColumn":44},{"ruleId":"1667","severity":1,"message":"1739","line":227,"column":8,"nodeType":"1669","endLine":227,"endColumn":10,"suggestions":"1777"},{"ruleId":"1778","severity":1,"message":"1779","line":1039,"column":90,"nodeType":"1780","messageId":"1781","endLine":1039,"endColumn":144,"fix":"1782"},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1659","severity":1,"message":"1783","line":16,"column":8,"nodeType":"1661","messageId":"1662","endLine":16,"endColumn":13},{"ruleId":"1667","severity":1,"message":"1671","line":112,"column":8,"nodeType":"1669","endLine":112,"endColumn":31,"suggestions":"1784"},{"ruleId":"1667","severity":1,"message":"1673","line":118,"column":8,"nodeType":"1669","endLine":118,"endColumn":15,"suggestions":"1785"},{"ruleId":"1667","severity":1,"message":"1675","line":126,"column":8,"nodeType":"1669","endLine":126,"endColumn":28,"suggestions":"1786"},{"ruleId":"1667","severity":1,"message":"1675","line":132,"column":8,"nodeType":"1669","endLine":132,"endColumn":24,"suggestions":"1787"},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1788"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1789"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1790"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1791"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1792"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1793"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1794"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1795"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1796"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1797"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1798"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1799"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1800"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1801"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1802"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1803"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1804"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1805"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1806"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1807"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1808"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1809"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1810"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1811"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1753","line":2,"column":10,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":16},{"ruleId":"1659","severity":1,"message":"1749","line":2,"column":34,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":42},{"ruleId":"1659","severity":1,"message":"1812","line":2,"column":44,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":49},{"ruleId":"1659","severity":1,"message":"1813","line":3,"column":10,"nodeType":"1661","messageId":"1662","endLine":3,"endColumn":17},{"ruleId":"1659","severity":1,"message":"1814","line":4,"column":10,"nodeType":"1661","messageId":"1662","endLine":4,"endColumn":36},{"ruleId":"1659","severity":1,"message":"1815","line":8,"column":8,"nodeType":"1661","messageId":"1662","endLine":8,"endColumn":36},{"ruleId":"1659","severity":1,"message":"1816","line":9,"column":8,"nodeType":"1661","messageId":"1662","endLine":9,"endColumn":23},{"ruleId":"1659","severity":1,"message":"1817","line":10,"column":8,"nodeType":"1661","messageId":"1662","endLine":10,"endColumn":23},{"ruleId":"1659","severity":1,"message":"1818","line":11,"column":8,"nodeType":"1661","messageId":"1662","endLine":11,"endColumn":23},{"ruleId":"1659","severity":1,"message":"1819","line":12,"column":8,"nodeType":"1661","messageId":"1662","endLine":12,"endColumn":23},{"ruleId":"1659","severity":1,"message":"1820","line":13,"column":8,"nodeType":"1661","messageId":"1662","endLine":13,"endColumn":19},{"ruleId":"1659","severity":1,"message":"1821","line":14,"column":8,"nodeType":"1661","messageId":"1662","endLine":14,"endColumn":32},{"ruleId":"1659","severity":1,"message":"1822","line":15,"column":8,"nodeType":"1661","messageId":"1662","endLine":15,"endColumn":32},{"ruleId":"1659","severity":1,"message":"1823","line":16,"column":8,"nodeType":"1661","messageId":"1662","endLine":16,"endColumn":32},{"ruleId":"1659","severity":1,"message":"1824","line":17,"column":8,"nodeType":"1661","messageId":"1662","endLine":17,"endColumn":32},{"ruleId":"1659","severity":1,"message":"1825","line":18,"column":8,"nodeType":"1661","messageId":"1662","endLine":18,"endColumn":32},{"ruleId":"1659","severity":1,"message":"1826","line":19,"column":8,"nodeType":"1661","messageId":"1662","endLine":19,"endColumn":32},{"ruleId":"1663","severity":1,"message":"1664","line":77,"column":37,"nodeType":"1665","messageId":"1666","endLine":77,"endColumn":39},{"ruleId":"1663","severity":1,"message":"1664","line":111,"column":37,"nodeType":"1665","messageId":"1666","endLine":111,"endColumn":39},{"ruleId":"1659","severity":1,"message":"1827","line":7,"column":8,"nodeType":"1661","messageId":"1662","endLine":7,"endColumn":20},{"ruleId":"1659","severity":1,"message":"1812","line":2,"column":10,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":15},{"ruleId":"1659","severity":1,"message":"1828","line":2,"column":17,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":31},{"ruleId":"1659","severity":1,"message":"1829","line":2,"column":33,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":40},{"ruleId":"1659","severity":1,"message":"1830","line":3,"column":8,"nodeType":"1661","messageId":"1662","endLine":3,"endColumn":14},{"ruleId":"1659","severity":1,"message":"1831","line":5,"column":10,"nodeType":"1661","messageId":"1662","endLine":5,"endColumn":20},{"ruleId":"1659","severity":1,"message":"1832","line":6,"column":8,"nodeType":"1661","messageId":"1662","endLine":6,"endColumn":24},{"ruleId":"1659","severity":1,"message":"1833","line":7,"column":8,"nodeType":"1661","messageId":"1662","endLine":7,"endColumn":24},{"ruleId":"1659","severity":1,"message":"1834","line":12,"column":8,"nodeType":"1661","messageId":"1662","endLine":12,"endColumn":27},{"ruleId":"1659","severity":1,"message":"1835","line":7,"column":8,"nodeType":"1661","messageId":"1662","endLine":7,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1753","line":2,"column":77,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":83},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1659","severity":1,"message":"1756","line":12,"column":10,"nodeType":"1661","messageId":"1662","endLine":12,"endColumn":15},{"ruleId":"1659","severity":1,"message":"1757","line":12,"column":17,"nodeType":"1661","messageId":"1662","endLine":12,"endColumn":21},{"ruleId":"1659","severity":1,"message":"1758","line":12,"column":23,"nodeType":"1661","messageId":"1662","endLine":12,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1759","line":14,"column":8,"nodeType":"1661","messageId":"1662","endLine":14,"endColumn":12},{"ruleId":"1659","severity":1,"message":"1766","line":15,"column":10,"nodeType":"1661","messageId":"1662","endLine":15,"endColumn":22},{"ruleId":"1659","severity":1,"message":"1836","line":16,"column":8,"nodeType":"1661","messageId":"1662","endLine":16,"endColumn":19},{"ruleId":"1659","severity":1,"message":"1837","line":54,"column":12,"nodeType":"1661","messageId":"1662","endLine":54,"endColumn":15},{"ruleId":"1667","severity":1,"message":"1671","line":115,"column":8,"nodeType":"1669","endLine":115,"endColumn":31,"suggestions":"1838"},{"ruleId":"1667","severity":1,"message":"1673","line":121,"column":8,"nodeType":"1669","endLine":121,"endColumn":15,"suggestions":"1839"},{"ruleId":"1667","severity":1,"message":"1675","line":129,"column":8,"nodeType":"1669","endLine":129,"endColumn":28,"suggestions":"1840"},{"ruleId":"1667","severity":1,"message":"1675","line":135,"column":8,"nodeType":"1669","endLine":135,"endColumn":24,"suggestions":"1841"},{"ruleId":"1659","severity":1,"message":"1842","line":141,"column":11,"nodeType":"1661","messageId":"1662","endLine":141,"endColumn":18},{"ruleId":"1659","severity":1,"message":"1843","line":330,"column":11,"nodeType":"1661","messageId":"1662","endLine":330,"endColumn":27},{"ruleId":"1659","severity":1,"message":"1844","line":334,"column":11,"nodeType":"1661","messageId":"1662","endLine":334,"endColumn":28},{"ruleId":"1663","severity":1,"message":"1664","line":56,"column":37,"nodeType":"1665","messageId":"1666","endLine":56,"endColumn":39},{"ruleId":"1663","severity":1,"message":"1664","line":58,"column":51,"nodeType":"1665","messageId":"1666","endLine":58,"endColumn":53},{"ruleId":"1663","severity":1,"message":"1664","line":130,"column":37,"nodeType":"1665","messageId":"1666","endLine":130,"endColumn":39},{"ruleId":"1663","severity":1,"message":"1664","line":133,"column":49,"nodeType":"1665","messageId":"1666","endLine":133,"endColumn":51},{"ruleId":"1663","severity":1,"message":"1664","line":57,"column":37,"nodeType":"1665","messageId":"1666","endLine":57,"endColumn":39},{"ruleId":"1663","severity":1,"message":"1664","line":59,"column":53,"nodeType":"1665","messageId":"1666","endLine":59,"endColumn":55},{"ruleId":"1663","severity":1,"message":"1664","line":133,"column":37,"nodeType":"1665","messageId":"1666","endLine":133,"endColumn":39},{"ruleId":"1663","severity":1,"message":"1664","line":137,"column":49,"nodeType":"1665","messageId":"1666","endLine":137,"endColumn":51},{"ruleId":"1663","severity":1,"message":"1664","line":69,"column":37,"nodeType":"1665","messageId":"1666","endLine":69,"endColumn":39},{"ruleId":"1663","severity":1,"message":"1664","line":71,"column":51,"nodeType":"1665","messageId":"1666","endLine":71,"endColumn":53},{"ruleId":"1663","severity":1,"message":"1664","line":143,"column":37,"nodeType":"1665","messageId":"1666","endLine":143,"endColumn":39},{"ruleId":"1663","severity":1,"message":"1664","line":146,"column":49,"nodeType":"1665","messageId":"1666","endLine":146,"endColumn":51},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1659","severity":1,"message":"1732","line":13,"column":13,"nodeType":"1661","messageId":"1662","endLine":13,"endColumn":16},{"ruleId":"1667","severity":1,"message":"1671","line":117,"column":8,"nodeType":"1669","endLine":117,"endColumn":31,"suggestions":"1845"},{"ruleId":"1667","severity":1,"message":"1673","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":15,"suggestions":"1846"},{"ruleId":"1667","severity":1,"message":"1675","line":131,"column":8,"nodeType":"1669","endLine":131,"endColumn":28,"suggestions":"1847"},{"ruleId":"1667","severity":1,"message":"1675","line":137,"column":8,"nodeType":"1669","endLine":137,"endColumn":24,"suggestions":"1848"},{"ruleId":"1659","severity":1,"message":"1849","line":153,"column":11,"nodeType":"1661","messageId":"1662","endLine":153,"endColumn":20},{"ruleId":"1663","severity":1,"message":"1664","line":157,"column":42,"nodeType":"1665","messageId":"1666","endLine":157,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":169,"column":42,"nodeType":"1665","messageId":"1666","endLine":169,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":181,"column":42,"nodeType":"1665","messageId":"1666","endLine":181,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":193,"column":42,"nodeType":"1665","messageId":"1666","endLine":193,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":205,"column":42,"nodeType":"1665","messageId":"1666","endLine":205,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":217,"column":42,"nodeType":"1665","messageId":"1666","endLine":217,"endColumn":44},{"ruleId":"1667","severity":1,"message":"1739","line":231,"column":8,"nodeType":"1669","endLine":231,"endColumn":10,"suggestions":"1850"},{"ruleId":"1659","severity":1,"message":"1851","line":337,"column":30,"nodeType":"1661","messageId":"1662","endLine":337,"endColumn":49},{"ruleId":"1778","severity":1,"message":"1779","line":1038,"column":90,"nodeType":"1780","messageId":"1781","endLine":1038,"endColumn":144,"fix":"1852"},{"ruleId":"1659","severity":1,"message":"1660","line":3,"column":100,"nodeType":"1661","messageId":"1662","endLine":3,"endColumn":113},{"ruleId":"1655","replacedBy":"1853"},{"ruleId":"1657","replacedBy":"1854"},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1855"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1856"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1857"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1858"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1859"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1860"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1861"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1862"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1863"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1864"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1865"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1866"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1753","line":2,"column":77,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":83},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1659","severity":1,"message":"1756","line":12,"column":10,"nodeType":"1661","messageId":"1662","endLine":12,"endColumn":15},{"ruleId":"1659","severity":1,"message":"1757","line":12,"column":17,"nodeType":"1661","messageId":"1662","endLine":12,"endColumn":21},{"ruleId":"1659","severity":1,"message":"1758","line":12,"column":23,"nodeType":"1661","messageId":"1662","endLine":12,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1759","line":14,"column":8,"nodeType":"1661","messageId":"1662","endLine":14,"endColumn":12},{"ruleId":"1659","severity":1,"message":"1766","line":15,"column":10,"nodeType":"1661","messageId":"1662","endLine":15,"endColumn":22},{"ruleId":"1659","severity":1,"message":"1836","line":16,"column":8,"nodeType":"1661","messageId":"1662","endLine":16,"endColumn":19},{"ruleId":"1659","severity":1,"message":"1837","line":54,"column":12,"nodeType":"1661","messageId":"1662","endLine":54,"endColumn":15},{"ruleId":"1667","severity":1,"message":"1671","line":115,"column":8,"nodeType":"1669","endLine":115,"endColumn":31,"suggestions":"1867"},{"ruleId":"1667","severity":1,"message":"1673","line":121,"column":8,"nodeType":"1669","endLine":121,"endColumn":15,"suggestions":"1868"},{"ruleId":"1667","severity":1,"message":"1675","line":129,"column":8,"nodeType":"1669","endLine":129,"endColumn":28,"suggestions":"1869"},{"ruleId":"1667","severity":1,"message":"1675","line":135,"column":8,"nodeType":"1669","endLine":135,"endColumn":24,"suggestions":"1870"},{"ruleId":"1659","severity":1,"message":"1842","line":141,"column":11,"nodeType":"1661","messageId":"1662","endLine":141,"endColumn":18},{"ruleId":"1659","severity":1,"message":"1843","line":330,"column":11,"nodeType":"1661","messageId":"1662","endLine":330,"endColumn":27},{"ruleId":"1659","severity":1,"message":"1844","line":334,"column":11,"nodeType":"1661","messageId":"1662","endLine":334,"endColumn":28},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1871"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1872"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1873"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1874"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1875"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1876"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1877"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1878"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1879"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1880"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1881"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1882"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1883"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1884"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1885"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1886"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1887"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1888"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1889"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1890"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1891"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1892"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1893"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1894"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1895"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1896"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1897"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1898"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1899"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1900"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1901"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1902"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1903"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1904"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1905"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1906"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1667","severity":1,"message":"1671","line":118,"column":8,"nodeType":"1669","endLine":118,"endColumn":31,"suggestions":"1907"},{"ruleId":"1667","severity":1,"message":"1673","line":124,"column":8,"nodeType":"1669","endLine":124,"endColumn":15,"suggestions":"1908"},{"ruleId":"1667","severity":1,"message":"1675","line":132,"column":8,"nodeType":"1669","endLine":132,"endColumn":28,"suggestions":"1909"},{"ruleId":"1667","severity":1,"message":"1675","line":138,"column":8,"nodeType":"1669","endLine":138,"endColumn":24,"suggestions":"1910"},{"ruleId":"1667","severity":1,"message":"1678","line":162,"column":8,"nodeType":"1669","endLine":162,"endColumn":27,"suggestions":"1911"},{"ruleId":"1667","severity":1,"message":"1678","line":170,"column":8,"nodeType":"1669","endLine":170,"endColumn":27,"suggestions":"1912"},{"ruleId":"1663","severity":1,"message":"1664","line":192,"column":42,"nodeType":"1665","messageId":"1666","endLine":192,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":209,"column":42,"nodeType":"1665","messageId":"1666","endLine":209,"endColumn":44},{"ruleId":"1667","severity":1,"message":"1739","line":226,"column":8,"nodeType":"1669","endLine":226,"endColumn":10,"suggestions":"1913"},{"ruleId":"1680","severity":1,"message":"1681","line":234,"column":13,"nodeType":"1682","messageId":"1683","endLine":234,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1914"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1915"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1916"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1917"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1918"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1919"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1659","severity":1,"message":"1732","line":13,"column":13,"nodeType":"1661","messageId":"1662","endLine":13,"endColumn":16},{"ruleId":"1667","severity":1,"message":"1671","line":113,"column":8,"nodeType":"1669","endLine":113,"endColumn":31,"suggestions":"1920"},{"ruleId":"1667","severity":1,"message":"1673","line":119,"column":8,"nodeType":"1669","endLine":119,"endColumn":15,"suggestions":"1921"},{"ruleId":"1667","severity":1,"message":"1675","line":127,"column":8,"nodeType":"1669","endLine":127,"endColumn":28,"suggestions":"1922"},{"ruleId":"1667","severity":1,"message":"1675","line":133,"column":8,"nodeType":"1669","endLine":133,"endColumn":24,"suggestions":"1923"},{"ruleId":"1663","severity":1,"message":"1664","line":153,"column":42,"nodeType":"1665","messageId":"1666","endLine":153,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":165,"column":42,"nodeType":"1665","messageId":"1666","endLine":165,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":177,"column":42,"nodeType":"1665","messageId":"1666","endLine":177,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":189,"column":42,"nodeType":"1665","messageId":"1666","endLine":189,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":201,"column":42,"nodeType":"1665","messageId":"1666","endLine":201,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":213,"column":42,"nodeType":"1665","messageId":"1666","endLine":213,"endColumn":44},{"ruleId":"1667","severity":1,"message":"1739","line":227,"column":8,"nodeType":"1669","endLine":227,"endColumn":10,"suggestions":"1924"},{"ruleId":"1778","severity":1,"message":"1779","line":1039,"column":90,"nodeType":"1780","messageId":"1781","endLine":1039,"endColumn":144,"fix":"1925"},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1926"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1927"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1928"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1929"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1930"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1931"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1748","line":2,"column":20,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":27},{"ruleId":"1659","severity":1,"message":"1749","line":2,"column":29,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":37},{"ruleId":"1659","severity":1,"message":"1750","line":2,"column":39,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":49},{"ruleId":"1659","severity":1,"message":"1751","line":2,"column":51,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":62},{"ruleId":"1659","severity":1,"message":"1752","line":2,"column":70,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":75},{"ruleId":"1659","severity":1,"message":"1753","line":2,"column":77,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":83},{"ruleId":"1659","severity":1,"message":"1754","line":2,"column":85,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":90},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1659","severity":1,"message":"1755","line":5,"column":8,"nodeType":"1661","messageId":"1662","endLine":5,"endColumn":11},{"ruleId":"1659","severity":1,"message":"1756","line":7,"column":10,"nodeType":"1661","messageId":"1662","endLine":7,"endColumn":15},{"ruleId":"1659","severity":1,"message":"1757","line":7,"column":17,"nodeType":"1661","messageId":"1662","endLine":7,"endColumn":21},{"ruleId":"1659","severity":1,"message":"1758","line":7,"column":23,"nodeType":"1661","messageId":"1662","endLine":7,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1759","line":8,"column":8,"nodeType":"1661","messageId":"1662","endLine":8,"endColumn":12},{"ruleId":"1659","severity":1,"message":"1660","line":3,"column":100,"nodeType":"1661","messageId":"1662","endLine":3,"endColumn":113},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1659","severity":1,"message":"1732","line":13,"column":13,"nodeType":"1661","messageId":"1662","endLine":13,"endColumn":16},{"ruleId":"1667","severity":1,"message":"1671","line":117,"column":8,"nodeType":"1669","endLine":117,"endColumn":31,"suggestions":"1932"},{"ruleId":"1667","severity":1,"message":"1673","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":15,"suggestions":"1933"},{"ruleId":"1667","severity":1,"message":"1675","line":131,"column":8,"nodeType":"1669","endLine":131,"endColumn":28,"suggestions":"1934"},{"ruleId":"1667","severity":1,"message":"1675","line":137,"column":8,"nodeType":"1669","endLine":137,"endColumn":24,"suggestions":"1935"},{"ruleId":"1659","severity":1,"message":"1849","line":153,"column":11,"nodeType":"1661","messageId":"1662","endLine":153,"endColumn":20},{"ruleId":"1663","severity":1,"message":"1664","line":157,"column":42,"nodeType":"1665","messageId":"1666","endLine":157,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":169,"column":42,"nodeType":"1665","messageId":"1666","endLine":169,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":181,"column":42,"nodeType":"1665","messageId":"1666","endLine":181,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":193,"column":42,"nodeType":"1665","messageId":"1666","endLine":193,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":205,"column":42,"nodeType":"1665","messageId":"1666","endLine":205,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":217,"column":42,"nodeType":"1665","messageId":"1666","endLine":217,"endColumn":44},{"ruleId":"1667","severity":1,"message":"1739","line":231,"column":8,"nodeType":"1669","endLine":231,"endColumn":10,"suggestions":"1936"},{"ruleId":"1659","severity":1,"message":"1851","line":337,"column":30,"nodeType":"1661","messageId":"1662","endLine":337,"endColumn":49},{"ruleId":"1778","severity":1,"message":"1779","line":1038,"column":90,"nodeType":"1780","messageId":"1781","endLine":1038,"endColumn":144,"fix":"1937"},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1659","severity":1,"message":"1732","line":13,"column":13,"nodeType":"1661","messageId":"1662","endLine":13,"endColumn":16},{"ruleId":"1667","severity":1,"message":"1671","line":118,"column":8,"nodeType":"1669","endLine":118,"endColumn":31,"suggestions":"1938"},{"ruleId":"1667","severity":1,"message":"1673","line":124,"column":8,"nodeType":"1669","endLine":124,"endColumn":15,"suggestions":"1939"},{"ruleId":"1667","severity":1,"message":"1675","line":132,"column":8,"nodeType":"1669","endLine":132,"endColumn":28,"suggestions":"1940"},{"ruleId":"1667","severity":1,"message":"1675","line":138,"column":8,"nodeType":"1669","endLine":138,"endColumn":24,"suggestions":"1941"},{"ruleId":"1667","severity":1,"message":"1678","line":162,"column":8,"nodeType":"1669","endLine":162,"endColumn":27,"suggestions":"1942"},{"ruleId":"1667","severity":1,"message":"1678","line":170,"column":8,"nodeType":"1669","endLine":170,"endColumn":27,"suggestions":"1943"},{"ruleId":"1680","severity":1,"message":"1681","line":187,"column":13,"nodeType":"1682","messageId":"1683","endLine":187,"endColumn":29},{"ruleId":"1663","severity":1,"message":"1664","line":224,"column":42,"nodeType":"1665","messageId":"1666","endLine":224,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":241,"column":42,"nodeType":"1665","messageId":"1666","endLine":241,"endColumn":44},{"ruleId":"1667","severity":1,"message":"1739","line":258,"column":8,"nodeType":"1669","endLine":258,"endColumn":10,"suggestions":"1944"},{"ruleId":"1659","severity":1,"message":"1660","line":3,"column":100,"nodeType":"1661","messageId":"1662","endLine":3,"endColumn":113},{"ruleId":"1659","severity":1,"message":"1732","line":14,"column":13,"nodeType":"1661","messageId":"1662","endLine":14,"endColumn":16},{"ruleId":"1659","severity":1,"message":"1766","line":16,"column":10,"nodeType":"1661","messageId":"1662","endLine":16,"endColumn":22},{"ruleId":"1663","severity":1,"message":"1664","line":71,"column":42,"nodeType":"1665","messageId":"1666","endLine":71,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":84,"column":42,"nodeType":"1665","messageId":"1666","endLine":84,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":97,"column":42,"nodeType":"1665","messageId":"1666","endLine":97,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":110,"column":42,"nodeType":"1665","messageId":"1666","endLine":110,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":123,"column":42,"nodeType":"1665","messageId":"1666","endLine":123,"endColumn":44},{"ruleId":"1663","severity":1,"message":"1664","line":136,"column":42,"nodeType":"1665","messageId":"1666","endLine":136,"endColumn":44},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1659","severity":1,"message":"1783","line":16,"column":8,"nodeType":"1661","messageId":"1662","endLine":16,"endColumn":13},{"ruleId":"1659","severity":1,"message":"1945","line":52,"column":13,"nodeType":"1661","messageId":"1662","endLine":52,"endColumn":20},{"ruleId":"1667","severity":1,"message":"1671","line":112,"column":8,"nodeType":"1669","endLine":112,"endColumn":31,"suggestions":"1946"},{"ruleId":"1667","severity":1,"message":"1673","line":118,"column":8,"nodeType":"1669","endLine":118,"endColumn":15,"suggestions":"1947"},{"ruleId":"1667","severity":1,"message":"1675","line":126,"column":8,"nodeType":"1669","endLine":126,"endColumn":28,"suggestions":"1948"},{"ruleId":"1667","severity":1,"message":"1675","line":132,"column":8,"nodeType":"1669","endLine":132,"endColumn":24,"suggestions":"1949"},{"ruleId":"1659","severity":1,"message":"1950","line":152,"column":12,"nodeType":"1661","messageId":"1662","endLine":152,"endColumn":16},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":105,"column":37,"nodeType":"1665","messageId":"1666","endLine":105,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":122,"column":8,"nodeType":"1669","endLine":122,"endColumn":10,"suggestions":"1951"},{"ruleId":"1667","severity":1,"message":"1671","line":144,"column":8,"nodeType":"1669","endLine":144,"endColumn":31,"suggestions":"1952"},{"ruleId":"1667","severity":1,"message":"1673","line":150,"column":8,"nodeType":"1669","endLine":150,"endColumn":15,"suggestions":"1953"},{"ruleId":"1667","severity":1,"message":"1675","line":158,"column":8,"nodeType":"1669","endLine":158,"endColumn":28,"suggestions":"1954"},{"ruleId":"1667","severity":1,"message":"1675","line":164,"column":8,"nodeType":"1669","endLine":164,"endColumn":24,"suggestions":"1955"},{"ruleId":"1667","severity":1,"message":"1678","line":188,"column":8,"nodeType":"1669","endLine":188,"endColumn":27,"suggestions":"1956"},{"ruleId":"1680","severity":1,"message":"1681","line":200,"column":13,"nodeType":"1682","messageId":"1683","endLine":200,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1957"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1958"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1959"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1960"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1961"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1962"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1963"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1964"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1965"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1966"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1967"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1968"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1969"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1970"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1971"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1972"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1973"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1974"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1660","line":2,"column":100,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":113},{"ruleId":"1663","severity":1,"message":"1664","line":106,"column":37,"nodeType":"1665","messageId":"1666","endLine":106,"endColumn":39},{"ruleId":"1667","severity":1,"message":"1668","line":123,"column":8,"nodeType":"1669","endLine":123,"endColumn":10,"suggestions":"1975"},{"ruleId":"1667","severity":1,"message":"1671","line":145,"column":8,"nodeType":"1669","endLine":145,"endColumn":31,"suggestions":"1976"},{"ruleId":"1667","severity":1,"message":"1673","line":151,"column":8,"nodeType":"1669","endLine":151,"endColumn":15,"suggestions":"1977"},{"ruleId":"1667","severity":1,"message":"1675","line":159,"column":8,"nodeType":"1669","endLine":159,"endColumn":28,"suggestions":"1978"},{"ruleId":"1667","severity":1,"message":"1675","line":165,"column":8,"nodeType":"1669","endLine":165,"endColumn":24,"suggestions":"1979"},{"ruleId":"1667","severity":1,"message":"1678","line":189,"column":8,"nodeType":"1669","endLine":189,"endColumn":27,"suggestions":"1980"},{"ruleId":"1680","severity":1,"message":"1681","line":201,"column":13,"nodeType":"1682","messageId":"1683","endLine":201,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1755","line":8,"column":8,"nodeType":"1661","messageId":"1662","endLine":8,"endColumn":11},{"ruleId":"1659","severity":1,"message":"1981","line":9,"column":8,"nodeType":"1661","messageId":"1662","endLine":9,"endColumn":22},{"ruleId":"1659","severity":1,"message":"1982","line":10,"column":8,"nodeType":"1661","messageId":"1662","endLine":10,"endColumn":21},{"ruleId":"1659","severity":1,"message":"1983","line":11,"column":8,"nodeType":"1661","messageId":"1662","endLine":11,"endColumn":24},{"ruleId":"1659","severity":1,"message":"1984","line":12,"column":8,"nodeType":"1661","messageId":"1662","endLine":12,"endColumn":23},{"ruleId":"1659","severity":1,"message":"1985","line":13,"column":8,"nodeType":"1661","messageId":"1662","endLine":13,"endColumn":34},{"ruleId":"1659","severity":1,"message":"1986","line":14,"column":8,"nodeType":"1661","messageId":"1662","endLine":14,"endColumn":33},{"ruleId":"1659","severity":1,"message":"1987","line":15,"column":8,"nodeType":"1661","messageId":"1662","endLine":15,"endColumn":32},{"ruleId":"1659","severity":1,"message":"1988","line":16,"column":8,"nodeType":"1661","messageId":"1662","endLine":16,"endColumn":31},{"ruleId":"1659","severity":1,"message":"1989","line":17,"column":8,"nodeType":"1661","messageId":"1662","endLine":17,"endColumn":30},{"ruleId":"1659","severity":1,"message":"1990","line":28,"column":21,"nodeType":"1661","messageId":"1662","endLine":28,"endColumn":31},{"ruleId":"1659","severity":1,"message":"1991","line":29,"column":25,"nodeType":"1661","messageId":"1662","endLine":29,"endColumn":39},{"ruleId":"1659","severity":1,"message":"1827","line":7,"column":8,"nodeType":"1661","messageId":"1662","endLine":7,"endColumn":20},{"ruleId":"1663","severity":1,"message":"1664","line":69,"column":37,"nodeType":"1665","messageId":"1666","endLine":69,"endColumn":39},{"ruleId":"1663","severity":1,"message":"1664","line":71,"column":51,"nodeType":"1665","messageId":"1666","endLine":71,"endColumn":53},{"ruleId":"1663","severity":1,"message":"1664","line":143,"column":37,"nodeType":"1665","messageId":"1666","endLine":143,"endColumn":39},{"ruleId":"1663","severity":1,"message":"1664","line":146,"column":49,"nodeType":"1665","messageId":"1666","endLine":146,"endColumn":51},{"ruleId":"1659","severity":1,"message":"1812","line":2,"column":10,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":15},{"ruleId":"1659","severity":1,"message":"1828","line":2,"column":17,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":31},{"ruleId":"1659","severity":1,"message":"1829","line":2,"column":33,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":40},{"ruleId":"1659","severity":1,"message":"1830","line":3,"column":8,"nodeType":"1661","messageId":"1662","endLine":3,"endColumn":14},{"ruleId":"1659","severity":1,"message":"1831","line":5,"column":10,"nodeType":"1661","messageId":"1662","endLine":5,"endColumn":20},{"ruleId":"1659","severity":1,"message":"1832","line":6,"column":8,"nodeType":"1661","messageId":"1662","endLine":6,"endColumn":24},{"ruleId":"1659","severity":1,"message":"1833","line":7,"column":8,"nodeType":"1661","messageId":"1662","endLine":7,"endColumn":24},{"ruleId":"1663","severity":1,"message":"1664","line":57,"column":37,"nodeType":"1665","messageId":"1666","endLine":57,"endColumn":39},{"ruleId":"1663","severity":1,"message":"1664","line":59,"column":53,"nodeType":"1665","messageId":"1666","endLine":59,"endColumn":55},{"ruleId":"1663","severity":1,"message":"1664","line":133,"column":37,"nodeType":"1665","messageId":"1666","endLine":133,"endColumn":39},{"ruleId":"1663","severity":1,"message":"1664","line":137,"column":49,"nodeType":"1665","messageId":"1666","endLine":137,"endColumn":51},{"ruleId":"1663","severity":1,"message":"1664","line":56,"column":37,"nodeType":"1665","messageId":"1666","endLine":56,"endColumn":39},{"ruleId":"1663","severity":1,"message":"1664","line":58,"column":51,"nodeType":"1665","messageId":"1666","endLine":58,"endColumn":53},{"ruleId":"1663","severity":1,"message":"1664","line":130,"column":37,"nodeType":"1665","messageId":"1666","endLine":130,"endColumn":39},{"ruleId":"1663","severity":1,"message":"1664","line":133,"column":49,"nodeType":"1665","messageId":"1666","endLine":133,"endColumn":51},{"ruleId":"1659","severity":1,"message":"1834","line":12,"column":8,"nodeType":"1661","messageId":"1662","endLine":12,"endColumn":27},{"ruleId":"1659","severity":1,"message":"1835","line":7,"column":8,"nodeType":"1661","messageId":"1662","endLine":7,"endColumn":29},{"ruleId":"1659","severity":1,"message":"1992","line":1,"column":17,"nodeType":"1661","messageId":"1662","endLine":1,"endColumn":26},{"ruleId":"1659","severity":1,"message":"1993","line":1,"column":28,"nodeType":"1661","messageId":"1662","endLine":1,"endColumn":36},{"ruleId":"1659","severity":1,"message":"1748","line":2,"column":26,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":33},{"ruleId":"1659","severity":1,"message":"1993","line":1,"column":28,"nodeType":"1661","messageId":"1662","endLine":1,"endColumn":36},{"ruleId":"1659","severity":1,"message":"1748","line":2,"column":26,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":33},{"ruleId":"1659","severity":1,"message":"1993","line":1,"column":28,"nodeType":"1661","messageId":"1662","endLine":1,"endColumn":36},{"ruleId":"1659","severity":1,"message":"1748","line":2,"column":26,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":33},{"ruleId":"1659","severity":1,"message":"1992","line":1,"column":17,"nodeType":"1661","messageId":"1662","endLine":1,"endColumn":26},{"ruleId":"1659","severity":1,"message":"1993","line":1,"column":28,"nodeType":"1661","messageId":"1662","endLine":1,"endColumn":36},{"ruleId":"1659","severity":1,"message":"1748","line":2,"column":26,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":33},{"ruleId":"1659","severity":1,"message":"1993","line":1,"column":28,"nodeType":"1661","messageId":"1662","endLine":1,"endColumn":36},{"ruleId":"1659","severity":1,"message":"1748","line":2,"column":26,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":33},{"ruleId":"1994","severity":1,"message":"1995","line":83,"column":37,"nodeType":"1780","endLine":83,"endColumn":66},{"ruleId":"1994","severity":1,"message":"1995","line":87,"column":37,"nodeType":"1780","endLine":87,"endColumn":66},{"ruleId":"1994","severity":1,"message":"1995","line":91,"column":37,"nodeType":"1780","endLine":91,"endColumn":66},{"ruleId":"1994","severity":1,"message":"1995","line":95,"column":37,"nodeType":"1780","endLine":95,"endColumn":66},{"ruleId":"1659","severity":1,"message":"1992","line":1,"column":17,"nodeType":"1661","messageId":"1662","endLine":1,"endColumn":26},{"ruleId":"1659","severity":1,"message":"1993","line":1,"column":28,"nodeType":"1661","messageId":"1662","endLine":1,"endColumn":36},{"ruleId":"1659","severity":1,"message":"1748","line":2,"column":26,"nodeType":"1661","messageId":"1662","endLine":2,"endColumn":33},"no-native-reassign",["1996"],"no-negated-in-lhs",["1997"],"no-unused-vars","'FormBootstrap' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'icons.length'. Either include it or remove the dependency array.","ArrayExpression",["1998"],"React Hook useEffect has missing dependencies: 'data', 'loadData', and 'paginationConfig.limit'. Either include them or remove the dependency array.",["1999"],"React Hook useEffect has missing dependencies: 'data' and 'loadData'. Either include them or remove the dependency array.",["2000"],"React Hook useEffect has missing dependencies: 'data', 'limit', and 'loadData'. Either include them or remove the dependency array.",["2001"],["2002"],"React Hook useEffect has missing dependencies: 'callLoadEditRegister' and 'idEdit'. Either include them or remove the dependency array.",["2003"],"no-dupe-keys","Duplicate key 'showCancelButton'.","ObjectExpression","unexpected",["2004"],["2005"],["2006"],["2007"],["2008"],["2009"],["2010"],["2011"],["2012"],["2013"],["2014"],["2015"],["2016"],["2017"],["2018"],["2019"],["2020"],["2021"],["2022"],["2023"],["2024"],["2025"],["2026"],["2027"],["2028"],["2029"],["2030"],["2031"],["2032"],["2033"],["2034"],["2035"],["2036"],["2037"],["2038"],["2039"],["2040"],["2041"],["2042"],["2043"],["2044"],["2045"],["2046"],["2047"],["2048"],["2049"],["2050"],["2051"],"'Yup' is defined but never used.",["2052"],["2053"],["2054"],["2055"],["2056"],["2057"],"React Hook useEffect has missing dependencies: 'status.length' and 'type.length'. Either include them or remove the dependency array.",["2058"],["2059"],["2060"],["2061"],["2062"],["2063"],["2064"],["2065"],"'Spinner' is defined but never used.","'Dropdown' is defined but never used.","'InputGroup' is defined but never used.","'FormControl' is defined but never used.","'Alert' is defined but never used.","'Button' is defined but never used.","'Modal' is defined but never used.","'api' is defined but never used.","'Field' is defined but never used.","'Form' is defined but never used.","'Formik' is defined but never used.","'Swal' is defined but never used.",["2066"],["2067"],["2068"],["2069"],["2070"],["2071"],"'SketchPicker' is defined but never used.",["2072"],["2073"],["2074"],["2075"],["2076"],["2077"],["2078"],["2079"],["2080"],["2081"],["2082"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"2083","text":"2084"},"'axios' is defined but never used.",["2085"],["2086"],["2087"],["2088"],["2089"],["2090"],["2091"],["2092"],["2093"],["2094"],["2095"],["2096"],["2097"],["2098"],["2099"],["2100"],["2101"],["2102"],["2103"],["2104"],["2105"],["2106"],["2107"],["2108"],["2109"],["2110"],["2111"],["2112"],"'Badge' is defined but never used.","'NavLink' is defined but never used.","'OverlayScrollbarsComponent' is defined but never used.","'ChartCustomHorizontalTooltip' is defined but never used.","'ChartSmallLine1' is defined but never used.","'ChartSmallLine2' is defined but never used.","'ChartSmallLine3' is defined but never used.","'ChartSmallLine4' is defined but never used.","'ChartBubble' is defined but never used.","'ChartSmallDoughnutChart1' is defined but never used.","'ChartSmallDoughnutChart2' is defined but never used.","'ChartSmallDoughnutChart3' is defined but never used.","'ChartSmallDoughnutChart4' is defined but never used.","'ChartSmallDoughnutChart5' is defined but never used.","'ChartSmallDoughnutChart6' is defined but never used.","'RightButtons' is defined but never used.","'OverlayTrigger' is defined but never used.","'Tooltip' is defined but never used.","'moment' is defined but never used.","'APP_PARAMS' is defined but never used.","'checkStatusColor' is defined but never used.","'checkStatusLabel' is defined but never used.","'NavLanguageSwitcher' is defined but never used.","'IconMenuNotifications' is defined but never used.","'ReactSelect' is defined but never used.","'log' is assigned a value but never used.",["2113"],["2114"],["2115"],["2116"],"'openLog' is assigned a value but never used.","'validationSchema' is assigned a value but never used.","'formatOptionLabel' is assigned a value but never used.",["2117"],["2118"],["2119"],["2120"],"'getParams' is assigned a value but never used.",["2121"],"'setOrganizationData' is assigned a value but never used.",{"range":"2122","text":"2084"},["1996"],["1997"],["2123"],["2124"],["2125"],["2126"],["2127"],["2128"],["2129"],["2130"],["2131"],["2132"],["2133"],["2134"],["2135"],["2136"],["2137"],["2138"],["2139"],["2140"],["2141"],["2142"],["2143"],["2144"],["2145"],["2146"],["2147"],["2148"],["2149"],["2150"],["2151"],["2152"],["2153"],["2154"],["2155"],["2156"],["2157"],["2158"],["2159"],["2160"],["2161"],["2162"],["2163"],["2164"],["2165"],["2166"],["2167"],["2168"],["2169"],["2170"],["2171"],["2172"],["2173"],["2174"],["2175"],["2176"],["2177"],["2178"],["2179"],["2180"],["2181"],["2182"],["2183"],["2184"],["2185"],["2186"],["2187"],["2188"],["2189"],["2190"],["2191"],["2192"],{"range":"2193","text":"2084"},["2194"],["2195"],["2196"],["2197"],["2198"],["2199"],["2200"],["2201"],["2202"],["2203"],["2204"],{"range":"2205","text":"2084"},["2206"],["2207"],["2208"],["2209"],["2210"],["2211"],["2212"],"'isLogin' is assigned a value but never used.",["2213"],["2214"],["2215"],["2216"],"'role' is assigned a value but never used.",["2217"],["2218"],["2219"],["2220"],["2221"],["2222"],["2223"],["2224"],["2225"],["2226"],["2227"],["2228"],["2229"],["2230"],["2231"],["2232"],["2233"],["2234"],["2235"],["2236"],["2237"],["2238"],["2239"],["2240"],["2241"],["2242"],["2243"],["2244"],["2245"],["2246"],"'ChartLogsMonth' is defined but never used.","'ChartLogsDays' is defined but never used.","'ChartOrdersMonth' is defined but never used.","'ChartOrdersDays' is defined but never used.","'ChartNewOrganizationsMonth' is defined but never used.","'ChartNewOrganizationsDays' is defined but never used.","'ChartOrdersByStatusMonth' is defined but never used.","'ChartOrdersByStatusDays' is defined but never used.","'ChartOrdersByTypeMonth' is defined but never used.","'setLoading' is assigned a value but never used.","'setTotalOrders' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"desc":"2247","fix":"2248"},{"desc":"2249","fix":"2250"},{"desc":"2251","fix":"2252"},{"desc":"2253","fix":"2254"},{"desc":"2255","fix":"2256"},{"desc":"2257","fix":"2258"},{"desc":"2247","fix":"2259"},{"desc":"2249","fix":"2260"},{"desc":"2251","fix":"2261"},{"desc":"2253","fix":"2262"},{"desc":"2255","fix":"2263"},{"desc":"2257","fix":"2264"},{"desc":"2247","fix":"2265"},{"desc":"2249","fix":"2266"},{"desc":"2251","fix":"2267"},{"desc":"2253","fix":"2268"},{"desc":"2255","fix":"2269"},{"desc":"2257","fix":"2270"},{"desc":"2247","fix":"2271"},{"desc":"2249","fix":"2272"},{"desc":"2251","fix":"2273"},{"desc":"2253","fix":"2274"},{"desc":"2255","fix":"2275"},{"desc":"2257","fix":"2276"},{"desc":"2247","fix":"2277"},{"desc":"2249","fix":"2278"},{"desc":"2251","fix":"2279"},{"desc":"2253","fix":"2280"},{"desc":"2255","fix":"2281"},{"desc":"2257","fix":"2282"},{"desc":"2247","fix":"2283"},{"desc":"2249","fix":"2284"},{"desc":"2251","fix":"2285"},{"desc":"2253","fix":"2286"},{"desc":"2255","fix":"2287"},{"desc":"2257","fix":"2288"},{"desc":"2247","fix":"2289"},{"desc":"2249","fix":"2290"},{"desc":"2251","fix":"2291"},{"desc":"2253","fix":"2292"},{"desc":"2255","fix":"2293"},{"desc":"2257","fix":"2294"},{"desc":"2247","fix":"2295"},{"desc":"2249","fix":"2296"},{"desc":"2251","fix":"2297"},{"desc":"2253","fix":"2298"},{"desc":"2255","fix":"2299"},{"desc":"2257","fix":"2300"},{"desc":"2247","fix":"2301"},{"desc":"2249","fix":"2302"},{"desc":"2251","fix":"2303"},{"desc":"2253","fix":"2304"},{"desc":"2255","fix":"2305"},{"desc":"2257","fix":"2306"},{"desc":"2249","fix":"2307"},{"desc":"2251","fix":"2308"},{"desc":"2253","fix":"2309"},{"desc":"2255","fix":"2310"},{"desc":"2257","fix":"2311"},{"desc":"2312","fix":"2313"},{"desc":"2314","fix":"2315"},{"desc":"2249","fix":"2316"},{"desc":"2251","fix":"2317"},{"desc":"2253","fix":"2318"},{"desc":"2255","fix":"2319"},{"desc":"2257","fix":"2320"},{"desc":"2312","fix":"2321"},{"desc":"2314","fix":"2322"},{"desc":"2247","fix":"2323"},{"desc":"2249","fix":"2324"},{"desc":"2251","fix":"2325"},{"desc":"2253","fix":"2326"},{"desc":"2255","fix":"2327"},{"desc":"2257","fix":"2328"},{"desc":"2247","fix":"2329"},{"desc":"2249","fix":"2330"},{"desc":"2251","fix":"2331"},{"desc":"2253","fix":"2332"},{"desc":"2255","fix":"2333"},{"desc":"2257","fix":"2334"},{"desc":"2249","fix":"2335"},{"desc":"2251","fix":"2336"},{"desc":"2253","fix":"2337"},{"desc":"2255","fix":"2338"},{"desc":"2314","fix":"2339"},[52706,52706]," rel=\"noreferrer\"",{"desc":"2249","fix":"2340"},{"desc":"2251","fix":"2341"},{"desc":"2253","fix":"2342"},{"desc":"2255","fix":"2343"},{"desc":"2247","fix":"2344"},{"desc":"2249","fix":"2345"},{"desc":"2251","fix":"2346"},{"desc":"2253","fix":"2347"},{"desc":"2255","fix":"2348"},{"desc":"2257","fix":"2349"},{"desc":"2247","fix":"2350"},{"desc":"2249","fix":"2351"},{"desc":"2251","fix":"2352"},{"desc":"2253","fix":"2353"},{"desc":"2255","fix":"2354"},{"desc":"2257","fix":"2355"},{"desc":"2247","fix":"2356"},{"desc":"2249","fix":"2357"},{"desc":"2251","fix":"2358"},{"desc":"2253","fix":"2359"},{"desc":"2255","fix":"2360"},{"desc":"2257","fix":"2361"},{"desc":"2247","fix":"2362"},{"desc":"2249","fix":"2363"},{"desc":"2251","fix":"2364"},{"desc":"2253","fix":"2365"},{"desc":"2255","fix":"2366"},{"desc":"2257","fix":"2367"},{"desc":"2249","fix":"2368"},{"desc":"2251","fix":"2369"},{"desc":"2253","fix":"2370"},{"desc":"2255","fix":"2371"},{"desc":"2249","fix":"2372"},{"desc":"2251","fix":"2373"},{"desc":"2253","fix":"2374"},{"desc":"2255","fix":"2375"},{"desc":"2314","fix":"2376"},[52514,52514],{"desc":"2247","fix":"2377"},{"desc":"2249","fix":"2378"},{"desc":"2251","fix":"2379"},{"desc":"2253","fix":"2380"},{"desc":"2255","fix":"2381"},{"desc":"2257","fix":"2382"},{"desc":"2247","fix":"2383"},{"desc":"2249","fix":"2384"},{"desc":"2251","fix":"2385"},{"desc":"2253","fix":"2386"},{"desc":"2255","fix":"2387"},{"desc":"2257","fix":"2388"},{"desc":"2249","fix":"2389"},{"desc":"2251","fix":"2390"},{"desc":"2253","fix":"2391"},{"desc":"2255","fix":"2392"},{"desc":"2247","fix":"2393"},{"desc":"2249","fix":"2394"},{"desc":"2251","fix":"2395"},{"desc":"2253","fix":"2396"},{"desc":"2255","fix":"2397"},{"desc":"2257","fix":"2398"},{"desc":"2247","fix":"2399"},{"desc":"2249","fix":"2400"},{"desc":"2251","fix":"2401"},{"desc":"2253","fix":"2402"},{"desc":"2255","fix":"2403"},{"desc":"2257","fix":"2404"},{"desc":"2247","fix":"2405"},{"desc":"2249","fix":"2406"},{"desc":"2251","fix":"2407"},{"desc":"2253","fix":"2408"},{"desc":"2255","fix":"2409"},{"desc":"2257","fix":"2410"},{"desc":"2247","fix":"2411"},{"desc":"2249","fix":"2412"},{"desc":"2251","fix":"2413"},{"desc":"2253","fix":"2414"},{"desc":"2255","fix":"2415"},{"desc":"2257","fix":"2416"},{"desc":"2247","fix":"2417"},{"desc":"2249","fix":"2418"},{"desc":"2251","fix":"2419"},{"desc":"2253","fix":"2420"},{"desc":"2255","fix":"2421"},{"desc":"2257","fix":"2422"},{"desc":"2247","fix":"2423"},{"desc":"2249","fix":"2424"},{"desc":"2251","fix":"2425"},{"desc":"2253","fix":"2426"},{"desc":"2255","fix":"2427"},{"desc":"2257","fix":"2428"},{"desc":"2249","fix":"2429"},{"desc":"2251","fix":"2430"},{"desc":"2253","fix":"2431"},{"desc":"2255","fix":"2432"},{"desc":"2257","fix":"2433"},{"desc":"2312","fix":"2434"},{"desc":"2314","fix":"2435"},{"desc":"2247","fix":"2436"},{"desc":"2249","fix":"2437"},{"desc":"2251","fix":"2438"},{"desc":"2253","fix":"2439"},{"desc":"2255","fix":"2440"},{"desc":"2257","fix":"2441"},{"desc":"2249","fix":"2442"},{"desc":"2251","fix":"2443"},{"desc":"2253","fix":"2444"},{"desc":"2255","fix":"2445"},{"desc":"2314","fix":"2446"},[52706,52706],{"desc":"2247","fix":"2447"},{"desc":"2249","fix":"2448"},{"desc":"2251","fix":"2449"},{"desc":"2253","fix":"2450"},{"desc":"2255","fix":"2451"},{"desc":"2257","fix":"2452"},{"desc":"2249","fix":"2453"},{"desc":"2251","fix":"2454"},{"desc":"2253","fix":"2455"},{"desc":"2255","fix":"2456"},{"desc":"2314","fix":"2457"},[52514,52514],{"desc":"2249","fix":"2458"},{"desc":"2251","fix":"2459"},{"desc":"2253","fix":"2460"},{"desc":"2255","fix":"2461"},{"desc":"2257","fix":"2462"},{"desc":"2312","fix":"2463"},{"desc":"2314","fix":"2464"},{"desc":"2249","fix":"2465"},{"desc":"2251","fix":"2466"},{"desc":"2253","fix":"2467"},{"desc":"2255","fix":"2468"},{"desc":"2247","fix":"2469"},{"desc":"2249","fix":"2470"},{"desc":"2251","fix":"2471"},{"desc":"2253","fix":"2472"},{"desc":"2255","fix":"2473"},{"desc":"2257","fix":"2474"},{"desc":"2247","fix":"2475"},{"desc":"2249","fix":"2476"},{"desc":"2251","fix":"2477"},{"desc":"2253","fix":"2478"},{"desc":"2255","fix":"2479"},{"desc":"2257","fix":"2480"},{"desc":"2247","fix":"2481"},{"desc":"2249","fix":"2482"},{"desc":"2251","fix":"2483"},{"desc":"2253","fix":"2484"},{"desc":"2255","fix":"2485"},{"desc":"2257","fix":"2486"},{"desc":"2247","fix":"2487"},{"desc":"2249","fix":"2488"},{"desc":"2251","fix":"2489"},{"desc":"2253","fix":"2490"},{"desc":"2255","fix":"2491"},{"desc":"2257","fix":"2492"},{"desc":"2247","fix":"2493"},{"desc":"2249","fix":"2494"},{"desc":"2251","fix":"2495"},{"desc":"2253","fix":"2496"},{"desc":"2255","fix":"2497"},{"desc":"2257","fix":"2498"},"Update the dependencies array to be: [icons.length]",{"range":"2499","text":"2500"},"Update the dependencies array to be: [data, loadData, paginationConfig.limit, paginationConfig.page]",{"range":"2501","text":"2502"},"Update the dependencies array to be: [data, limit, loadData]",{"range":"2503","text":"2504"},"Update the dependencies array to be: [data, endDate, limit, loadData, startDate]",{"range":"2505","text":"2506"},"Update the dependencies array to be: [data, limit, loadData, order, orderBy]",{"range":"2507","text":"2508"},"Update the dependencies array to be: [callLoadEditRegister, idEdit, modalEditRegister]",{"range":"2509","text":"2510"},{"range":"2511","text":"2500"},{"range":"2512","text":"2502"},{"range":"2513","text":"2504"},{"range":"2514","text":"2506"},{"range":"2515","text":"2508"},{"range":"2516","text":"2510"},{"range":"2517","text":"2500"},{"range":"2518","text":"2502"},{"range":"2519","text":"2504"},{"range":"2520","text":"2506"},{"range":"2521","text":"2508"},{"range":"2522","text":"2510"},{"range":"2523","text":"2500"},{"range":"2524","text":"2502"},{"range":"2525","text":"2504"},{"range":"2526","text":"2506"},{"range":"2527","text":"2508"},{"range":"2528","text":"2510"},{"range":"2529","text":"2500"},{"range":"2530","text":"2502"},{"range":"2531","text":"2504"},{"range":"2532","text":"2506"},{"range":"2533","text":"2508"},{"range":"2534","text":"2510"},{"range":"2535","text":"2500"},{"range":"2536","text":"2502"},{"range":"2537","text":"2504"},{"range":"2538","text":"2506"},{"range":"2539","text":"2508"},{"range":"2540","text":"2510"},{"range":"2541","text":"2500"},{"range":"2542","text":"2502"},{"range":"2543","text":"2504"},{"range":"2544","text":"2506"},{"range":"2545","text":"2508"},{"range":"2546","text":"2510"},{"range":"2547","text":"2500"},{"range":"2548","text":"2502"},{"range":"2549","text":"2504"},{"range":"2550","text":"2506"},{"range":"2551","text":"2508"},{"range":"2552","text":"2510"},{"range":"2553","text":"2500"},{"range":"2554","text":"2502"},{"range":"2555","text":"2504"},{"range":"2556","text":"2506"},{"range":"2557","text":"2508"},{"range":"2558","text":"2510"},{"range":"2559","text":"2502"},{"range":"2560","text":"2504"},{"range":"2561","text":"2506"},{"range":"2562","text":"2508"},{"range":"2563","text":"2510"},"Update the dependencies array to be: [callLoadEditRegister, idEdit, modalViewRegister]",{"range":"2564","text":"2565"},"Update the dependencies array to be: [status.length, type.length]",{"range":"2566","text":"2567"},{"range":"2568","text":"2502"},{"range":"2569","text":"2504"},{"range":"2570","text":"2506"},{"range":"2571","text":"2508"},{"range":"2572","text":"2510"},{"range":"2573","text":"2565"},{"range":"2574","text":"2567"},{"range":"2575","text":"2500"},{"range":"2576","text":"2502"},{"range":"2577","text":"2504"},{"range":"2578","text":"2506"},{"range":"2579","text":"2508"},{"range":"2580","text":"2510"},{"range":"2581","text":"2500"},{"range":"2582","text":"2502"},{"range":"2583","text":"2504"},{"range":"2584","text":"2506"},{"range":"2585","text":"2508"},{"range":"2586","text":"2510"},{"range":"2587","text":"2502"},{"range":"2588","text":"2504"},{"range":"2589","text":"2506"},{"range":"2590","text":"2508"},{"range":"2591","text":"2567"},{"range":"2592","text":"2502"},{"range":"2593","text":"2504"},{"range":"2594","text":"2506"},{"range":"2595","text":"2508"},{"range":"2596","text":"2500"},{"range":"2597","text":"2502"},{"range":"2598","text":"2504"},{"range":"2599","text":"2506"},{"range":"2600","text":"2508"},{"range":"2601","text":"2510"},{"range":"2602","text":"2500"},{"range":"2603","text":"2502"},{"range":"2604","text":"2504"},{"range":"2605","text":"2506"},{"range":"2606","text":"2508"},{"range":"2607","text":"2510"},{"range":"2608","text":"2500"},{"range":"2609","text":"2502"},{"range":"2610","text":"2504"},{"range":"2611","text":"2506"},{"range":"2612","text":"2508"},{"range":"2613","text":"2510"},{"range":"2614","text":"2500"},{"range":"2615","text":"2502"},{"range":"2616","text":"2504"},{"range":"2617","text":"2506"},{"range":"2618","text":"2508"},{"range":"2619","text":"2510"},{"range":"2620","text":"2502"},{"range":"2621","text":"2504"},{"range":"2622","text":"2506"},{"range":"2623","text":"2508"},{"range":"2624","text":"2502"},{"range":"2625","text":"2504"},{"range":"2626","text":"2506"},{"range":"2627","text":"2508"},{"range":"2628","text":"2567"},{"range":"2629","text":"2500"},{"range":"2630","text":"2502"},{"range":"2631","text":"2504"},{"range":"2632","text":"2506"},{"range":"2633","text":"2508"},{"range":"2634","text":"2510"},{"range":"2635","text":"2500"},{"range":"2636","text":"2502"},{"range":"2637","text":"2504"},{"range":"2638","text":"2506"},{"range":"2639","text":"2508"},{"range":"2640","text":"2510"},{"range":"2641","text":"2502"},{"range":"2642","text":"2504"},{"range":"2643","text":"2506"},{"range":"2644","text":"2508"},{"range":"2645","text":"2500"},{"range":"2646","text":"2502"},{"range":"2647","text":"2504"},{"range":"2648","text":"2506"},{"range":"2649","text":"2508"},{"range":"2650","text":"2510"},{"range":"2651","text":"2500"},{"range":"2652","text":"2502"},{"range":"2653","text":"2504"},{"range":"2654","text":"2506"},{"range":"2655","text":"2508"},{"range":"2656","text":"2510"},{"range":"2657","text":"2500"},{"range":"2658","text":"2502"},{"range":"2659","text":"2504"},{"range":"2660","text":"2506"},{"range":"2661","text":"2508"},{"range":"2662","text":"2510"},{"range":"2663","text":"2500"},{"range":"2664","text":"2502"},{"range":"2665","text":"2504"},{"range":"2666","text":"2506"},{"range":"2667","text":"2508"},{"range":"2668","text":"2510"},{"range":"2669","text":"2500"},{"range":"2670","text":"2502"},{"range":"2671","text":"2504"},{"range":"2672","text":"2506"},{"range":"2673","text":"2508"},{"range":"2674","text":"2510"},{"range":"2675","text":"2500"},{"range":"2676","text":"2502"},{"range":"2677","text":"2504"},{"range":"2678","text":"2506"},{"range":"2679","text":"2508"},{"range":"2680","text":"2510"},{"range":"2681","text":"2502"},{"range":"2682","text":"2504"},{"range":"2683","text":"2506"},{"range":"2684","text":"2508"},{"range":"2685","text":"2510"},{"range":"2686","text":"2565"},{"range":"2687","text":"2567"},{"range":"2688","text":"2500"},{"range":"2689","text":"2502"},{"range":"2690","text":"2504"},{"range":"2691","text":"2506"},{"range":"2692","text":"2508"},{"range":"2693","text":"2510"},{"range":"2694","text":"2502"},{"range":"2695","text":"2504"},{"range":"2696","text":"2506"},{"range":"2697","text":"2508"},{"range":"2698","text":"2567"},{"range":"2699","text":"2500"},{"range":"2700","text":"2502"},{"range":"2701","text":"2504"},{"range":"2702","text":"2506"},{"range":"2703","text":"2508"},{"range":"2704","text":"2510"},{"range":"2705","text":"2502"},{"range":"2706","text":"2504"},{"range":"2707","text":"2506"},{"range":"2708","text":"2508"},{"range":"2709","text":"2567"},{"range":"2710","text":"2502"},{"range":"2711","text":"2504"},{"range":"2712","text":"2506"},{"range":"2713","text":"2508"},{"range":"2714","text":"2510"},{"range":"2715","text":"2565"},{"range":"2716","text":"2567"},{"range":"2717","text":"2502"},{"range":"2718","text":"2504"},{"range":"2719","text":"2506"},{"range":"2720","text":"2508"},{"range":"2721","text":"2500"},{"range":"2722","text":"2502"},{"range":"2723","text":"2504"},{"range":"2724","text":"2506"},{"range":"2725","text":"2508"},{"range":"2726","text":"2510"},{"range":"2727","text":"2500"},{"range":"2728","text":"2502"},{"range":"2729","text":"2504"},{"range":"2730","text":"2506"},{"range":"2731","text":"2508"},{"range":"2732","text":"2510"},{"range":"2733","text":"2500"},{"range":"2734","text":"2502"},{"range":"2735","text":"2504"},{"range":"2736","text":"2506"},{"range":"2737","text":"2508"},{"range":"2738","text":"2510"},{"range":"2739","text":"2500"},{"range":"2740","text":"2502"},{"range":"2741","text":"2504"},{"range":"2742","text":"2506"},{"range":"2743","text":"2508"},{"range":"2744","text":"2510"},{"range":"2745","text":"2500"},{"range":"2746","text":"2502"},{"range":"2747","text":"2504"},{"range":"2748","text":"2506"},{"range":"2749","text":"2508"},{"range":"2750","text":"2510"},[4155,4157],"[icons.length]",[4640,4663],"[data, loadData, paginationConfig.limit, paginationConfig.page]",[4756,4763],"[data, limit, loadData]",[4914,4934],"[data, endDate, limit, loadData, startDate]",[5027,5043],"[data, limit, loadData, order, orderBy]",[5568,5587],"[callLoadEditRegister, idEdit, modalEditRegister]",[4152,4154],[4637,4660],[4753,4760],[4911,4931],[5024,5040],[5565,5584],[4142,4144],[4627,4650],[4743,4750],[4901,4921],[5014,5030],[5553,5572],[4151,4153],[4636,4659],[4752,4759],[4910,4930],[5023,5039],[5562,5581],[4146,4148],[4631,4654],[4747,4754],[4905,4925],[5018,5034],[5556,5575],[4146,4148],[4631,4654],[4747,4754],[4905,4925],[5018,5034],[5556,5575],[4145,4147],[4630,4653],[4746,4753],[4904,4924],[5017,5033],[5558,5577],[4155,4157],[4640,4663],[4756,4763],[4914,4934],[5027,5043],[5570,5589],[4160,4162],[4645,4668],[4761,4768],[4919,4939],[5032,5048],[5574,5593],[4078,4101],[4194,4201],[4352,4372],[4465,4481],[5002,5021],[5175,5194],"[callLoadEditRegister, idEdit, modalViewRegister]",[7637,7639],"[status.length, type.length]",[4057,4080],[4173,4180],[4331,4351],[4444,4460],[4980,4999],[5153,5172],[6403,6405],[4147,4149],[4632,4655],[4748,4755],[4906,4926],[5019,5035],[5571,5590],[4138,4140],[4623,4646],[4739,4746],[4897,4917],[5010,5026],[5560,5579],[3871,3894],[3987,3994],[4145,4165],[4258,4274],[7400,7402],[3687,3710],[3803,3810],[3961,3981],[4074,4090],[4166,4168],[4651,4674],[4767,4774],[4925,4945],[5038,5054],[5580,5599],[4178,4180],[4663,4686],[4779,4786],[4937,4957],[5050,5066],[5598,5617],[4156,4158],[4641,4664],[4757,4764],[4915,4935],[5028,5044],[5568,5587],[4162,4164],[4647,4670],[4763,4770],[4921,4941],[5034,5050],[5580,5599],[3887,3910],[4003,4010],[4161,4181],[4274,4290],[4024,4047],[4140,4147],[4298,4318],[4411,4427],[7556,7558],[4142,4144],[4627,4650],[4743,4750],[4901,4921],[5014,5030],[5553,5572],[4155,4157],[4640,4663],[4756,4763],[4914,4934],[5027,5043],[5568,5587],[3887,3910],[4003,4010],[4161,4181],[4274,4290],[4151,4153],[4636,4659],[4752,4759],[4910,4930],[5023,5039],[5562,5581],[4152,4154],[4637,4660],[4753,4760],[4911,4931],[5024,5040],[5565,5584],[4160,4162],[4645,4668],[4761,4768],[4919,4939],[5032,5048],[5574,5593],[4146,4148],[4631,4654],[4747,4754],[4905,4925],[5018,5034],[5556,5575],[4155,4157],[4640,4663],[4756,4763],[4914,4934],[5027,5043],[5570,5589],[4145,4147],[4630,4653],[4746,4753],[4904,4924],[5017,5033],[5558,5577],[4057,4080],[4173,4180],[4331,4351],[4444,4460],[4980,4999],[5153,5172],[6403,6405],[4156,4158],[4641,4664],[4757,4764],[4915,4935],[5028,5044],[5568,5587],[3871,3894],[3987,3994],[4145,4165],[4258,4274],[7400,7402],[4166,4168],[4651,4674],[4767,4774],[4925,4945],[5038,5054],[5580,5599],[4024,4047],[4140,4147],[4298,4318],[4411,4427],[7556,7558],[4078,4101],[4194,4201],[4352,4372],[4465,4481],[5002,5021],[5175,5194],[7637,7639],[3853,3876],[3969,3976],[4127,4147],[4240,4256],[4147,4149],[4632,4655],[4748,4755],[4906,4926],[5019,5035],[5571,5590],[4178,4180],[4663,4686],[4779,4786],[4937,4957],[5050,5066],[5598,5617],[4146,4148],[4631,4654],[4747,4754],[4905,4925],[5018,5034],[5556,5575],[4162,4164],[4647,4670],[4763,4770],[4921,4941],[5034,5050],[5580,5599],[4138,4140],[4623,4646],[4739,4746],[4897,4917],[5010,5026],[5560,5579]]