{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Partitions a string based on character indices.\n *\n * @param {string} str - string to partition\n * @param {[number,number][]} indices - array of tuples to match [start, end] indices\n * @param {function} callback - callback function called with matching characters\n */\nfunction strind(str, indices, callback) {\n  var strs = str.split('');\n  var strsLen = strs.length;\n  var idx = Array.isArray(indices[0]) ? indices : [indices];\n  var partition = [];\n  var nonmatched = [];\n  function updateNonmatched(open, close, index) {\n    var chars = str.slice(open, close);\n    if (!chars.length) {\n      return;\n    }\n    nonmatched.push({\n      chars: chars,\n      index: index\n    });\n    if (callback) {\n      var cb = callback({\n        chars: chars,\n        matches: false\n      });\n      partition.push(cb);\n    }\n  }\n  for (var i = 0, len = idx.length; i < len; i++) {\n    var _a = idx[i],\n      start = _a[0],\n      end = _a[1];\n    var floor = start >= 0 ? start : 0;\n    var ceiling = end >= strsLen ? strsLen : end + 1;\n    if (i === 0 && start > 0) {\n      updateNonmatched(0, start, 0);\n    }\n    var chars = str.slice(floor, ceiling);\n    if (callback) {\n      var cb = callback({\n        chars: chars,\n        matches: true\n      });\n      partition.push(cb);\n    } else {\n      partition.push(chars);\n    }\n    if (end < strsLen) {\n      var open = end + 1;\n      var close = i < len - 1 ? idx[i + 1][0] : strsLen;\n      updateNonmatched(open, close, partition.length);\n    }\n    if (end >= strsLen) {\n      break;\n    }\n  }\n  return {\n    unmatched: nonmatched,\n    matched: partition\n  };\n}\nexports.default = strind;","map":{"version":3,"names":["Object","defineProperty","exports","value","strind","str","indices","callback","strs","split","strsLen","length","idx","Array","isArray","partition","nonmatched","updateNonmatched","open","close","index","chars","slice","push","cb","matches","i","len","_a","start","end","floor","ceiling","unmatched","matched","default"],"sources":["/Users/caio/Projects/Samples/front-vawlog/node_modules/strind/lib/strind.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Partitions a string based on character indices.\n *\n * @param {string} str - string to partition\n * @param {[number,number][]} indices - array of tuples to match [start, end] indices\n * @param {function} callback - callback function called with matching characters\n */\nfunction strind(str, indices, callback) {\n    var strs = str.split('');\n    var strsLen = strs.length;\n    var idx = Array.isArray(indices[0]) ? indices : [indices];\n    var partition = [];\n    var nonmatched = [];\n    function updateNonmatched(open, close, index) {\n        var chars = str.slice(open, close);\n        if (!chars.length) {\n            return;\n        }\n        nonmatched.push({ chars: chars, index: index });\n        if (callback) {\n            var cb = callback({ chars: chars, matches: false });\n            partition.push(cb);\n        }\n    }\n    for (var i = 0, len = idx.length; i < len; i++) {\n        var _a = idx[i], start = _a[0], end = _a[1];\n        var floor = start >= 0 ? start : 0;\n        var ceiling = end >= strsLen ? strsLen : end + 1;\n        if (i === 0 && start > 0) {\n            updateNonmatched(0, start, 0);\n        }\n        var chars = str.slice(floor, ceiling);\n        if (callback) {\n            var cb = callback({ chars: chars, matches: true });\n            partition.push(cb);\n        }\n        else {\n            partition.push(chars);\n        }\n        if (end < strsLen) {\n            var open = end + 1;\n            var close = i < len - 1 ? idx[i + 1][0] : strsLen;\n            updateNonmatched(open, close, partition.length);\n        }\n        if (end >= strsLen) {\n            break;\n        }\n    }\n    return {\n        unmatched: nonmatched,\n        matched: partition\n    };\n}\nexports.default = strind;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAM,CAACC,GAAG,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EACpC,IAAIC,IAAI,GAAGH,GAAG,CAACI,KAAK,CAAC,EAAE,CAAC;EACxB,IAAIC,OAAO,GAAGF,IAAI,CAACG,MAAM;EACzB,IAAIC,GAAG,GAAGC,KAAK,CAACC,OAAO,CAACR,OAAO,CAAC,CAAC,CAAC,CAAC,GAAGA,OAAO,GAAG,CAACA,OAAO,CAAC;EACzD,IAAIS,SAAS,GAAG,EAAE;EAClB,IAAIC,UAAU,GAAG,EAAE;EACnB,SAASC,gBAAgB,CAACC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAE;IAC1C,IAAIC,KAAK,GAAGhB,GAAG,CAACiB,KAAK,CAACJ,IAAI,EAAEC,KAAK,CAAC;IAClC,IAAI,CAACE,KAAK,CAACV,MAAM,EAAE;MACf;IACJ;IACAK,UAAU,CAACO,IAAI,CAAC;MAAEF,KAAK,EAAEA,KAAK;MAAED,KAAK,EAAEA;IAAM,CAAC,CAAC;IAC/C,IAAIb,QAAQ,EAAE;MACV,IAAIiB,EAAE,GAAGjB,QAAQ,CAAC;QAAEc,KAAK,EAAEA,KAAK;QAAEI,OAAO,EAAE;MAAM,CAAC,CAAC;MACnDV,SAAS,CAACQ,IAAI,CAACC,EAAE,CAAC;IACtB;EACJ;EACA,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGf,GAAG,CAACD,MAAM,EAAEe,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;IAC5C,IAAIE,EAAE,GAAGhB,GAAG,CAACc,CAAC,CAAC;MAAEG,KAAK,GAAGD,EAAE,CAAC,CAAC,CAAC;MAAEE,GAAG,GAAGF,EAAE,CAAC,CAAC,CAAC;IAC3C,IAAIG,KAAK,GAAGF,KAAK,IAAI,CAAC,GAAGA,KAAK,GAAG,CAAC;IAClC,IAAIG,OAAO,GAAGF,GAAG,IAAIpB,OAAO,GAAGA,OAAO,GAAGoB,GAAG,GAAG,CAAC;IAChD,IAAIJ,CAAC,KAAK,CAAC,IAAIG,KAAK,GAAG,CAAC,EAAE;MACtBZ,gBAAgB,CAAC,CAAC,EAAEY,KAAK,EAAE,CAAC,CAAC;IACjC;IACA,IAAIR,KAAK,GAAGhB,GAAG,CAACiB,KAAK,CAACS,KAAK,EAAEC,OAAO,CAAC;IACrC,IAAIzB,QAAQ,EAAE;MACV,IAAIiB,EAAE,GAAGjB,QAAQ,CAAC;QAAEc,KAAK,EAAEA,KAAK;QAAEI,OAAO,EAAE;MAAK,CAAC,CAAC;MAClDV,SAAS,CAACQ,IAAI,CAACC,EAAE,CAAC;IACtB,CAAC,MACI;MACDT,SAAS,CAACQ,IAAI,CAACF,KAAK,CAAC;IACzB;IACA,IAAIS,GAAG,GAAGpB,OAAO,EAAE;MACf,IAAIQ,IAAI,GAAGY,GAAG,GAAG,CAAC;MAClB,IAAIX,KAAK,GAAGO,CAAC,GAAGC,GAAG,GAAG,CAAC,GAAGf,GAAG,CAACc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGhB,OAAO;MACjDO,gBAAgB,CAACC,IAAI,EAAEC,KAAK,EAAEJ,SAAS,CAACJ,MAAM,CAAC;IACnD;IACA,IAAImB,GAAG,IAAIpB,OAAO,EAAE;MAChB;IACJ;EACJ;EACA,OAAO;IACHuB,SAAS,EAAEjB,UAAU;IACrBkB,OAAO,EAAEnB;EACb,CAAC;AACL;AACAb,OAAO,CAACiC,OAAO,GAAG/B,MAAM"},"metadata":{},"sourceType":"script"}